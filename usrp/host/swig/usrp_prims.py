# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_usrp_prims', [dirname(__file__)])
        except ImportError:
            import _usrp_prims
            return _usrp_prims
        if fp is not None:
            try:
                _mod = imp.load_module('_usrp_prims', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _usrp_prims = swig_import_helper()
    del swig_import_helper
else:
    import _usrp_prims
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _usrp_prims.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _usrp_prims.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _usrp_prims.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _usrp_prims.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _usrp_prims.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _usrp_prims.SwigPyIterator_equal(self, x)

    def copy(self):
        return _usrp_prims.SwigPyIterator_copy(self)

    def next(self):
        return _usrp_prims.SwigPyIterator_next(self)

    def __next__(self):
        return _usrp_prims.SwigPyIterator___next__(self)

    def previous(self):
        return _usrp_prims.SwigPyIterator_previous(self)

    def advance(self, n):
        return _usrp_prims.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _usrp_prims.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _usrp_prims.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _usrp_prims.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _usrp_prims.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _usrp_prims.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _usrp_prims.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _usrp_prims.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


_usrp_prims.ULS_ERROR_swigconstant(_usrp_prims)
ULS_ERROR = _usrp_prims.ULS_ERROR

_usrp_prims.ULS_OK_swigconstant(_usrp_prims)
ULS_OK = _usrp_prims.ULS_OK

_usrp_prims.ULS_ALREADY_LOADED_swigconstant(_usrp_prims)
ULS_ALREADY_LOADED = _usrp_prims.ULS_ALREADY_LOADED

def usrp_one_time_init(ctx=None):
    return _usrp_prims.usrp_one_time_init(ctx)
usrp_one_time_init = _usrp_prims.usrp_one_time_init

def usrp_rescan():
    return _usrp_prims.usrp_rescan()
usrp_rescan = _usrp_prims.usrp_rescan

def usrp_find_device(nth, fx2_ok_p=False, ctx=None):
    return _usrp_prims.usrp_find_device(nth, fx2_ok_p, ctx)
usrp_find_device = _usrp_prims.usrp_find_device

def usrp_usrp_p(q):
    return _usrp_prims.usrp_usrp_p(q)
usrp_usrp_p = _usrp_prims.usrp_usrp_p

def usrp_usrp0_p(q):
    return _usrp_prims.usrp_usrp0_p(q)
usrp_usrp0_p = _usrp_prims.usrp_usrp0_p

def usrp_usrp1_p(q):
    return _usrp_prims.usrp_usrp1_p(q)
usrp_usrp1_p = _usrp_prims.usrp_usrp1_p

def usrp_usrp2_p(q):
    return _usrp_prims.usrp_usrp2_p(q)
usrp_usrp2_p = _usrp_prims.usrp_usrp2_p

def usrp_hw_rev(q):
    return _usrp_prims.usrp_hw_rev(q)
usrp_hw_rev = _usrp_prims.usrp_hw_rev

def usrp_fx2_p(q):
    return _usrp_prims.usrp_fx2_p(q)
usrp_fx2_p = _usrp_prims.usrp_fx2_p

def usrp_unconfigured_usrp_p(q):
    return _usrp_prims.usrp_unconfigured_usrp_p(q)
usrp_unconfigured_usrp_p = _usrp_prims.usrp_unconfigured_usrp_p

def usrp_configured_usrp_p(q):
    return _usrp_prims.usrp_configured_usrp_p(q)
usrp_configured_usrp_p = _usrp_prims.usrp_configured_usrp_p

def usrp_open_cmd_interface(dev):
    return _usrp_prims.usrp_open_cmd_interface(dev)
usrp_open_cmd_interface = _usrp_prims.usrp_open_cmd_interface

def usrp_open_rx_interface(dev):
    return _usrp_prims.usrp_open_rx_interface(dev)
usrp_open_rx_interface = _usrp_prims.usrp_open_rx_interface

def usrp_open_tx_interface(dev):
    return _usrp_prims.usrp_open_tx_interface(dev)
usrp_open_tx_interface = _usrp_prims.usrp_open_tx_interface

def usrp_close_interface(udh):
    return _usrp_prims.usrp_close_interface(udh)
usrp_close_interface = _usrp_prims.usrp_close_interface

def usrp_load_firmware(udh, filename, force):
    return _usrp_prims.usrp_load_firmware(udh, filename, force)
usrp_load_firmware = _usrp_prims.usrp_load_firmware

def usrp_load_firmware_nth(nth, filename, force, ctx=None):
    return _usrp_prims.usrp_load_firmware_nth(nth, filename, force, ctx)
usrp_load_firmware_nth = _usrp_prims.usrp_load_firmware_nth

def usrp_load_fpga(udh, filename, force):
    return _usrp_prims.usrp_load_fpga(udh, filename, force)
usrp_load_fpga = _usrp_prims.usrp_load_fpga

def usrp_load_standard_bits(nth, force):
    return _usrp_prims.usrp_load_standard_bits(nth, force)
usrp_load_standard_bits = _usrp_prims.usrp_load_standard_bits

_usrp_prims.FR_TX_SAMPLE_RATE_DIV_swigconstant(_usrp_prims)
FR_TX_SAMPLE_RATE_DIV = _usrp_prims.FR_TX_SAMPLE_RATE_DIV

_usrp_prims.FR_RX_SAMPLE_RATE_DIV_swigconstant(_usrp_prims)
FR_RX_SAMPLE_RATE_DIV = _usrp_prims.FR_RX_SAMPLE_RATE_DIV

_usrp_prims.FR_MASTER_CTRL_swigconstant(_usrp_prims)
FR_MASTER_CTRL = _usrp_prims.FR_MASTER_CTRL

_usrp_prims.bmFR_MC_ENABLE_TX_swigconstant(_usrp_prims)
bmFR_MC_ENABLE_TX = _usrp_prims.bmFR_MC_ENABLE_TX

_usrp_prims.bmFR_MC_ENABLE_RX_swigconstant(_usrp_prims)
bmFR_MC_ENABLE_RX = _usrp_prims.bmFR_MC_ENABLE_RX

_usrp_prims.bmFR_MC_RESET_TX_swigconstant(_usrp_prims)
bmFR_MC_RESET_TX = _usrp_prims.bmFR_MC_RESET_TX

_usrp_prims.bmFR_MC_RESET_RX_swigconstant(_usrp_prims)
bmFR_MC_RESET_RX = _usrp_prims.bmFR_MC_RESET_RX

_usrp_prims.FR_OE_0_swigconstant(_usrp_prims)
FR_OE_0 = _usrp_prims.FR_OE_0

_usrp_prims.FR_OE_1_swigconstant(_usrp_prims)
FR_OE_1 = _usrp_prims.FR_OE_1

_usrp_prims.FR_OE_2_swigconstant(_usrp_prims)
FR_OE_2 = _usrp_prims.FR_OE_2

_usrp_prims.FR_OE_3_swigconstant(_usrp_prims)
FR_OE_3 = _usrp_prims.FR_OE_3

_usrp_prims.FR_IO_0_swigconstant(_usrp_prims)
FR_IO_0 = _usrp_prims.FR_IO_0

_usrp_prims.FR_IO_1_swigconstant(_usrp_prims)
FR_IO_1 = _usrp_prims.FR_IO_1

_usrp_prims.FR_IO_2_swigconstant(_usrp_prims)
FR_IO_2 = _usrp_prims.FR_IO_2

_usrp_prims.FR_IO_3_swigconstant(_usrp_prims)
FR_IO_3 = _usrp_prims.FR_IO_3

_usrp_prims.FR_MODE_swigconstant(_usrp_prims)
FR_MODE = _usrp_prims.FR_MODE

_usrp_prims.bmFR_MODE_NORMAL_swigconstant(_usrp_prims)
bmFR_MODE_NORMAL = _usrp_prims.bmFR_MODE_NORMAL

_usrp_prims.bmFR_MODE_LOOPBACK_swigconstant(_usrp_prims)
bmFR_MODE_LOOPBACK = _usrp_prims.bmFR_MODE_LOOPBACK

_usrp_prims.bmFR_MODE_RX_COUNTING_swigconstant(_usrp_prims)
bmFR_MODE_RX_COUNTING = _usrp_prims.bmFR_MODE_RX_COUNTING

_usrp_prims.bmFR_MODE_RX_COUNTING_32BIT_swigconstant(_usrp_prims)
bmFR_MODE_RX_COUNTING_32BIT = _usrp_prims.bmFR_MODE_RX_COUNTING_32BIT

_usrp_prims.FR_DEBUG_EN_swigconstant(_usrp_prims)
FR_DEBUG_EN = _usrp_prims.FR_DEBUG_EN

_usrp_prims.bmFR_DEBUG_EN_TX_A_swigconstant(_usrp_prims)
bmFR_DEBUG_EN_TX_A = _usrp_prims.bmFR_DEBUG_EN_TX_A

_usrp_prims.bmFR_DEBUG_EN_RX_A_swigconstant(_usrp_prims)
bmFR_DEBUG_EN_RX_A = _usrp_prims.bmFR_DEBUG_EN_RX_A

_usrp_prims.bmFR_DEBUG_EN_TX_B_swigconstant(_usrp_prims)
bmFR_DEBUG_EN_TX_B = _usrp_prims.bmFR_DEBUG_EN_TX_B

_usrp_prims.bmFR_DEBUG_EN_RX_B_swigconstant(_usrp_prims)
bmFR_DEBUG_EN_RX_B = _usrp_prims.bmFR_DEBUG_EN_RX_B

_usrp_prims.FR_DC_OFFSET_CL_EN_swigconstant(_usrp_prims)
FR_DC_OFFSET_CL_EN = _usrp_prims.FR_DC_OFFSET_CL_EN

_usrp_prims.FR_ADC_OFFSET_0_swigconstant(_usrp_prims)
FR_ADC_OFFSET_0 = _usrp_prims.FR_ADC_OFFSET_0

_usrp_prims.FR_ADC_OFFSET_1_swigconstant(_usrp_prims)
FR_ADC_OFFSET_1 = _usrp_prims.FR_ADC_OFFSET_1

_usrp_prims.FR_ADC_OFFSET_2_swigconstant(_usrp_prims)
FR_ADC_OFFSET_2 = _usrp_prims.FR_ADC_OFFSET_2

_usrp_prims.FR_ADC_OFFSET_3_swigconstant(_usrp_prims)
FR_ADC_OFFSET_3 = _usrp_prims.FR_ADC_OFFSET_3

_usrp_prims.FR_ATR_MASK_0_swigconstant(_usrp_prims)
FR_ATR_MASK_0 = _usrp_prims.FR_ATR_MASK_0

_usrp_prims.FR_ATR_TXVAL_0_swigconstant(_usrp_prims)
FR_ATR_TXVAL_0 = _usrp_prims.FR_ATR_TXVAL_0

_usrp_prims.FR_ATR_RXVAL_0_swigconstant(_usrp_prims)
FR_ATR_RXVAL_0 = _usrp_prims.FR_ATR_RXVAL_0

_usrp_prims.FR_ATR_MASK_1_swigconstant(_usrp_prims)
FR_ATR_MASK_1 = _usrp_prims.FR_ATR_MASK_1

_usrp_prims.FR_ATR_TXVAL_1_swigconstant(_usrp_prims)
FR_ATR_TXVAL_1 = _usrp_prims.FR_ATR_TXVAL_1

_usrp_prims.FR_ATR_RXVAL_1_swigconstant(_usrp_prims)
FR_ATR_RXVAL_1 = _usrp_prims.FR_ATR_RXVAL_1

_usrp_prims.FR_ATR_MASK_2_swigconstant(_usrp_prims)
FR_ATR_MASK_2 = _usrp_prims.FR_ATR_MASK_2

_usrp_prims.FR_ATR_TXVAL_2_swigconstant(_usrp_prims)
FR_ATR_TXVAL_2 = _usrp_prims.FR_ATR_TXVAL_2

_usrp_prims.FR_ATR_RXVAL_2_swigconstant(_usrp_prims)
FR_ATR_RXVAL_2 = _usrp_prims.FR_ATR_RXVAL_2

_usrp_prims.FR_ATR_MASK_3_swigconstant(_usrp_prims)
FR_ATR_MASK_3 = _usrp_prims.FR_ATR_MASK_3

_usrp_prims.FR_ATR_TXVAL_3_swigconstant(_usrp_prims)
FR_ATR_TXVAL_3 = _usrp_prims.FR_ATR_TXVAL_3

_usrp_prims.FR_ATR_RXVAL_3_swigconstant(_usrp_prims)
FR_ATR_RXVAL_3 = _usrp_prims.FR_ATR_RXVAL_3

_usrp_prims.FR_ATR_TX_DELAY_swigconstant(_usrp_prims)
FR_ATR_TX_DELAY = _usrp_prims.FR_ATR_TX_DELAY

_usrp_prims.FR_ATR_RX_DELAY_swigconstant(_usrp_prims)
FR_ATR_RX_DELAY = _usrp_prims.FR_ATR_RX_DELAY

_usrp_prims.FR_INTERP_RATE_swigconstant(_usrp_prims)
FR_INTERP_RATE = _usrp_prims.FR_INTERP_RATE

_usrp_prims.FR_DECIM_RATE_swigconstant(_usrp_prims)
FR_DECIM_RATE = _usrp_prims.FR_DECIM_RATE

_usrp_prims.FR_RX_FREQ_0_swigconstant(_usrp_prims)
FR_RX_FREQ_0 = _usrp_prims.FR_RX_FREQ_0

_usrp_prims.FR_RX_FREQ_1_swigconstant(_usrp_prims)
FR_RX_FREQ_1 = _usrp_prims.FR_RX_FREQ_1

_usrp_prims.FR_RX_FREQ_2_swigconstant(_usrp_prims)
FR_RX_FREQ_2 = _usrp_prims.FR_RX_FREQ_2

_usrp_prims.FR_RX_FREQ_3_swigconstant(_usrp_prims)
FR_RX_FREQ_3 = _usrp_prims.FR_RX_FREQ_3

_usrp_prims.FR_RX_MUX_swigconstant(_usrp_prims)
FR_RX_MUX = _usrp_prims.FR_RX_MUX

_usrp_prims.FR_TX_MUX_swigconstant(_usrp_prims)
FR_TX_MUX = _usrp_prims.FR_TX_MUX

_usrp_prims.FR_TX_A_REFCLK_swigconstant(_usrp_prims)
FR_TX_A_REFCLK = _usrp_prims.FR_TX_A_REFCLK

_usrp_prims.FR_RX_A_REFCLK_swigconstant(_usrp_prims)
FR_RX_A_REFCLK = _usrp_prims.FR_RX_A_REFCLK

_usrp_prims.FR_TX_B_REFCLK_swigconstant(_usrp_prims)
FR_TX_B_REFCLK = _usrp_prims.FR_TX_B_REFCLK

_usrp_prims.FR_RX_B_REFCLK_swigconstant(_usrp_prims)
FR_RX_B_REFCLK = _usrp_prims.FR_RX_B_REFCLK

_usrp_prims.bmFR_REFCLK_EN_swigconstant(_usrp_prims)
bmFR_REFCLK_EN = _usrp_prims.bmFR_REFCLK_EN

_usrp_prims.bmFR_REFCLK_DIVISOR_MASK_swigconstant(_usrp_prims)
bmFR_REFCLK_DIVISOR_MASK = _usrp_prims.bmFR_REFCLK_DIVISOR_MASK

_usrp_prims.FR_RX_PHASE_0_swigconstant(_usrp_prims)
FR_RX_PHASE_0 = _usrp_prims.FR_RX_PHASE_0

_usrp_prims.FR_RX_PHASE_1_swigconstant(_usrp_prims)
FR_RX_PHASE_1 = _usrp_prims.FR_RX_PHASE_1

_usrp_prims.FR_RX_PHASE_2_swigconstant(_usrp_prims)
FR_RX_PHASE_2 = _usrp_prims.FR_RX_PHASE_2

_usrp_prims.FR_RX_PHASE_3_swigconstant(_usrp_prims)
FR_RX_PHASE_3 = _usrp_prims.FR_RX_PHASE_3

_usrp_prims.FR_TX_FORMAT_swigconstant(_usrp_prims)
FR_TX_FORMAT = _usrp_prims.FR_TX_FORMAT

_usrp_prims.bmFR_TX_FORMAT_16_IQ_swigconstant(_usrp_prims)
bmFR_TX_FORMAT_16_IQ = _usrp_prims.bmFR_TX_FORMAT_16_IQ

_usrp_prims.FR_RX_FORMAT_swigconstant(_usrp_prims)
FR_RX_FORMAT = _usrp_prims.FR_RX_FORMAT

_usrp_prims.bmFR_RX_FORMAT_SHIFT_MASK_swigconstant(_usrp_prims)
bmFR_RX_FORMAT_SHIFT_MASK = _usrp_prims.bmFR_RX_FORMAT_SHIFT_MASK

_usrp_prims.bmFR_RX_FORMAT_SHIFT_SHIFT_swigconstant(_usrp_prims)
bmFR_RX_FORMAT_SHIFT_SHIFT = _usrp_prims.bmFR_RX_FORMAT_SHIFT_SHIFT

_usrp_prims.bmFR_RX_FORMAT_WIDTH_MASK_swigconstant(_usrp_prims)
bmFR_RX_FORMAT_WIDTH_MASK = _usrp_prims.bmFR_RX_FORMAT_WIDTH_MASK

_usrp_prims.bmFR_RX_FORMAT_WIDTH_SHIFT_swigconstant(_usrp_prims)
bmFR_RX_FORMAT_WIDTH_SHIFT = _usrp_prims.bmFR_RX_FORMAT_WIDTH_SHIFT

_usrp_prims.bmFR_RX_FORMAT_WANT_Q_swigconstant(_usrp_prims)
bmFR_RX_FORMAT_WANT_Q = _usrp_prims.bmFR_RX_FORMAT_WANT_Q

_usrp_prims.bmFR_RX_FORMAT_BYPASS_HB_swigconstant(_usrp_prims)
bmFR_RX_FORMAT_BYPASS_HB = _usrp_prims.bmFR_RX_FORMAT_BYPASS_HB

_usrp_prims.FR_USER_0_swigconstant(_usrp_prims)
FR_USER_0 = _usrp_prims.FR_USER_0

_usrp_prims.FR_USER_1_swigconstant(_usrp_prims)
FR_USER_1 = _usrp_prims.FR_USER_1

_usrp_prims.FR_USER_2_swigconstant(_usrp_prims)
FR_USER_2 = _usrp_prims.FR_USER_2

_usrp_prims.FR_USER_3_swigconstant(_usrp_prims)
FR_USER_3 = _usrp_prims.FR_USER_3

_usrp_prims.FR_USER_4_swigconstant(_usrp_prims)
FR_USER_4 = _usrp_prims.FR_USER_4

_usrp_prims.FR_USER_5_swigconstant(_usrp_prims)
FR_USER_5 = _usrp_prims.FR_USER_5

_usrp_prims.FR_USER_6_swigconstant(_usrp_prims)
FR_USER_6 = _usrp_prims.FR_USER_6

_usrp_prims.FR_USER_7_swigconstant(_usrp_prims)
FR_USER_7 = _usrp_prims.FR_USER_7

_usrp_prims.FR_USER_8_swigconstant(_usrp_prims)
FR_USER_8 = _usrp_prims.FR_USER_8

_usrp_prims.FR_USER_9_swigconstant(_usrp_prims)
FR_USER_9 = _usrp_prims.FR_USER_9

_usrp_prims.FR_USER_10_swigconstant(_usrp_prims)
FR_USER_10 = _usrp_prims.FR_USER_10

_usrp_prims.FR_USER_11_swigconstant(_usrp_prims)
FR_USER_11 = _usrp_prims.FR_USER_11

_usrp_prims.FR_USER_12_swigconstant(_usrp_prims)
FR_USER_12 = _usrp_prims.FR_USER_12

_usrp_prims.FR_USER_13_swigconstant(_usrp_prims)
FR_USER_13 = _usrp_prims.FR_USER_13

_usrp_prims.FR_USER_14_swigconstant(_usrp_prims)
FR_USER_14 = _usrp_prims.FR_USER_14

_usrp_prims.FR_USER_15_swigconstant(_usrp_prims)
FR_USER_15 = _usrp_prims.FR_USER_15

_usrp_prims.FR_USER_16_swigconstant(_usrp_prims)
FR_USER_16 = _usrp_prims.FR_USER_16

_usrp_prims.FR_USER_17_swigconstant(_usrp_prims)
FR_USER_17 = _usrp_prims.FR_USER_17

_usrp_prims.FR_USER_18_swigconstant(_usrp_prims)
FR_USER_18 = _usrp_prims.FR_USER_18

_usrp_prims.FR_USER_19_swigconstant(_usrp_prims)
FR_USER_19 = _usrp_prims.FR_USER_19

_usrp_prims.FR_USER_20_swigconstant(_usrp_prims)
FR_USER_20 = _usrp_prims.FR_USER_20

_usrp_prims.FR_USER_21_swigconstant(_usrp_prims)
FR_USER_21 = _usrp_prims.FR_USER_21

_usrp_prims.FR_USER_22_swigconstant(_usrp_prims)
FR_USER_22 = _usrp_prims.FR_USER_22

_usrp_prims.FR_USER_23_swigconstant(_usrp_prims)
FR_USER_23 = _usrp_prims.FR_USER_23

_usrp_prims.FR_USER_24_swigconstant(_usrp_prims)
FR_USER_24 = _usrp_prims.FR_USER_24

_usrp_prims.FR_USER_25_swigconstant(_usrp_prims)
FR_USER_25 = _usrp_prims.FR_USER_25

_usrp_prims.FR_USER_26_swigconstant(_usrp_prims)
FR_USER_26 = _usrp_prims.FR_USER_26

_usrp_prims.FR_USER_27_swigconstant(_usrp_prims)
FR_USER_27 = _usrp_prims.FR_USER_27

_usrp_prims.FR_USER_28_swigconstant(_usrp_prims)
FR_USER_28 = _usrp_prims.FR_USER_28

_usrp_prims.FR_USER_29_swigconstant(_usrp_prims)
FR_USER_29 = _usrp_prims.FR_USER_29

_usrp_prims.FR_USER_30_swigconstant(_usrp_prims)
FR_USER_30 = _usrp_prims.FR_USER_30

_usrp_prims.FR_USER_31_swigconstant(_usrp_prims)
FR_USER_31 = _usrp_prims.FR_USER_31

_usrp_prims.FR_RX_MASTER_SLAVE_swigconstant(_usrp_prims)
FR_RX_MASTER_SLAVE = _usrp_prims.FR_RX_MASTER_SLAVE

_usrp_prims.bitnoFR_RX_SYNC_swigconstant(_usrp_prims)
bitnoFR_RX_SYNC = _usrp_prims.bitnoFR_RX_SYNC

_usrp_prims.bitnoFR_RX_SYNC_MASTER_swigconstant(_usrp_prims)
bitnoFR_RX_SYNC_MASTER = _usrp_prims.bitnoFR_RX_SYNC_MASTER

_usrp_prims.bitnoFR_RX_SYNC_SLAVE_swigconstant(_usrp_prims)
bitnoFR_RX_SYNC_SLAVE = _usrp_prims.bitnoFR_RX_SYNC_SLAVE

_usrp_prims.bmFR_RX_SYNC_swigconstant(_usrp_prims)
bmFR_RX_SYNC = _usrp_prims.bmFR_RX_SYNC

_usrp_prims.bmFR_RX_SYNC_MASTER_swigconstant(_usrp_prims)
bmFR_RX_SYNC_MASTER = _usrp_prims.bmFR_RX_SYNC_MASTER

_usrp_prims.bmFR_RX_SYNC_SLAVE_swigconstant(_usrp_prims)
bmFR_RX_SYNC_SLAVE = _usrp_prims.bmFR_RX_SYNC_SLAVE

_usrp_prims.bitnoFR_RX_SYNC_INPUT_IOPIN_swigconstant(_usrp_prims)
bitnoFR_RX_SYNC_INPUT_IOPIN = _usrp_prims.bitnoFR_RX_SYNC_INPUT_IOPIN

_usrp_prims.bmFR_RX_SYNC_INPUT_IOPIN_swigconstant(_usrp_prims)
bmFR_RX_SYNC_INPUT_IOPIN = _usrp_prims.bmFR_RX_SYNC_INPUT_IOPIN

_usrp_prims.bitnoFR_RX_SYNC_OUTPUT_IOPIN_swigconstant(_usrp_prims)
bitnoFR_RX_SYNC_OUTPUT_IOPIN = _usrp_prims.bitnoFR_RX_SYNC_OUTPUT_IOPIN

_usrp_prims.bmFR_RX_SYNC_OUTPUT_IOPIN_swigconstant(_usrp_prims)
bmFR_RX_SYNC_OUTPUT_IOPIN = _usrp_prims.bmFR_RX_SYNC_OUTPUT_IOPIN

_usrp_prims.FR_RB_IO_RX_A_IO_TX_A_swigconstant(_usrp_prims)
FR_RB_IO_RX_A_IO_TX_A = _usrp_prims.FR_RB_IO_RX_A_IO_TX_A

_usrp_prims.FR_RB_IO_RX_B_IO_TX_B_swigconstant(_usrp_prims)
FR_RB_IO_RX_B_IO_TX_B = _usrp_prims.FR_RB_IO_RX_B_IO_TX_B

_usrp_prims.FR_RB_CAPS_swigconstant(_usrp_prims)
FR_RB_CAPS = _usrp_prims.FR_RB_CAPS

_usrp_prims.bmFR_RB_CAPS_NDDC_MASK_swigconstant(_usrp_prims)
bmFR_RB_CAPS_NDDC_MASK = _usrp_prims.bmFR_RB_CAPS_NDDC_MASK

_usrp_prims.bmFR_RB_CAPS_NDDC_SHIFT_swigconstant(_usrp_prims)
bmFR_RB_CAPS_NDDC_SHIFT = _usrp_prims.bmFR_RB_CAPS_NDDC_SHIFT

_usrp_prims.bmFR_RB_CAPS_RX_HAS_HALFBAND_swigconstant(_usrp_prims)
bmFR_RB_CAPS_RX_HAS_HALFBAND = _usrp_prims.bmFR_RB_CAPS_RX_HAS_HALFBAND

_usrp_prims.bmFR_RB_CAPS_NDUC_MASK_swigconstant(_usrp_prims)
bmFR_RB_CAPS_NDUC_MASK = _usrp_prims.bmFR_RB_CAPS_NDUC_MASK

_usrp_prims.bmFR_RB_CAPS_NDUC_SHIFT_swigconstant(_usrp_prims)
bmFR_RB_CAPS_NDUC_SHIFT = _usrp_prims.bmFR_RB_CAPS_NDUC_SHIFT

_usrp_prims.bmFR_RB_CAPS_TX_HAS_HALFBAND_swigconstant(_usrp_prims)
bmFR_RB_CAPS_TX_HAS_HALFBAND = _usrp_prims.bmFR_RB_CAPS_TX_HAS_HALFBAND

def usrp_write_fpga_reg(udh, reg, value):
    return _usrp_prims.usrp_write_fpga_reg(udh, reg, value)
usrp_write_fpga_reg = _usrp_prims.usrp_write_fpga_reg

def usrp_read_fpga_reg(udh, reg):
    return _usrp_prims.usrp_read_fpga_reg(udh, reg)
usrp_read_fpga_reg = _usrp_prims.usrp_read_fpga_reg

def usrp_set_fpga_reset(udh, on):
    return _usrp_prims.usrp_set_fpga_reset(udh, on)
usrp_set_fpga_reset = _usrp_prims.usrp_set_fpga_reset

def usrp_set_fpga_tx_enable(udh, on):
    return _usrp_prims.usrp_set_fpga_tx_enable(udh, on)
usrp_set_fpga_tx_enable = _usrp_prims.usrp_set_fpga_tx_enable

def usrp_set_fpga_rx_enable(udh, on):
    return _usrp_prims.usrp_set_fpga_rx_enable(udh, on)
usrp_set_fpga_rx_enable = _usrp_prims.usrp_set_fpga_rx_enable

def usrp_set_fpga_tx_reset(udh, on):
    return _usrp_prims.usrp_set_fpga_tx_reset(udh, on)
usrp_set_fpga_tx_reset = _usrp_prims.usrp_set_fpga_tx_reset

def usrp_set_fpga_rx_reset(udh, on):
    return _usrp_prims.usrp_set_fpga_rx_reset(udh, on)
usrp_set_fpga_rx_reset = _usrp_prims.usrp_set_fpga_rx_reset

def usrp_set_led(udh, which, on):
    return _usrp_prims.usrp_set_led(udh, which, on)
usrp_set_led = _usrp_prims.usrp_set_led

def usrp_check_rx_overrun(udh, overrun_p):
    return _usrp_prims.usrp_check_rx_overrun(udh, overrun_p)
usrp_check_rx_overrun = _usrp_prims.usrp_check_rx_overrun

def usrp_check_tx_underrun(udh, underrun_p):
    return _usrp_prims.usrp_check_tx_underrun(udh, underrun_p)
usrp_check_tx_underrun = _usrp_prims.usrp_check_tx_underrun

def usrp_i2c_write(udh, i2c_addr, buf, len):
    return _usrp_prims.usrp_i2c_write(udh, i2c_addr, buf, len)
usrp_i2c_write = _usrp_prims.usrp_i2c_write

def usrp_i2c_read(udh, i2c_addr, buf, len):
    return _usrp_prims.usrp_i2c_read(udh, i2c_addr, buf, len)
usrp_i2c_read = _usrp_prims.usrp_i2c_read

def usrp_spi_write(udh, optional_header, enables, format, buf, len):
    return _usrp_prims.usrp_spi_write(udh, optional_header, enables, format, buf, len)
usrp_spi_write = _usrp_prims.usrp_spi_write

def usrp_spi_read(udh, optional_header, enables, format, buf, len):
    return _usrp_prims.usrp_spi_read(udh, optional_header, enables, format, buf, len)
usrp_spi_read = _usrp_prims.usrp_spi_read

def usrp_9862_write(udh, which_codec, regno, value):
    return _usrp_prims.usrp_9862_write(udh, which_codec, regno, value)
usrp_9862_write = _usrp_prims.usrp_9862_write

def usrp_9862_read(udh, which_codec, reg):
    return _usrp_prims.usrp_9862_read(udh, which_codec, reg)
usrp_9862_read = _usrp_prims.usrp_9862_read

def usrp_eeprom_write(udh, i2c_addr, eeprom_offset, buf):
    return _usrp_prims.usrp_eeprom_write(udh, i2c_addr, eeprom_offset, buf)
usrp_eeprom_write = _usrp_prims.usrp_eeprom_write

def usrp_eeprom_read(udh, i2c_addr, eeprom_offset, len):
    return _usrp_prims.usrp_eeprom_read(udh, i2c_addr, eeprom_offset, len)
usrp_eeprom_read = _usrp_prims.usrp_eeprom_read

def usrp_write_aux_dac(uhd, slot, which_dac, value):
    return _usrp_prims.usrp_write_aux_dac(uhd, slot, which_dac, value)
usrp_write_aux_dac = _usrp_prims.usrp_write_aux_dac

def usrp_read_aux_adc(udh, slot, which_adc):
    return _usrp_prims.usrp_read_aux_adc(udh, slot, which_adc)
usrp_read_aux_adc = _usrp_prims.usrp_read_aux_adc

def usrp_serial_number(udh):
    return _usrp_prims.usrp_serial_number(udh)
usrp_serial_number = _usrp_prims.usrp_serial_number

def usrp_dbid_to_string(dbid):
    return _usrp_prims.usrp_dbid_to_string(dbid)
usrp_dbid_to_string = _usrp_prims.usrp_dbid_to_string


