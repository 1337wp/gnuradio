<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="classusrp__basic" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>usrp_basic</compoundname>
    <basecompoundref prot="private" virt="non-virtual">noncopyable</basecompoundref>
    <derivedcompoundref refid="classusrp__basic__rx" prot="public" virt="non-virtual">usrp_basic_rx</derivedcompoundref>
    <derivedcompoundref refid="classusrp__basic__tx" prot="public" virt="non-virtual">usrp_basic_tx</derivedcompoundref>
    <includes refid="usrp__basic_8h" local="no">usrp_basic.h</includes>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classusrp__basic_1aad5f6f17a9fde484c67e7dbdd0491f74" prot="protected" static="no" mutable="no">
        <type><ref refid="libusb__types_8h_1a7d5bb463830eeed919dfb59dc54eeb2b" kindref="member">libusb_device_handle</ref> *</type>
        <definition>libusb_device_handle* usrp_basic::d_udh</definition>
        <argsstring></argsstring>
        <name>d_udh</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/me/gnuradio-3.4.0/usrp/host/include/usrp/usrp_basic.h" line="69" column="1" bodyfile="/home/me/gnuradio-3.4.0/usrp/host/include/usrp/usrp_basic.h" bodystart="69" bodyend="-1"/>
        <referencedby refid="classusrp__basic_1a3814dc28edce07e3b5cb48bb3ebdf244" compoundref="usrp__basic_8cc" startline="439" endline="442">_read_9862</referencedby>
        <referencedby refid="classusrp__basic_1a8f92d2e9630ec614eedc61858756cce1" compoundref="usrp__basic_8cc" startline="242" endline="245">_read_aux_adc</referencedby>
        <referencedby refid="classusrp__basic_1a4fa26bd8164bd5782adf7fbe00b3d411" compoundref="usrp__basic_8cc" startline="411" endline="414">_read_fpga_reg</referencedby>
        <referencedby refid="classusrp__basic_1a9b54622fec87c2ed9c7808078931371f" compoundref="usrp__basic_8cc" startline="461" endline="472">_read_spi</referencedby>
        <referencedby refid="classusrp__basic_1a4585f9c7df7084a6acb29bd6d7950892" compoundref="usrp__basic_8cc" startline="476" endline="479">_set_led</referencedby>
        <referencedby refid="classusrp__basic_1a8a25444c83f59f7517d0ff687d2ff053" compoundref="usrp__basic_8cc" startline="426" endline="435">_write_9862</referencedby>
        <referencedby refid="classusrp__basic_1ab8870a35e0bdc63ee6655b5264a6d142" compoundref="usrp__basic_8cc" startline="236" endline="239">_write_aux_dac</referencedby>
        <referencedby refid="classusrp__basic_1ac5bdb9be69f27eb3a0530cba9536d0f4" compoundref="usrp__basic_8cc" startline="380" endline="391">_write_fpga_reg</referencedby>
        <referencedby refid="classusrp__basic_1a0c200dc2d39d68d7a77e92859c5228a0" compoundref="usrp__basic_8cc" startline="394" endline="407">_write_fpga_reg_masked</referencedby>
        <referencedby refid="classusrp__basic_1aaf100fafc406ef75faafcf3e38df7849" compoundref="usrp__basic_8cc" startline="454" endline="458">_write_spi</referencedby>
        <referencedby refid="classusrp__basic__rx_1a9edf0c0a2aeab58f7f12483a02dd14ee" compoundref="usrp__basic_8cc" startline="986" endline="1031">usrp_basic_rx::probe_rx_slots</referencedby>
        <referencedby refid="classusrp__basic__tx_1ac9e8934cb2136fd9c1f0bb2677991df0" compoundref="usrp__basic_8cc" startline="1393" endline="1438">usrp_basic_tx::probe_tx_slots</referencedby>
        <referencedby refid="classusrp__basic__rx_1ac339662f98db1292b636baf9f2db3d0a" compoundref="usrp__basic_8cc" startline="923" endline="958">usrp_basic_rx::read</referencedby>
        <referencedby refid="classusrp__basic_1aefe7a2f10626831304091babff21dc0d" compoundref="usrp__basic_8cc" startline="264" endline="275">read_eeprom</referencedby>
        <referencedby refid="classusrp__basic_1ab284caa2e15464f62aa80ad1f540ecc5" compoundref="usrp__basic_8cc" startline="284" endline="295">read_i2c</referencedby>
        <referencedby refid="classusrp__basic_1a70a71308412a67eaf825c13399faa078" compoundref="usrp__basic_8cc" startline="298" endline="301">serial_number</referencedby>
        <referencedby refid="classusrp__basic__rx_1a14fa02bdeea1bc11d5611b879dae5405" compoundref="usrp__basic_8cc" startline="961" endline="965">usrp_basic_rx::set_rx_enable</referencedby>
        <referencedby refid="classusrp__basic__tx_1a13148a03a6d6df2be95679bc2bbea896" compoundref="usrp__basic_8cc" startline="1367" endline="1372">usrp_basic_tx::set_tx_enable</referencedby>
        <referencedby refid="classusrp__basic_1ac72f072eb9220e798019b60b3fe48af6" compoundref="usrp__basic_8cc" startline="102" endline="155">usrp_basic</referencedby>
        <referencedby refid="classusrp__basic__rx_1acbda9587edf161df5aa2c504e42096ff" compoundref="usrp__basic_8cc" startline="765" endline="824">usrp_basic_rx::usrp_basic_rx</referencedby>
        <referencedby refid="classusrp__basic__tx_1ab8bb942f1c956624553ac18b0a838bd6" compoundref="usrp__basic_8cc" startline="1171" endline="1227">usrp_basic_tx::usrp_basic_tx</referencedby>
        <referencedby refid="classusrp__standard__tx_1ab3ebe65a0203867b6c71edcf2d4ffb88" compoundref="usrp__standard_8cc" startline="812" endline="846">usrp_standard_tx::usrp_standard_tx</referencedby>
        <referencedby refid="classusrp__basic__tx_1a0dd15899a23869336f455fa948b725af" compoundref="usrp__basic_8cc" startline="1323" endline="1358">usrp_basic_tx::write</referencedby>
        <referencedby refid="classusrp__basic_1a3900d37e951b83c938669f5fa0255866" compoundref="usrp__basic_8cc" startline="258" endline="261">write_eeprom</referencedby>
        <referencedby refid="classusrp__basic_1a664e5aa3a3fb8a4c50b752906fcb79a0" compoundref="usrp__basic_8cc" startline="278" endline="281">write_i2c</referencedby>
        <referencedby refid="classusrp__basic_1a01313a5f1c8e0eea1a1ff26388e25f78" compoundref="usrp__basic_8cc" startline="157" endline="165">~usrp_basic</referencedby>
        <referencedby refid="classusrp__basic__rx_1ae50eef2481209ecaa7eb73bfd0cb513d" compoundref="usrp__basic_8cc" startline="830" endline="845">usrp_basic_rx::~usrp_basic_rx</referencedby>
        <referencedby refid="classusrp__basic__tx_1a1742407fda891ebf3eea8f297310e455" compoundref="usrp__basic_8cc" startline="1237" endline="1248">usrp_basic_tx::~usrp_basic_tx</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classusrp__basic_1a747a3cfca6d00b8d2960b4692ae36bc2" prot="protected" static="no" mutable="no">
        <type>struct libusb_context *</type>
        <definition>struct libusb_context* usrp_basic::d_ctx</definition>
        <argsstring></argsstring>
        <name>d_ctx</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/me/gnuradio-3.4.0/usrp/host/include/usrp/usrp_basic.h" line="70" column="1" bodyfile="/home/me/gnuradio-3.4.0/usrp/host/include/usrp/usrp_basic.h" bodystart="70" bodyend="-1"/>
        <referencedby refid="classusrp__basic_1ac72f072eb9220e798019b60b3fe48af6" compoundref="usrp__basic_8cc" startline="102" endline="155">usrp_basic</referencedby>
        <referencedby refid="classusrp__basic__rx_1acbda9587edf161df5aa2c504e42096ff" compoundref="usrp__basic_8cc" startline="765" endline="824">usrp_basic_rx::usrp_basic_rx</referencedby>
        <referencedby refid="classusrp__basic__tx_1ab8bb942f1c956624553ac18b0a838bd6" compoundref="usrp__basic_8cc" startline="1171" endline="1227">usrp_basic_tx::usrp_basic_tx</referencedby>
        <referencedby refid="classusrp__basic_1a01313a5f1c8e0eea1a1ff26388e25f78" compoundref="usrp__basic_8cc" startline="157" endline="165">~usrp_basic</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classusrp__basic_1a4e5297f0010c8f39cfe4fff838b113a4" prot="protected" static="no" mutable="no">
        <type>int</type>
        <definition>int usrp_basic::d_usb_data_rate</definition>
        <argsstring></argsstring>
        <name>d_usb_data_rate</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/me/gnuradio-3.4.0/usrp/host/include/usrp/usrp_basic.h" line="71" column="1" bodyfile="/home/me/gnuradio-3.4.0/usrp/host/include/usrp/usrp_basic.h" bodystart="71" bodyend="-1"/>
        <referencedby refid="classusrp__basic_1a77535750946e7d8443a76941a9611cae" compoundref="usrp__basic_8cc" startline="229" endline="233">set_usb_data_rate</referencedby>
        <referencedby refid="classusrp__basic_1a530c23ff633c630530ec491c368a755d" compoundref="usrp__basic_8h" startline="197" endline="197">usb_data_rate</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classusrp__basic_1a1d6b6839b9ba385d93684c3497c3fb16" prot="protected" static="no" mutable="no">
        <type>int</type>
        <definition>int usrp_basic::d_bytes_per_poll</definition>
        <argsstring></argsstring>
        <name>d_bytes_per_poll</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/me/gnuradio-3.4.0/usrp/host/include/usrp/usrp_basic.h" line="72" column="1" bodyfile="/home/me/gnuradio-3.4.0/usrp/host/include/usrp/usrp_basic.h" bodystart="72" bodyend="-1"/>
        <referencedby refid="classusrp__basic__rx_1ac339662f98db1292b636baf9f2db3d0a" compoundref="usrp__basic_8cc" startline="923" endline="958">usrp_basic_rx::read</referencedby>
        <referencedby refid="classusrp__basic_1a77535750946e7d8443a76941a9611cae" compoundref="usrp__basic_8cc" startline="229" endline="233">set_usb_data_rate</referencedby>
        <referencedby refid="classusrp__basic__tx_1a0dd15899a23869336f455fa948b725af" compoundref="usrp__basic_8cc" startline="1323" endline="1358">usrp_basic_tx::write</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classusrp__basic_1a6d0fecbe64f35fef20293c27dc33a0b0" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool usrp_basic::d_verbose</definition>
        <argsstring></argsstring>
        <name>d_verbose</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/me/gnuradio-3.4.0/usrp/host/include/usrp/usrp_basic.h" line="73" column="1" bodyfile="/home/me/gnuradio-3.4.0/usrp/host/include/usrp/usrp_basic.h" bodystart="73" bodyend="-1"/>
        <referencedby refid="classusrp__basic_1a8a25444c83f59f7517d0ff687d2ff053" compoundref="usrp__basic_8cc" startline="426" endline="435">_write_9862</referencedby>
        <referencedby refid="classusrp__basic_1ac5bdb9be69f27eb3a0530cba9536d0f4" compoundref="usrp__basic_8cc" startline="380" endline="391">_write_fpga_reg</referencedby>
        <referencedby refid="classusrp__basic_1a0c200dc2d39d68d7a77e92859c5228a0" compoundref="usrp__basic_8cc" startline="394" endline="407">_write_fpga_reg_masked</referencedby>
        <referencedby refid="classusrp__standard__tx_1a24a7b471679b8e2485bfff5cce7adb96" compoundref="usrp__standard_8cc" startline="982" endline="994">usrp_standard_tx::determine_tx_mux_value</referencedby>
        <referencedby refid="classusrp__standard__rx_1a4f3584afcc01962580cf420015d93cda" compoundref="usrp__standard_8cc" startline="650" endline="661">usrp_standard_rx::set_rx_freq</referencedby>
        <referencedby refid="classusrp__standard__tx_1ae75deb35fef49d5e647b2141443d7106" compoundref="usrp__standard_8cc" startline="1018" endline="1099">usrp_standard_tx::set_tx_freq</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classusrp__basic_1afa81d2ee842dd6eef04c422276f52d1d" prot="protected" static="no" mutable="no">
        <type>long</type>
        <definition>long usrp_basic::d_fpga_master_clock_freq</definition>
        <argsstring></argsstring>
        <name>d_fpga_master_clock_freq</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/me/gnuradio-3.4.0/usrp/host/include/usrp/usrp_basic.h" line="74" column="1" bodyfile="/home/me/gnuradio-3.4.0/usrp/host/include/usrp/usrp_basic.h" bodystart="74" bodyend="-1"/>
        <referencedby refid="classusrp__basic_1a244d4aa01bb6a054cd5bd0998ce2a09a" compoundref="usrp__basic_8h" startline="183" endline="183">fpga_master_clock_freq</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classusrp__basic_1af3d08c8bcdd0ed116e76ffa5449004f2" prot="protected" static="no" mutable="no">
        <type>unsigned int</type>
        <definition>unsigned int usrp_basic::d_fpga_shadows[MAX_REGS]</definition>
        <argsstring>[MAX_REGS]</argsstring>
        <name>d_fpga_shadows</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/me/gnuradio-3.4.0/usrp/host/include/usrp/usrp_basic.h" line="77" column="1" bodyfile="/home/me/gnuradio-3.4.0/usrp/host/include/usrp/usrp_basic.h" bodystart="77" bodyend="-1"/>
        <referencedby refid="classusrp__basic_1ac5bdb9be69f27eb3a0530cba9536d0f4" compoundref="usrp__basic_8cc" startline="380" endline="391">_write_fpga_reg</referencedby>
        <referencedby refid="classusrp__basic_1a0c200dc2d39d68d7a77e92859c5228a0" compoundref="usrp__basic_8cc" startline="394" endline="407">_write_fpga_reg_masked</referencedby>
        <referencedby refid="classusrp__standard__rx_1a138542206516dba75c5c90af984dcf84" compoundref="usrp__standard_8cc" startline="724" endline="727">usrp_standard_rx::format</referencedby>
        <referencedby refid="classusrp__basic_1af20cc324fca8d089226d5a6dfc3d3668" compoundref="usrp__basic_8cc" startline="371" endline="375">set_dc_offset_cl_enable</referencedby>
        <referencedby refid="classusrp__basic_1ac72f072eb9220e798019b60b3fe48af6" compoundref="usrp__basic_8cc" startline="102" endline="155">usrp_basic</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classusrp__basic_1a686ea66e3f43c9ab6df60bd80f41ac3b" prot="protected" static="no" mutable="no">
        <type>int</type>
        <definition>int usrp_basic::d_dbid[2]</definition>
        <argsstring>[2]</argsstring>
        <name>d_dbid</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/me/gnuradio-3.4.0/usrp/host/include/usrp/usrp_basic.h" line="79" column="1" bodyfile="/home/me/gnuradio-3.4.0/usrp/host/include/usrp/usrp_basic.h" bodystart="79" bodyend="-1"/>
        <referencedby refid="classusrp__basic_1a9d4d1ef184ad622c7f84a6f940614b9b" compoundref="usrp__basic_8cc" startline="179" endline="186">init_db</referencedby>
        <referencedby refid="classusrp__basic__rx_1a9edf0c0a2aeab58f7f12483a02dd14ee" compoundref="usrp__basic_8cc" startline="986" endline="1031">usrp_basic_rx::probe_rx_slots</referencedby>
        <referencedby refid="classusrp__basic__tx_1ac9e8934cb2136fd9c1f0bb2677991df0" compoundref="usrp__basic_8cc" startline="1393" endline="1438">usrp_basic_tx::probe_tx_slots</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classusrp__basic_1aa45df525ed16ee0c885a4972ac7908b4" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; std::vector&lt; <ref refid="db__base_8h_1a61ead10400f658a22128a321e14ae0ac" kindref="member">db_base_sptr</ref> &gt; &gt;</type>
        <definition>std::vector&lt; std::vector&lt;db_base_sptr&gt; &gt; usrp_basic::d_db</definition>
        <argsstring></argsstring>
        <name>d_db</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Shared pointers to subclasses of <ref refid="classdb__base" kindref="compound">db_base</ref>.</para><para>The outer vector is of length 2 (0 = side A, 1 = side B). The inner vectors are of length 1, 2 or 3 depending on the number of subdevices implemented by the daugherboard. At this time, only the Basic Rx and LF Rx implement more than 1 subdevice. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/me/gnuradio-3.4.0/usrp/host/include/usrp/usrp_basic.h" line="89" column="1" bodyfile="/home/me/gnuradio-3.4.0/usrp/host/include/usrp/usrp_basic.h" bodystart="89" bodyend="-1"/>
        <referencedby refid="classusrp__basic_1a9e3dfe1821b5aa2438a014fd7ca579f4" compoundref="usrp__basic_8cc" startline="189" endline="193">db</referencedby>
        <referencedby refid="classusrp__basic_1a9d4d1ef184ad622c7f84a6f940614b9b" compoundref="usrp__basic_8cc" startline="179" endline="186">init_db</referencedby>
        <referencedby refid="classusrp__basic_1a61af504df443a9d846ecf909871f1481" compoundref="usrp__basic_8cc" startline="196" endline="205">is_valid</referencedby>
        <referencedby refid="classusrp__basic_1a648de1479d7632b59bf2732f231ddbe0" compoundref="usrp__basic_8cc" startline="208" endline="214">selected_subdev</referencedby>
        <referencedby refid="classusrp__basic_1afaae41796f1468062d4ad237322baf9e" compoundref="usrp__basic_8cc" startline="168" endline="176">shutdown_daughterboards</referencedby>
        <referencedby refid="classusrp__basic_1a01313a5f1c8e0eea1a1ff26388e25f78" compoundref="usrp__basic_8cc" startline="157" endline="165">~usrp_basic</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-static-attrib">
      <memberdef kind="variable" id="classusrp__basic_1ae9277f41b745b1c96c422804fafd058a" prot="protected" static="yes" mutable="no">
        <type>const int</type>
        <definition>const int usrp_basic::MAX_REGS</definition>
        <argsstring></argsstring>
        <name>MAX_REGS</name>
        <initializer>= 128</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/me/gnuradio-3.4.0/usrp/host/include/usrp/usrp_basic.h" line="76" column="1" bodyfile="/home/me/gnuradio-3.4.0/usrp/host/include/usrp/usrp_basic.h" bodystart="76" bodyend="-1"/>
        <referencedby refid="classusrp__basic_1ac5bdb9be69f27eb3a0530cba9536d0f4" compoundref="usrp__basic_8cc" startline="380" endline="391">_write_fpga_reg</referencedby>
        <referencedby refid="classusrp__basic_1a0c200dc2d39d68d7a77e92859c5228a0" compoundref="usrp__basic_8cc" startline="394" endline="407">_write_fpga_reg_masked</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="classusrp__basic_1a364d3e56a0749a90cc5de2ac378e6863" prot="public" static="yes" mutable="no">
        <type>const int</type>
        <definition>const int usrp_basic::READ_FAILED</definition>
        <argsstring></argsstring>
        <name>READ_FAILED</name>
        <initializer>= -99999</initializer>
        <briefdescription>
<para>magic value used on alternate register read interfaces </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/me/gnuradio-3.4.0/usrp/host/include/usrp/usrp_basic.h" line="202" column="1" bodyfile="/home/me/gnuradio-3.4.0/usrp/host/include/usrp/usrp_basic.h" bodystart="202" bodyend="-1"/>
        <referencedby refid="classusrp__basic_1ad28278c9ff7a33b3a151c561ab037b9f" compoundref="usrp__basic_8cc" startline="445" endline="451">_read_9862</referencedby>
        <referencedby refid="classusrp__basic_1a2aadef5c105459794b22a135730e7480" compoundref="usrp__basic_8cc" startline="248" endline="255">_read_aux_adc</referencedby>
        <referencedby refid="classusrp__basic_1abf1f167a1c96dd0ed4589afc6c9fad6c" compoundref="usrp__basic_8cc" startline="417" endline="423">_read_fpga_reg</referencedby>
        <referencedby refid="classusrp__basic_1ac25d56e74572309a87397f0fce1a102b" compoundref="usrp__basic_8cc" startline="585" endline="609">common_pga</referencedby>
        <referencedby refid="classusrp__basic_1a217f6865ef04d1111c2c1d3e7b4260f5" compoundref="usrp__basic_8cc" startline="681" endline="687">common_read_io</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classusrp__basic_1afaae41796f1468062d4ad237322baf9e" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void usrp_basic::shutdown_daughterboards</definition>
        <argsstring>()</argsstring>
        <name>shutdown_daughterboards</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/me/gnuradio-3.4.0/usrp/host/include/usrp/usrp_basic.h" line="66" column="1" bodyfile="/home/me/gnuradio-3.4.0/usrp/host/lib/usrp_basic.cc" bodystart="168" bodyend="176"/>
        <references refid="classusrp__basic_1aa45df525ed16ee0c885a4972ac7908b4" compoundref="usrp__basic_8h" startline="89">d_db</references>
        <referencedby refid="classusrp__basic__rx_1ae50eef2481209ecaa7eb73bfd0cb513d" compoundref="usrp__basic_8cc" startline="830" endline="845">usrp_basic_rx::~usrp_basic_rx</referencedby>
        <referencedby refid="classusrp__basic__tx_1a1742407fda891ebf3eea8f297310e455" compoundref="usrp__basic_8cc" startline="1237" endline="1248">usrp_basic_tx::~usrp_basic_tx</referencedby>
      </memberdef>
      <memberdef kind="function" id="classusrp__basic_1a9d4d1ef184ad622c7f84a6f940614b9b" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void usrp_basic::init_db</definition>
        <argsstring>(usrp_basic_sptr u)</argsstring>
        <name>init_db</name>
        <param>
          <type><ref refid="db__base_8h_1a4847231f7e2f85d0a0f4a5ed78b25ee7" kindref="member">usrp_basic_sptr</ref></type>
          <declname>u</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/me/gnuradio-3.4.0/usrp/host/include/usrp/usrp_basic.h" line="92" column="1" bodyfile="/home/me/gnuradio-3.4.0/usrp/host/lib/usrp_basic.cc" bodystart="179" bodyend="186"/>
        <references refid="classusrp__basic_1aa45df525ed16ee0c885a4972ac7908b4" compoundref="usrp__basic_8h" startline="89">d_db</references>
        <references refid="classusrp__basic_1a686ea66e3f43c9ab6df60bd80f41ac3b" compoundref="usrp__basic_8h" startline="79">d_dbid</references>
        <references refid="db__boards_8cc_1a907da1c1e1143e5c2fe68ec8e5704faa" compoundref="db__boards_8cc" startline="43" endline="244">instantiate_dbs</references>
      </memberdef>
      <memberdef kind="function" id="classusrp__basic_1ac72f072eb9220e798019b60b3fe48af6" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>usrp_basic::usrp_basic</definition>
        <argsstring>(int which_board, libusb_device_handle *open_interface(libusb_device *dev), const std::string fpga_filename=&quot;&quot;, const std::string firmware_filename=&quot;&quot;)</argsstring>
        <name>usrp_basic</name>
        <param>
          <type>int</type>
          <declname>which_board</declname>
        </param>
        <param>
          <type><ref refid="libusb__types_8h_1a7d5bb463830eeed919dfb59dc54eeb2b" kindref="member">libusb_device_handle</ref> *</type>
          <declname>open_interface</declname>
          <array>libusb_device *dev</array>
        </param>
        <param>
          <type>const std::string</type>
          <declname>fpga_filename</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <param>
          <type>const std::string</type>
          <declname>firmware_filename</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/me/gnuradio-3.4.0/usrp/host/include/usrp/usrp_basic.h" line="95" column="1" bodyfile="/home/me/gnuradio-3.4.0/usrp/host/lib/usrp_basic.cc" bodystart="102" bodyend="155"/>
        <references refid="classusrp__basic_1ac5bdb9be69f27eb3a0530cba9536d0f4" compoundref="usrp__basic_8cc" startline="380" endline="391">_write_fpga_reg</references>
        <references refid="classusrp__basic_1a747a3cfca6d00b8d2960b4692ae36bc2" compoundref="usrp__basic_8h" startline="70">d_ctx</references>
        <references refid="classusrp__basic_1af3d08c8bcdd0ed116e76ffa5449004f2" compoundref="usrp__basic_8h" startline="77">d_fpga_shadows</references>
        <references refid="classusrp__basic_1aad5f6f17a9fde484c67e7dbdd0491f74" compoundref="usrp__basic_8h" startline="69">d_udh</references>
        <references refid="usrp__prims_8h_1a4ffbe7a8f1f34c079f4e48dd63d5332b" compoundref="usrp__prims__common_8cc" startline="926" endline="935">usrp_9862_write_many_all</references>
        <references refid="usrp__prims_8h_1a91bc9c618e75323cfb96673a135269a9" compoundref="usrp__prims__libusb0_8cc" startline="126" endline="148">usrp_find_device</references>
        <references refid="usrp__prims_8h_1a8928959b2e2d3ab52d7b6ad115baaff3" compoundref="usrp__prims__common_8cc" startline="111" endline="115">usrp_hw_rev</references>
        <references refid="usrp__prims_8h_1afad83bab2ee742d3f69298e4b4ff87e0" compoundref="usrp__prims__common_8cc" startline="734" endline="794">usrp_load_standard_bits</references>
        <references refid="usrp__prims_8h_1a7db6e7c1e881f53aca6f36d07c340d12" compoundref="usrp__prims__libusb0_8cc" startline="96" endline="106">usrp_one_time_init</references>
        <references refid="usrp__prims_8h_1a3f3e8476e3c78ba61820edde38477ac6" compoundref="usrp__prims__common_8cc" startline="128" endline="133">usrp_usrp_p</references>
      </memberdef>
      <memberdef kind="function" id="classusrp__basic_1a77535750946e7d8443a76941a9611cae" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void usrp_basic::set_usb_data_rate</definition>
        <argsstring>(int usb_data_rate)</argsstring>
        <name>set_usb_data_rate</name>
        <param>
          <type>int</type>
          <declname>usb_data_rate</declname>
        </param>
        <briefdescription>
<para>advise <ref refid="classusrp__basic" kindref="compound">usrp_basic</ref> of usb data rate (bytes/sec) </para>        </briefdescription>
        <detaileddescription>
<para>N.B., this doesn&apos;t tweak any hardware. Derived classes should call this to inform us of the data rate whenever it&apos;s first set or if it changes.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>usb_data_rate</parametername>
</parameternamelist>
<parameterdescription>
<para>bytes/sec </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/me/gnuradio-3.4.0/usrp/host/include/usrp/usrp_basic.h" line="109" column="1" bodyfile="/home/me/gnuradio-3.4.0/usrp/host/lib/usrp_basic.cc" bodystart="229" bodyend="233"/>
        <references refid="classusrp__basic_1a1d6b6839b9ba385d93684c3497c3fb16" compoundref="usrp__basic_8h" startline="72">d_bytes_per_poll</references>
        <references refid="classusrp__basic_1a4e5297f0010c8f39cfe4fff838b113a4" compoundref="usrp__basic_8h" startline="71">d_usb_data_rate</references>
        <references refid="classusrp__basic_1a530c23ff633c630530ec491c368a755d" compoundref="usrp__basic_8h" startline="197" endline="197">usb_data_rate</references>
        <referencedby refid="classusrp__standard__rx_1af75a82a32f50117b4acfe518b0c31e89" compoundref="usrp__standard_8cc" startline="404" endline="428">usrp_standard_rx::set_decim_rate</referencedby>
        <referencedby refid="classusrp__standard__tx_1a7b092ae2811927291ffc3491e4461282" compoundref="usrp__standard_8cc" startline="897" endline="918">usrp_standard_tx::set_interp_rate</referencedby>
      </memberdef>
      <memberdef kind="function" id="classusrp__basic_1ab8870a35e0bdc63ee6655b5264a6d142" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool usrp_basic::_write_aux_dac</definition>
        <argsstring>(int slot, int which_dac, int value)</argsstring>
        <name>_write_aux_dac</name>
        <param>
          <type>int</type>
          <declname>slot</declname>
        </param>
        <param>
          <type>int</type>
          <declname>which_dac</declname>
        </param>
        <param>
          <type>int</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Write auxiliary digital to analog converter. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>slot</parametername>
</parameternamelist>
<parameterdescription>
<para>Which Tx or Rx slot to write. N.B., SLOT_TX_A and SLOT_RX_A share the same AUX DAC&apos;s. SLOT_TX_B and SLOT_RX_B share the same AUX DAC&apos;s. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>which_dac</parametername>
</parameternamelist>
<parameterdescription>
<para>[0,3] RX slots must use only 0 and 1. TX slots must use only 2 and 3. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>[0,4095] </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true iff successful </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/me/gnuradio-3.4.0/usrp/host/include/usrp/usrp_basic.h" line="121" column="1" bodyfile="/home/me/gnuradio-3.4.0/usrp/host/lib/usrp_basic.cc" bodystart="236" bodyend="239"/>
        <references refid="classusrp__basic_1aad5f6f17a9fde484c67e7dbdd0491f74" compoundref="usrp__basic_8h" startline="69">d_udh</references>
        <references refid="usrp__prims_8h_1a5047027d21b7c1ca49b0decb855282ce" compoundref="usrp__prims__common_8cc" startline="1047" endline="1074">usrp_write_aux_dac</references>
        <referencedby refid="classusrp__basic_1ac7354a9c4f7e961cb1b541c970a8d009" compoundref="usrp__basic_8cc" startline="730" endline="733">common_write_aux_dac</referencedby>
      </memberdef>
      <memberdef kind="function" id="classusrp__basic_1a8f92d2e9630ec614eedc61858756cce1" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool usrp_basic::_read_aux_adc</definition>
        <argsstring>(int slot, int which_adc, int *value)</argsstring>
        <name>_read_aux_adc</name>
        <param>
          <type>int</type>
          <declname>slot</declname>
        </param>
        <param>
          <type>int</type>
          <declname>which_adc</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Read auxiliary analog to digital converter. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>slot</parametername>
</parameternamelist>
<parameterdescription>
<para>2-bit slot number. E.g., SLOT_TX_A </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>which_adc</parametername>
</parameternamelist>
<parameterdescription>
<para>[0,1] </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>return 12-bit value [0,4095] </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true iff successful </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/me/gnuradio-3.4.0/usrp/host/include/usrp/usrp_basic.h" line="131" column="1" bodyfile="/home/me/gnuradio-3.4.0/usrp/host/lib/usrp_basic.cc" bodystart="242" bodyend="245"/>
        <references refid="classusrp__basic_1aad5f6f17a9fde484c67e7dbdd0491f74" compoundref="usrp__basic_8h" startline="69">d_udh</references>
        <references refid="usrp__prims_8h_1a0c6f8c0f7a46bc4fe82029657d6f9be6" compoundref="usrp__prims__common_8cc" startline="1078" endline="1131">usrp_read_aux_adc</references>
        <referencedby refid="classusrp__basic_1a2aadef5c105459794b22a135730e7480" compoundref="usrp__basic_8cc" startline="248" endline="255">_read_aux_adc</referencedby>
        <referencedby refid="classusrp__basic_1a37bd03473a98cf3776f1988914c1a5ce" compoundref="usrp__basic_8cc" startline="736" endline="739">common_read_aux_adc</referencedby>
      </memberdef>
      <memberdef kind="function" id="classusrp__basic_1a2aadef5c105459794b22a135730e7480" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int usrp_basic::_read_aux_adc</definition>
        <argsstring>(int slot, int which_adc)</argsstring>
        <name>_read_aux_adc</name>
        <param>
          <type>int</type>
          <declname>slot</declname>
        </param>
        <param>
          <type>int</type>
          <declname>which_adc</declname>
        </param>
        <briefdescription>
<para>Read auxiliary analog to digital converter. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>slot</parametername>
</parameternamelist>
<parameterdescription>
<para>2-bit slot number. E.g., SLOT_TX_A </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>which_adc</parametername>
</parameternamelist>
<parameterdescription>
<para>[0,1] </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>value in the range [0,4095] if successful, else READ_FAILED. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/me/gnuradio-3.4.0/usrp/host/include/usrp/usrp_basic.h" line="140" column="1" bodyfile="/home/me/gnuradio-3.4.0/usrp/host/lib/usrp_basic.cc" bodystart="248" bodyend="255"/>
        <references refid="classusrp__basic_1a8f92d2e9630ec614eedc61858756cce1" compoundref="usrp__basic_8cc" startline="242" endline="245">_read_aux_adc</references>
        <references refid="classusrp__basic_1a364d3e56a0749a90cc5de2ac378e6863" compoundref="usrp__basic_8h" startline="202">READ_FAILED</references>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classusrp__basic_1a01313a5f1c8e0eea1a1ff26388e25f78" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>usrp_basic::~usrp_basic</definition>
        <argsstring>()</argsstring>
        <name>~usrp_basic</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/me/gnuradio-3.4.0/usrp/host/include/usrp/usrp_basic.h" line="144" column="1" bodyfile="/home/me/gnuradio-3.4.0/usrp/host/lib/usrp_basic.cc" bodystart="157" bodyend="165"/>
        <references refid="classusrp__basic_1a747a3cfca6d00b8d2960b4692ae36bc2" compoundref="usrp__basic_8h" startline="70">d_ctx</references>
        <references refid="classusrp__basic_1aa45df525ed16ee0c885a4972ac7908b4" compoundref="usrp__basic_8h" startline="89">d_db</references>
        <references refid="classusrp__basic_1aad5f6f17a9fde484c67e7dbdd0491f74" compoundref="usrp__basic_8h" startline="69">d_udh</references>
        <references refid="usrp__prims_8h_1a5b0fcfee6e1328858c7927d386d0c92a" compoundref="usrp__prims__libusb0_8cc" startline="200" endline="204">usrp_close_interface</references>
        <references refid="usrp__prims_8h_1a7c4d28881ccd609e2dc48e76aaacf26f" compoundref="usrp__prims__libusb0_8cc" startline="109" endline="112">usrp_deinit</references>
      </memberdef>
      <memberdef kind="function" id="classusrp__basic_1a8eb1f58ca819437d7f43ad87574bd6da" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; std::vector&lt; <ref refid="db__base_8h_1a61ead10400f658a22128a321e14ae0ac" kindref="member">db_base_sptr</ref> &gt; &gt;</type>
        <definition>std::vector&lt;std::vector&lt;db_base_sptr&gt; &gt; usrp_basic::db</definition>
        <argsstring>() const </argsstring>
        <name>db</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return a vector of vectors that contain shared pointers to the daughterboard instance(s) associated with the specified side.</para><para>It is an error to use the returned objects after the <ref refid="classusrp__basic" kindref="compound">usrp_basic</ref> object has been destroyed. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/me/gnuradio-3.4.0/usrp/host/include/usrp/usrp_basic.h" line="154" column="1" bodyfile="/home/me/gnuradio-3.4.0/usrp/host/include/usrp/usrp_basic.h" bodystart="154" bodyend="154"/>
        <references refid="classusrp__basic_1aa45df525ed16ee0c885a4972ac7908b4" compoundref="usrp__basic_8h" startline="89">d_db</references>
        <references refid="classusrp__basic_1a61af504df443a9d846ecf909871f1481" compoundref="usrp__basic_8cc" startline="196" endline="205">is_valid</references>
        <references refid="classusrp__basic_1a648de1479d7632b59bf2732f231ddbe0" compoundref="usrp__basic_8cc" startline="208" endline="214">selected_subdev</references>
        <referencedby refid="classusrp__standard__rx_1a1b1d513ec9017203d3d2eede645093d5" compoundref="usrp__standard_8cc" startline="539" endline="633">usrp_standard_rx::determine_rx_mux_value</referencedby>
        <referencedby refid="classusrp__standard__tx_1a386da4e76f7b2393563e48555c613a96" compoundref="usrp__standard_8cc" startline="951" endline="979">usrp_standard_tx::determine_tx_mux_value</referencedby>
      </memberdef>
      <memberdef kind="function" id="classusrp__basic_1a9e3dfe1821b5aa2438a014fd7ca579f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="db__base_8h_1a61ead10400f658a22128a321e14ae0ac" kindref="member">db_base_sptr</ref> &gt;</type>
        <definition>std::vector&lt; db_base_sptr &gt; usrp_basic::db</definition>
        <argsstring>(int which_side)</argsstring>
        <name>db</name>
        <param>
          <type>int</type>
          <declname>which_side</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return a vector of size &gt;= 1 that contains shared pointers to the daughterboard instance(s) associated with the specified side.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>which_side</parametername>
</parameternamelist>
<parameterdescription>
<para>[0,1] which daughterboard</para></parameterdescription>
</parameteritem>
</parameterlist>
It is an error to use the returned objects after the <ref refid="classusrp__basic" kindref="compound">usrp_basic</ref> object has been destroyed. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/me/gnuradio-3.4.0/usrp/host/include/usrp/usrp_basic.h" line="165" column="1" bodyfile="/home/me/gnuradio-3.4.0/usrp/host/lib/usrp_basic.cc" bodystart="189" bodyend="193"/>
        <references refid="classusrp__basic_1aa45df525ed16ee0c885a4972ac7908b4" compoundref="usrp__basic_8h" startline="89">d_db</references>
      </memberdef>
      <memberdef kind="function" id="classusrp__basic_1a61af504df443a9d846ecf909871f1481" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool usrp_basic::is_valid</definition>
        <argsstring>(const usrp_subdev_spec &amp;ss)</argsstring>
        <name>is_valid</name>
        <param>
          <type>const <ref refid="structusrp__subdev__spec" kindref="compound">usrp_subdev_spec</ref> &amp;</type>
          <declname>ss</declname>
        </param>
        <briefdescription>
<para>is the subdev_spec valid? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/me/gnuradio-3.4.0/usrp/host/include/usrp/usrp_basic.h" line="170" column="1" bodyfile="/home/me/gnuradio-3.4.0/usrp/host/lib/usrp_basic.cc" bodystart="196" bodyend="205"/>
        <references refid="classusrp__basic_1aa45df525ed16ee0c885a4972ac7908b4" compoundref="usrp__basic_8h" startline="89">d_db</references>
        <references refid="structusrp__subdev__spec_1aeff15f40736fb2af3e1eddb85a243252" compoundref="usrp__subdev__spec_8h" startline="43">usrp_subdev_spec::side</references>
        <references refid="structusrp__subdev__spec_1abb7b7dbdca4355d0957b2233a32119ef" compoundref="usrp__subdev__spec_8h" startline="44">usrp_subdev_spec::subdev</references>
        <referencedby refid="classusrp__basic_1a8eb1f58ca819437d7f43ad87574bd6da" compoundref="usrp__basic_8h" startline="154" endline="154">db</referencedby>
        <referencedby refid="classusrp__standard__rx_1a1b1d513ec9017203d3d2eede645093d5" compoundref="usrp__standard_8cc" startline="539" endline="633">usrp_standard_rx::determine_rx_mux_value</referencedby>
        <referencedby refid="classusrp__standard__tx_1a386da4e76f7b2393563e48555c613a96" compoundref="usrp__standard_8cc" startline="951" endline="979">usrp_standard_tx::determine_tx_mux_value</referencedby>
        <referencedby refid="classusrp__basic_1a648de1479d7632b59bf2732f231ddbe0" compoundref="usrp__basic_8cc" startline="208" endline="214">selected_subdev</referencedby>
      </memberdef>
      <memberdef kind="function" id="classusrp__basic_1a648de1479d7632b59bf2732f231ddbe0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="db__base_8h_1a61ead10400f658a22128a321e14ae0ac" kindref="member">db_base_sptr</ref></type>
        <definition>db_base_sptr usrp_basic::selected_subdev</definition>
        <argsstring>(const usrp_subdev_spec &amp;ss)</argsstring>
        <name>selected_subdev</name>
        <param>
          <type>const <ref refid="structusrp__subdev__spec" kindref="compound">usrp_subdev_spec</ref> &amp;</type>
          <declname>ss</declname>
        </param>
        <briefdescription>
<para>given a subdev_spec, return the corresponding daughterboard object. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::invalid_</parametername>
</parameternamelist>
<parameterdescription>
<para>argument if ss is invalid.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ss</parametername>
</parameternamelist>
<parameterdescription>
<para>specifies the side and subdevice </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/me/gnuradio-3.4.0/usrp/host/include/usrp/usrp_basic.h" line="178" column="1" bodyfile="/home/me/gnuradio-3.4.0/usrp/host/lib/usrp_basic.cc" bodystart="208" bodyend="214"/>
        <references refid="classusrp__basic_1aa45df525ed16ee0c885a4972ac7908b4" compoundref="usrp__basic_8h" startline="89">d_db</references>
        <references refid="classusrp__basic_1a61af504df443a9d846ecf909871f1481" compoundref="usrp__basic_8cc" startline="196" endline="205">is_valid</references>
        <references refid="structusrp__subdev__spec_1aeff15f40736fb2af3e1eddb85a243252" compoundref="usrp__subdev__spec_8h" startline="43">usrp_subdev_spec::side</references>
        <references refid="structusrp__subdev__spec_1abb7b7dbdca4355d0957b2233a32119ef" compoundref="usrp__subdev__spec_8h" startline="44">usrp_subdev_spec::subdev</references>
        <referencedby refid="classusrp__basic_1a8eb1f58ca819437d7f43ad87574bd6da" compoundref="usrp__basic_8h" startline="154" endline="154">db</referencedby>
      </memberdef>
      <memberdef kind="function" id="classusrp__basic_1a244d4aa01bb6a054cd5bd0998ce2a09a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>long</type>
        <definition>long usrp_basic::fpga_master_clock_freq</definition>
        <argsstring>() const </argsstring>
        <name>fpga_master_clock_freq</name>
        <briefdescription>
<para>return frequency of master oscillator on USRP </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/me/gnuradio-3.4.0/usrp/host/include/usrp/usrp_basic.h" line="183" column="1" bodyfile="/home/me/gnuradio-3.4.0/usrp/host/include/usrp/usrp_basic.h" bodystart="183" bodyend="183"/>
        <references refid="classusrp__basic_1afa81d2ee842dd6eef04c422276f52d1d" compoundref="usrp__basic_8h" startline="74">d_fpga_master_clock_freq</references>
        <referencedby refid="classdb__base_1a5f8f3e592b85cb3151b5d2c81802f6ed" compoundref="db__base_8cc" startline="216" endline="219">db_base::_refclk_freq</referencedby>
        <referencedby refid="classusrp__basic__rx_1afd14b376f2449cfb71865c9980ea2358" compoundref="usrp__basic_8h" startline="848" endline="848">usrp_basic_rx::converter_rate</referencedby>
        <referencedby refid="classusrp__basic__tx_1a4eefc136417ea3a75a296c1b6dbbd470" compoundref="usrp__basic_8h" startline="963" endline="963">usrp_basic_tx::converter_rate</referencedby>
        <referencedby refid="classxcvr2450_1ad2d195dab47cfee0437738bab86b5254" compoundref="db__xcvr2450_8cc" startline="449" endline="503">xcvr2450::set_freq</referencedby>
      </memberdef>
      <memberdef kind="function" id="classusrp__basic_1a825640d1de15253b5bae18762a0e403e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void usrp_basic::set_fpga_master_clock_freq</definition>
        <argsstring>(long master_clock)</argsstring>
        <name>set_fpga_master_clock_freq</name>
        <param>
          <type>long</type>
          <declname>master_clock</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Tell API that the master oscillator on the USRP is operating at a non-standard fixed frequency. This is only needed for custom USRP hardware modified to operate at a different frequency from the default factory configuration. This function must be called prior to any other API function. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>master_clock</parametername>
</parameternamelist>
<parameterdescription>
<para>USRP2 FPGA master clock frequency in Hz (10..64 MHz) </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/me/gnuradio-3.4.0/usrp/host/include/usrp/usrp_basic.h" line="192" column="1" bodyfile="/home/me/gnuradio-3.4.0/usrp/host/include/usrp/usrp_basic.h" bodystart="192" bodyend="192"/>
      </memberdef>
      <memberdef kind="function" id="classusrp__basic_1a530c23ff633c630530ec491c368a755d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int usrp_basic::usb_data_rate</definition>
        <argsstring>() const </argsstring>
        <name>usb_data_rate</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>usb data rate in bytes/sec </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/me/gnuradio-3.4.0/usrp/host/include/usrp/usrp_basic.h" line="197" column="1" bodyfile="/home/me/gnuradio-3.4.0/usrp/host/include/usrp/usrp_basic.h" bodystart="197" bodyend="197"/>
        <references refid="classusrp__basic_1a4e5297f0010c8f39cfe4fff838b113a4" compoundref="usrp__basic_8h" startline="71">d_usb_data_rate</references>
        <referencedby refid="classusrp__basic_1a77535750946e7d8443a76941a9611cae" compoundref="usrp__basic_8cc" startline="229" endline="233">set_usb_data_rate</referencedby>
      </memberdef>
      <memberdef kind="function" id="classusrp__basic_1ae200e6eb7dbbaf81a3c1353a401f97d3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void usrp_basic::set_verbose</definition>
        <argsstring>(bool on)</argsstring>
        <name>set_verbose</name>
        <param>
          <type>bool</type>
          <declname>on</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/me/gnuradio-3.4.0/usrp/host/include/usrp/usrp_basic.h" line="199" column="1" bodyfile="/home/me/gnuradio-3.4.0/usrp/host/include/usrp/usrp_basic.h" bodystart="199" bodyend="199"/>
      </memberdef>
      <memberdef kind="function" id="classusrp__basic_1a3900d37e951b83c938669f5fa0255866" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool usrp_basic::write_eeprom</definition>
        <argsstring>(int i2c_addr, int eeprom_offset, const std::string buf)</argsstring>
        <name>write_eeprom</name>
        <param>
          <type>int</type>
          <declname>i2c_addr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>eeprom_offset</declname>
        </param>
        <param>
          <type>const std::string</type>
          <declname>buf</declname>
        </param>
        <briefdescription>
<para>Write EEPROM on motherboard or any daughterboard. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i2c_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>I2C bus address of EEPROM </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>eeprom_offset</parametername>
</parameternamelist>
<parameterdescription>
<para>byte offset in EEPROM to begin writing </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>the data to write </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true iff sucessful </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/me/gnuradio-3.4.0/usrp/host/include/usrp/usrp_basic.h" line="211" column="1" bodyfile="/home/me/gnuradio-3.4.0/usrp/host/lib/usrp_basic.cc" bodystart="258" bodyend="261"/>
        <references refid="classusrp__basic_1aad5f6f17a9fde484c67e7dbdd0491f74" compoundref="usrp__basic_8h" startline="69">d_udh</references>
        <references refid="usrp__prims_8h_1a452984e181f220c9ed68f0f93d9831ee" compoundref="usrp__prims__common_8cc" startline="960" endline="982">usrp_eeprom_write</references>
      </memberdef>
      <memberdef kind="function" id="classusrp__basic_1aefe7a2f10626831304091babff21dc0d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string usrp_basic::read_eeprom</definition>
        <argsstring>(int i2c_addr, int eeprom_offset, int len)</argsstring>
        <name>read_eeprom</name>
        <param>
          <type>int</type>
          <declname>i2c_addr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>eeprom_offset</declname>
        </param>
        <param>
          <type>int</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Read EEPROM on motherboard or any daughterboard. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i2c_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>I2C bus address of EEPROM </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>eeprom_offset</parametername>
</parameternamelist>
<parameterdescription>
<para>byte offset in EEPROM to begin reading </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>number of bytes to read </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the data read if successful, else a zero length string. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/me/gnuradio-3.4.0/usrp/host/include/usrp/usrp_basic.h" line="220" column="1" bodyfile="/home/me/gnuradio-3.4.0/usrp/host/lib/usrp_basic.cc" bodystart="264" bodyend="275"/>
        <references refid="classusrp__basic_1aad5f6f17a9fde484c67e7dbdd0491f74" compoundref="usrp__basic_8h" startline="69">d_udh</references>
        <references refid="usrp__prims_8h_1afe37e9b1905cf7dc986c6c992d5f35a0" compoundref="usrp__prims__common_8cc" startline="985" endline="1006">usrp_eeprom_read</references>
      </memberdef>
      <memberdef kind="function" id="classusrp__basic_1a664e5aa3a3fb8a4c50b752906fcb79a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool usrp_basic::write_i2c</definition>
        <argsstring>(int i2c_addr, const std::string buf)</argsstring>
        <name>write_i2c</name>
        <param>
          <type>int</type>
          <declname>i2c_addr</declname>
        </param>
        <param>
          <type>const std::string</type>
          <declname>buf</declname>
        </param>
        <briefdescription>
<para>Write to I2C peripheral. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i2c_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>I2C bus address (7-bits) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>the data to write </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true iff successful Writes are limited to a maximum of of 64 bytes. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/me/gnuradio-3.4.0/usrp/host/include/usrp/usrp_basic.h" line="229" column="1" bodyfile="/home/me/gnuradio-3.4.0/usrp/host/lib/usrp_basic.cc" bodystart="278" bodyend="281"/>
        <references refid="classusrp__basic_1aad5f6f17a9fde484c67e7dbdd0491f74" compoundref="usrp__basic_8h" startline="69">d_udh</references>
        <references refid="usrp__prims_8h_1a9b367498154b59e4b03fd3d4677734cb" compoundref="usrp__prims__common_8cc" startline="825" endline="833">usrp_i2c_write</references>
        <referencedby refid="classdb__bitshark__rx_1ae8b8f942df5c56d3ce7c9653c98ac701" compoundref="db__bitshark__rx_8cc" startline="192" endline="225">db_bitshark_rx::set_bw</referencedby>
        <referencedby refid="classdb__bitshark__rx_1aed98afdec32fd066bd4ed833390c9cc9" compoundref="db__bitshark__rx_8cc" startline="292" endline="341">db_bitshark_rx::set_clock_scheme</referencedby>
        <referencedby refid="classdb__dtt768_1a286c356823a4914045e89bfac81ab4ef" compoundref="db__dtt768_8cc" startline="181" endline="222">db_dtt768::set_freq</referencedby>
        <referencedby refid="classdb__dtt754_1a92258314599337578b552d457d816e30" compoundref="db__dtt754_8cc" startline="209" endline="249">db_dtt754::set_freq</referencedby>
        <referencedby refid="classdb__bitshark__rx_1aa1b71b8cecd0e4f72c16fe15e480d59c" compoundref="db__bitshark__rx_8cc" startline="356" endline="403">db_bitshark_rx::set_freq</referencedby>
        <referencedby refid="classdb__tv__rx_1adcbac7d83d1f3a14d3e6ca653e71b2d6" compoundref="db__tv__rx_8cc" startline="169" endline="209">db_tv_rx::set_freq</referencedby>
        <referencedby refid="classdb__bitshark__rx_1a2bffea86cc9c569523f4c2169bd2b918" compoundref="db__bitshark__rx_8cc" startline="256" endline="288">db_bitshark_rx::set_gain</referencedby>
        <referencedby refid="classdb__dbs__rx_1a772ca7aea92c7223d4749ff6600f2d29" compoundref="db__dbs__rx_8cc" startline="78" endline="85">db_dbs_rx::shutdown</referencedby>
      </memberdef>
      <memberdef kind="function" id="classusrp__basic_1ab284caa2e15464f62aa80ad1f540ecc5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string usrp_basic::read_i2c</definition>
        <argsstring>(int i2c_addr, int len)</argsstring>
        <name>read_i2c</name>
        <param>
          <type>int</type>
          <declname>i2c_addr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Read from I2C peripheral. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i2c_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>I2C bus address (7-bits) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>number of bytes to read </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the data read if successful, else a zero length string. Reads are limited to a maximum of 64 bytes. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/me/gnuradio-3.4.0/usrp/host/include/usrp/usrp_basic.h" line="238" column="1" bodyfile="/home/me/gnuradio-3.4.0/usrp/host/lib/usrp_basic.cc" bodystart="284" bodyend="295"/>
        <references refid="classusrp__basic_1aad5f6f17a9fde484c67e7dbdd0491f74" compoundref="usrp__basic_8h" startline="69">d_udh</references>
        <references refid="usrp__prims_8h_1a67b5af6739c0f41abeae074d2d9821cc" compoundref="usrp__prims__common_8cc" startline="837" endline="845">usrp_i2c_read</references>
        <referencedby refid="classdb__dbs__rx_1a772ca7aea92c7223d4749ff6600f2d29" compoundref="db__dbs__rx_8cc" startline="78" endline="85">db_dbs_rx::shutdown</referencedby>
      </memberdef>
      <memberdef kind="function" id="classusrp__basic_1ad0e07c8d85aa220aaf150e27dd8b545f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool usrp_basic::set_adc_offset</definition>
        <argsstring>(int which_adc, int offset)</argsstring>
        <name>set_adc_offset</name>
        <param>
          <type>int</type>
          <declname>which_adc</declname>
        </param>
        <param>
          <type>int</type>
          <declname>offset</declname>
        </param>
        <briefdescription>
<para>Set ADC offset correction. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>which_adc</parametername>
</parameternamelist>
<parameterdescription>
<para>which ADC[0,3]: 0 = RX_A I, 1 = RX_A Q... </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>offset</parametername>
</parameternamelist>
<parameterdescription>
<para>16-bit value to subtract from raw ADC input. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/me/gnuradio-3.4.0/usrp/host/include/usrp/usrp_basic.h" line="245" column="1" bodyfile="/home/me/gnuradio-3.4.0/usrp/host/lib/usrp_basic.cc" bodystart="306" bodyend="312"/>
        <references refid="classusrp__basic_1ac5bdb9be69f27eb3a0530cba9536d0f4" compoundref="usrp__basic_8cc" startline="380" endline="391">_write_fpga_reg</references>
        <referencedby refid="classusrp__basic__rx_1a9edf0c0a2aeab58f7f12483a02dd14ee" compoundref="usrp__basic_8cc" startline="986" endline="1031">usrp_basic_rx::probe_rx_slots</referencedby>
      </memberdef>
      <memberdef kind="function" id="classusrp__basic_1ab18f4a02c0efcac10f8e9406ca7a57a7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool usrp_basic::set_dac_offset</definition>
        <argsstring>(int which_dac, int offset, int offset_pin)</argsstring>
        <name>set_dac_offset</name>
        <param>
          <type>int</type>
          <declname>which_dac</declname>
        </param>
        <param>
          <type>int</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>int</type>
          <declname>offset_pin</declname>
        </param>
        <briefdescription>
<para>Set DAC offset correction. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>which_dac</parametername>
</parameternamelist>
<parameterdescription>
<para>which DAC[0,3]: 0 = TX_A I, 1 = TX_A Q... </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>offset</parametername>
</parameternamelist>
<parameterdescription>
<para>10-bit offset value (ambiguous format: See AD9862 datasheet). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>offset_pin</parametername>
</parameternamelist>
<parameterdescription>
<para>1-bit value. If 0 offset applied to -ve differential pin; If 1 offset applied to +ve differential pin. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/me/gnuradio-3.4.0/usrp/host/include/usrp/usrp_basic.h" line="254" column="1" bodyfile="/home/me/gnuradio-3.4.0/usrp/host/lib/usrp_basic.cc" bodystart="315" bodyend="335"/>
        <references refid="classusrp__basic_1a8a25444c83f59f7517d0ff687d2ff053" compoundref="usrp__basic_8cc" startline="426" endline="435">_write_9862</references>
        <references refid="ad9862_8h_1ac236ff04655754a05ea0545d1d9e60a6" compoundref="ad9862_8h" startline="83">REG_TX_A_OFFSET_HI</references>
        <references refid="ad9862_8h_1aa838959013a994bf938c13153dbef54c" compoundref="ad9862_8h" startline="82">REG_TX_A_OFFSET_LO</references>
        <references refid="ad9862_8h_1a8552a8e3355c0a8eb0bd075f42725dc4" compoundref="ad9862_8h" startline="85">REG_TX_B_OFFSET_HI</references>
        <references refid="ad9862_8h_1ac5615da62a25b00ba3847d69d1a65d58" compoundref="ad9862_8h" startline="84">REG_TX_B_OFFSET_LO</references>
      </memberdef>
      <memberdef kind="function" id="classusrp__basic_1a97fc801cbafa85040a3d39be03d27a62" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool usrp_basic::set_adc_buffer_bypass</definition>
        <argsstring>(int which_adc, bool bypass)</argsstring>
        <name>set_adc_buffer_bypass</name>
        <param>
          <type>int</type>
          <declname>which_adc</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>bypass</declname>
        </param>
        <briefdescription>
<para>Control ADC input buffer. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>which_adc</parametername>
</parameternamelist>
<parameterdescription>
<para>which ADC[0,3] </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bypass</parametername>
</parameternamelist>
<parameterdescription>
<para>if non-zero, bypass input buffer and connect input directly to switched cap SHA input of RxPGA. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/me/gnuradio-3.4.0/usrp/host/include/usrp/usrp_basic.h" line="262" column="1" bodyfile="/home/me/gnuradio-3.4.0/usrp/host/lib/usrp_basic.cc" bodystart="338" bodyend="368"/>
        <references refid="classusrp__basic_1a3814dc28edce07e3b5cb48bb3ebdf244" compoundref="usrp__basic_8cc" startline="439" endline="442">_read_9862</references>
        <references refid="classusrp__basic_1a8a25444c83f59f7517d0ff687d2ff053" compoundref="usrp__basic_8cc" startline="426" endline="435">_write_9862</references>
        <references refid="ad9862_8h_1a352d9229a931bb505d950a48814277d2" compoundref="ad9862_8h" startline="47">REG_RX_A</references>
        <references refid="ad9862_8h_1a5c07b49353ec7cbd3e89c7c651bcf4b2" compoundref="ad9862_8h" startline="48">REG_RX_B</references>
        <references refid="ad9862_8h_1aa0fcba5d524230a122c57078342ad852" compoundref="ad9862_8h" startline="37">REG_RX_PWR_DN</references>
        <references refid="ad9862_8h_1af2efb4effcf6cd63a1a0e1df8a9d9cd0" compoundref="ad9862_8h" startline="44">RX_PWR_DN_BUF_A</references>
        <references refid="ad9862_8h_1a34fe55f02c3cf1592f6d36693ec88710" compoundref="ad9862_8h" startline="43">RX_PWR_DN_BUF_B</references>
        <references refid="ad9862_8h_1a70fa5d8ba37244a77fabdd30be2adc4d" compoundref="ad9862_8h" startline="49">RX_X_BYPASS_INPUT_BUFFER</references>
        <referencedby refid="classdb__base_1a159a4f97c1c6ecc966b6822174e58735" compoundref="db__base_8cc" startline="88" endline="104">db_base::bypass_adc_buffers</referencedby>
      </memberdef>
      <memberdef kind="function" id="classusrp__basic_1af20cc324fca8d089226d5a6dfc3d3668" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool usrp_basic::set_dc_offset_cl_enable</definition>
        <argsstring>(int bits, int mask)</argsstring>
        <name>set_dc_offset_cl_enable</name>
        <param>
          <type>int</type>
          <declname>bits</declname>
        </param>
        <param>
          <type>int</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Enable/disable automatic DC offset removal control loop in FPGA. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bits</parametername>
</parameternamelist>
<parameterdescription>
<para>which control loops to enable </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mask</parametername>
</parameternamelist>
<parameterdescription>
<para>which <computeroutput>bits</computeroutput> to pay attention to</para></parameterdescription>
</parameteritem>
</parameterlist>
If the corresponding bit is set, enable the automatic DC offset correction control loop.</para><para><preformatted>
The 4 low bits are significant:</preformatted></para><para><preformatted>  ADC0 = (1 &lt;&lt; 0)
  ADC1 = (1 &lt;&lt; 1)
  ADC2 = (1 &lt;&lt; 2)
  ADC3 = (1 &lt;&lt; 3)
</preformatted></para><para>By default the control loop is enabled on all ADC&apos;s. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/me/gnuradio-3.4.0/usrp/host/include/usrp/usrp_basic.h" line="284" column="1" bodyfile="/home/me/gnuradio-3.4.0/usrp/host/lib/usrp_basic.cc" bodystart="371" bodyend="375"/>
        <references refid="classusrp__basic_1ac5bdb9be69f27eb3a0530cba9536d0f4" compoundref="usrp__basic_8cc" startline="380" endline="391">_write_fpga_reg</references>
        <references refid="classusrp__basic_1af3d08c8bcdd0ed116e76ffa5449004f2" compoundref="usrp__basic_8h" startline="77">d_fpga_shadows</references>
        <referencedby refid="classusrp__basic__rx_1acbda9587edf161df5aa2c504e42096ff" compoundref="usrp__basic_8cc" startline="765" endline="824">usrp_basic_rx::usrp_basic_rx</referencedby>
      </memberdef>
      <memberdef kind="function" id="classusrp__basic_1a70a71308412a67eaf825c13399faa078" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string usrp_basic::serial_number</definition>
        <argsstring>()</argsstring>
        <name>serial_number</name>
        <briefdescription>
<para>return the usrp&apos;s serial number. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>non-zero length string iff successful. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/me/gnuradio-3.4.0/usrp/host/include/usrp/usrp_basic.h" line="291" column="1" bodyfile="/home/me/gnuradio-3.4.0/usrp/host/lib/usrp_basic.cc" bodystart="298" bodyend="301"/>
        <references refid="classusrp__basic_1aad5f6f17a9fde484c67e7dbdd0491f74" compoundref="usrp__basic_8h" startline="69">d_udh</references>
        <references refid="usrp__prims_8h_1ae687fb1de69502d465285db77cfe3830" compoundref="usrp__prims__common_8cc" startline="1223" endline="1237">usrp_serial_number</references>
      </memberdef>
      <memberdef kind="function" id="classusrp__basic_1a6d639e50633c165b23e0c4770b26bec2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>int</type>
        <definition>virtual int usrp_basic::daughterboard_id</definition>
        <argsstring>(int which_side) const =0</argsstring>
        <name>daughterboard_id</name>
        <reimplementedby refid="classusrp__basic__rx_1a34128f4864ece7fafc011786c42b9994">daughterboard_id</reimplementedby>
        <reimplementedby refid="classusrp__basic__tx_1a25ef6153080bcd83637c87df6ea1d478">daughterboard_id</reimplementedby>
        <param>
          <type>int</type>
          <declname>which_side</declname>
        </param>
        <briefdescription>
<para>Return daughterboard ID for given side [0,1]. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>which_side</parametername>
</parameternamelist>
<parameterdescription>
<para>[0,1] which daughterboard</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>daughterboard id &gt;= 0 if successful </para></simplesect>
<simplesect kind="return"><para>-1 if no daugherboard </para></simplesect>
<simplesect kind="return"><para>-2 if invalid EEPROM on daughterboard </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/me/gnuradio-3.4.0/usrp/host/include/usrp/usrp_basic.h" line="302" column="1"/>
        <referencedby refid="classdb__base_1a6c70380b8abff2d051eece9d2b208408" compoundref="db__base_8cc" startline="64" endline="67">db_base::dbid</referencedby>
      </memberdef>
      <memberdef kind="function" id="classusrp__basic_1a70f4070830b0db3fd0c3addb97ce966e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool usrp_basic::write_atr_tx_delay</definition>
        <argsstring>(int value)</argsstring>
        <name>write_atr_tx_delay</name>
        <param>
          <type>int</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Clock ticks to delay rising of T/R signal. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classusrp__basic_1a49074783b3757b6af17ddf8e8f56be6c" kindref="member">write_atr_mask</ref>, <ref refid="classusrp__basic_1a504bf45d241c56ddf00ee07fc946207e" kindref="member">write_atr_txval</ref>, <ref refid="classusrp__basic_1ae5466590dd7ec5646fefbb82d92ad899" kindref="member">write_atr_rxval</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/me/gnuradio-3.4.0/usrp/host/include/usrp/usrp_basic.h" line="308" column="1" bodyfile="/home/me/gnuradio-3.4.0/usrp/host/lib/usrp_basic.cc" bodystart="482" bodyend="485"/>
        <references refid="classusrp__basic_1ac5bdb9be69f27eb3a0530cba9536d0f4" compoundref="usrp__basic_8cc" startline="380" endline="391">_write_fpga_reg</references>
        <referencedby refid="classdb__base_1a01586c74a2cab95c3e12951402fab1a3" compoundref="db__base_8cc" startline="128" endline="133">db_base::set_atr_tx_delay</referencedby>
      </memberdef>
      <memberdef kind="function" id="classusrp__basic_1ad9b95b1ca0e2616c1b3808892fdda1b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool usrp_basic::write_atr_rx_delay</definition>
        <argsstring>(int value)</argsstring>
        <name>write_atr_rx_delay</name>
        <param>
          <type>int</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Clock ticks to delay falling edge of T/R signal. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classusrp__basic_1a49074783b3757b6af17ddf8e8f56be6c" kindref="member">write_atr_mask</ref>, <ref refid="classusrp__basic_1a504bf45d241c56ddf00ee07fc946207e" kindref="member">write_atr_txval</ref>, <ref refid="classusrp__basic_1ae5466590dd7ec5646fefbb82d92ad899" kindref="member">write_atr_rxval</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/me/gnuradio-3.4.0/usrp/host/include/usrp/usrp_basic.h" line="314" column="1" bodyfile="/home/me/gnuradio-3.4.0/usrp/host/lib/usrp_basic.cc" bodystart="488" bodyend="491"/>
        <references refid="classusrp__basic_1ac5bdb9be69f27eb3a0530cba9536d0f4" compoundref="usrp__basic_8cc" startline="380" endline="391">_write_fpga_reg</references>
        <references refid="usrp__basic_8h_1a62f19b5a3751ce085242fa46f8761f71a29836aad5b486173ae3f31b3cb59f6b9" compoundref="usrp__basic_8h" startline="38">C_RX</references>
        <referencedby refid="classdb__base_1aec8010d1f2412ffe33bb0f27ee6d8275" compoundref="db__base_8cc" startline="136" endline="141">db_base::set_atr_rx_delay</referencedby>
      </memberdef>
      <memberdef kind="function" id="classusrp__basic_1a52f96a90c91ed6e74bfc6a91691a7fa2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool usrp_basic::common_set_pga</definition>
        <argsstring>(txrx_t txrx, int which_amp, double gain_in_db)</argsstring>
        <name>common_set_pga</name>
        <param>
          <type><ref refid="usrp__basic_8h_1a62f19b5a3751ce085242fa46f8761f71" kindref="member">txrx_t</ref></type>
          <declname>txrx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>which_amp</declname>
        </param>
        <param>
          <type>double</type>
          <declname>gain_in_db</declname>
        </param>
        <briefdescription>
<para>Set Programmable Gain Amplifier(PGA) </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>txrx</parametername>
</parameternamelist>
<parameterdescription>
<para>Tx or Rx? </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>which_amp</parametername>
</parameternamelist>
<parameterdescription>
<para>which amp [0,3] </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>gain_in_db</parametername>
</parameternamelist>
<parameterdescription>
<para>gain value(linear in dB)</para></parameterdescription>
</parameteritem>
</parameterlist>
gain is rounded to closest setting supported by hardware.</para><para><simplesect kind="return"><para>true iff sucessful.</para></simplesect>
<simplesect kind="see"><para><ref refid="classusrp__basic_1afcab635a411c57f16820e44a83bfe259" kindref="member">pga_min()</ref>, <ref refid="classusrp__basic_1ae6a0027c59862dcc2d4da73d50b6a598" kindref="member">pga_max()</ref>, <ref refid="classusrp__basic_1ae67abb570f10f1216c001f2409fe3331" kindref="member">pga_db_per_step()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/me/gnuradio-3.4.0/usrp/host/include/usrp/usrp_basic.h" line="343" column="1" bodyfile="/home/me/gnuradio-3.4.0/usrp/host/lib/usrp_basic.cc" bodystart="557" bodyend="582"/>
        <references refid="classusrp__basic_1a3814dc28edce07e3b5cb48bb3ebdf244" compoundref="usrp__basic_8cc" startline="439" endline="442">_read_9862</references>
        <references refid="classusrp__basic_1a8a25444c83f59f7517d0ff687d2ff053" compoundref="usrp__basic_8cc" startline="426" endline="435">_write_9862</references>
        <references refid="usrp__basic_8h_1a62f19b5a3751ce085242fa46f8761f71a9228bc40e4bcfb1b7363f686515e1846" compoundref="usrp__basic_8h" startline="39">C_TX</references>
        <references refid="classusrp__basic_1a06cfd0e5675618f773c5466bd235a369" compoundref="usrp__basic_8cc" startline="630" endline="636">common_pga_db_per_step</references>
        <references refid="classusrp__basic_1a7dd5c384b9d2cd4e412939c3b7b7ac79" compoundref="usrp__basic_8cc" startline="621" endline="627">common_pga_max</references>
        <references refid="classusrp__basic_1a95453e5bb4d0ed4c05b1ea64c880170a" compoundref="usrp__basic_8cc" startline="612" endline="618">common_pga_min</references>
        <references refid="ad9862_8h_1a352d9229a931bb505d950a48814277d2" compoundref="ad9862_8h" startline="47">REG_RX_A</references>
        <references refid="ad9862_8h_1a5c07b49353ec7cbd3e89c7c651bcf4b2" compoundref="ad9862_8h" startline="48">REG_RX_B</references>
        <references refid="ad9862_8h_1aee4e6ec7888ad313b8e17bb0ae0133d1" compoundref="ad9862_8h" startline="93">REG_TX_PGA</references>
        <references refid="ad9862_8h_1a70fa5d8ba37244a77fabdd30be2adc4d" compoundref="ad9862_8h" startline="49">RX_X_BYPASS_INPUT_BUFFER</references>
        <referencedby refid="classusrp__basic__rx_1a85804ff6612a34c800a7181ea90de6b4" compoundref="usrp__basic_8cc" startline="1034" endline="1037">usrp_basic_rx::set_pga</referencedby>
        <referencedby refid="classusrp__basic__tx_1a5d950d5f8a8969e17525cee918d9bd06" compoundref="usrp__basic_8cc" startline="1441" endline="1444">usrp_basic_tx::set_pga</referencedby>
      </memberdef>
      <memberdef kind="function" id="classusrp__basic_1ac25d56e74572309a87397f0fce1a102b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double usrp_basic::common_pga</definition>
        <argsstring>(txrx_t txrx, int which_amp) const </argsstring>
        <name>common_pga</name>
        <param>
          <type><ref refid="usrp__basic_8h_1a62f19b5a3751ce085242fa46f8761f71" kindref="member">txrx_t</ref></type>
          <declname>txrx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>which_amp</declname>
        </param>
        <briefdescription>
<para>Return programmable gain amplifier gain setting in dB. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>txrx</parametername>
</parameternamelist>
<parameterdescription>
<para>Tx or Rx? </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>which_amp</parametername>
</parameternamelist>
<parameterdescription>
<para>which amp [0,3] </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/me/gnuradio-3.4.0/usrp/host/include/usrp/usrp_basic.h" line="351" column="1" bodyfile="/home/me/gnuradio-3.4.0/usrp/host/lib/usrp_basic.cc" bodystart="585" bodyend="609"/>
        <references refid="classusrp__basic_1a3814dc28edce07e3b5cb48bb3ebdf244" compoundref="usrp__basic_8cc" startline="439" endline="442">_read_9862</references>
        <references refid="usrp__basic_8h_1a62f19b5a3751ce085242fa46f8761f71a9228bc40e4bcfb1b7363f686515e1846" compoundref="usrp__basic_8h" startline="39">C_TX</references>
        <references refid="classusrp__basic_1ae67abb570f10f1216c001f2409fe3331">pga_db_per_step</references>
        <references refid="classusrp__basic_1afcab635a411c57f16820e44a83bfe259">pga_min</references>
        <references refid="classusrp__basic_1a364d3e56a0749a90cc5de2ac378e6863" compoundref="usrp__basic_8h" startline="202">READ_FAILED</references>
        <references refid="ad9862_8h_1a352d9229a931bb505d950a48814277d2" compoundref="ad9862_8h" startline="47">REG_RX_A</references>
        <references refid="ad9862_8h_1a5c07b49353ec7cbd3e89c7c651bcf4b2" compoundref="ad9862_8h" startline="48">REG_RX_B</references>
        <references refid="ad9862_8h_1aee4e6ec7888ad313b8e17bb0ae0133d1" compoundref="ad9862_8h" startline="93">REG_TX_PGA</references>
        <referencedby refid="classusrp__basic__rx_1a982d36d1f8d64a5bb2604cf04caa22d4" compoundref="usrp__basic_8cc" startline="1040" endline="1043">usrp_basic_rx::pga</referencedby>
        <referencedby refid="classusrp__basic__tx_1aa7764a14b980820287ebe3d50a303fbd" compoundref="usrp__basic_8cc" startline="1447" endline="1450">usrp_basic_tx::pga</referencedby>
      </memberdef>
      <memberdef kind="function" id="classusrp__basic_1a95453e5bb4d0ed4c05b1ea64c880170a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double usrp_basic::common_pga_min</definition>
        <argsstring>(txrx_t txrx) const </argsstring>
        <name>common_pga_min</name>
        <param>
          <type><ref refid="usrp__basic_8h_1a62f19b5a3751ce085242fa46f8761f71" kindref="member">txrx_t</ref></type>
          <declname>txrx</declname>
        </param>
        <briefdescription>
<para>Return minimum legal PGA gain in dB. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>txrx</parametername>
</parameternamelist>
<parameterdescription>
<para>Tx or Rx? </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/me/gnuradio-3.4.0/usrp/host/include/usrp/usrp_basic.h" line="357" column="1" bodyfile="/home/me/gnuradio-3.4.0/usrp/host/lib/usrp_basic.cc" bodystart="612" bodyend="618"/>
        <references refid="usrp__basic_8h_1a62f19b5a3751ce085242fa46f8761f71a9228bc40e4bcfb1b7363f686515e1846" compoundref="usrp__basic_8h" startline="39">C_TX</references>
        <referencedby refid="classusrp__basic_1a52f96a90c91ed6e74bfc6a91691a7fa2" compoundref="usrp__basic_8cc" startline="557" endline="582">common_set_pga</referencedby>
        <referencedby refid="classusrp__basic__rx_1a984a57196c26958e2927667ab3abe4cf" compoundref="usrp__basic_8cc" startline="1046" endline="1049">usrp_basic_rx::pga_min</referencedby>
        <referencedby refid="classusrp__basic__tx_1a7cae37094ad8d1a0095fc058649829d0" compoundref="usrp__basic_8cc" startline="1453" endline="1456">usrp_basic_tx::pga_min</referencedby>
      </memberdef>
      <memberdef kind="function" id="classusrp__basic_1a7dd5c384b9d2cd4e412939c3b7b7ac79" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double usrp_basic::common_pga_max</definition>
        <argsstring>(txrx_t txrx) const </argsstring>
        <name>common_pga_max</name>
        <param>
          <type><ref refid="usrp__basic_8h_1a62f19b5a3751ce085242fa46f8761f71" kindref="member">txrx_t</ref></type>
          <declname>txrx</declname>
        </param>
        <briefdescription>
<para>Return maximum legal PGA gain in dB. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>txrx</parametername>
</parameternamelist>
<parameterdescription>
<para>Tx or Rx? </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/me/gnuradio-3.4.0/usrp/host/include/usrp/usrp_basic.h" line="363" column="1" bodyfile="/home/me/gnuradio-3.4.0/usrp/host/lib/usrp_basic.cc" bodystart="621" bodyend="627"/>
        <references refid="usrp__basic_8h_1a62f19b5a3751ce085242fa46f8761f71a9228bc40e4bcfb1b7363f686515e1846" compoundref="usrp__basic_8h" startline="39">C_TX</references>
        <referencedby refid="classusrp__basic_1a52f96a90c91ed6e74bfc6a91691a7fa2" compoundref="usrp__basic_8cc" startline="557" endline="582">common_set_pga</referencedby>
        <referencedby refid="classusrp__basic__rx_1a2089bd929d76f28a620fc66726b525f4" compoundref="usrp__basic_8cc" startline="1052" endline="1055">usrp_basic_rx::pga_max</referencedby>
        <referencedby refid="classusrp__basic__tx_1ac451445ef6cffdffb9e7817c3885f367" compoundref="usrp__basic_8cc" startline="1459" endline="1462">usrp_basic_tx::pga_max</referencedby>
      </memberdef>
      <memberdef kind="function" id="classusrp__basic_1a06cfd0e5675618f773c5466bd235a369" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double usrp_basic::common_pga_db_per_step</definition>
        <argsstring>(txrx_t txrx) const </argsstring>
        <name>common_pga_db_per_step</name>
        <param>
          <type><ref refid="usrp__basic_8h_1a62f19b5a3751ce085242fa46f8761f71" kindref="member">txrx_t</ref></type>
          <declname>txrx</declname>
        </param>
        <briefdescription>
<para>Return hardware step size of PGA(linear in dB). </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>txrx</parametername>
</parameternamelist>
<parameterdescription>
<para>Tx or Rx? </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/me/gnuradio-3.4.0/usrp/host/include/usrp/usrp_basic.h" line="369" column="1" bodyfile="/home/me/gnuradio-3.4.0/usrp/host/lib/usrp_basic.cc" bodystart="630" bodyend="636"/>
        <references refid="usrp__basic_8h_1a62f19b5a3751ce085242fa46f8761f71a9228bc40e4bcfb1b7363f686515e1846" compoundref="usrp__basic_8h" startline="39">C_TX</references>
        <referencedby refid="classusrp__basic_1a52f96a90c91ed6e74bfc6a91691a7fa2" compoundref="usrp__basic_8cc" startline="557" endline="582">common_set_pga</referencedby>
        <referencedby refid="classusrp__basic__rx_1a7c570ad5c2cb879f1b9f2073117ecf51" compoundref="usrp__basic_8cc" startline="1058" endline="1061">usrp_basic_rx::pga_db_per_step</referencedby>
        <referencedby refid="classusrp__basic__tx_1ac8f1b5ab8940fba58fe01d64727deb40" compoundref="usrp__basic_8cc" startline="1465" endline="1468">usrp_basic_tx::pga_db_per_step</referencedby>
      </memberdef>
      <memberdef kind="function" id="classusrp__basic_1a09ce78134eea035e42464123356096e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool usrp_basic::_common_write_oe</definition>
        <argsstring>(txrx_t txrx, int which_side, int value, int mask)</argsstring>
        <name>_common_write_oe</name>
        <param>
          <type><ref refid="usrp__basic_8h_1a62f19b5a3751ce085242fa46f8761f71" kindref="member">txrx_t</ref></type>
          <declname>txrx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>which_side</declname>
        </param>
        <param>
          <type>int</type>
          <declname>value</declname>
        </param>
        <param>
          <type>int</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Write direction register(output enables) for pins that go to daughterboard. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>txrx</parametername>
</parameternamelist>
<parameterdescription>
<para>Tx or Rx? </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>which_side</parametername>
</parameternamelist>
<parameterdescription>
<para>[0,1] which size </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>value to write into register </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mask</parametername>
</parameternamelist>
<parameterdescription>
<para>which bits of value to write into reg</para></parameterdescription>
</parameteritem>
</parameterlist>
Each d&apos;board has 16-bits of general purpose i/o. Setting the bit makes it an output from the FPGA to the d&apos;board.</para><para>This register is initialized based on a value stored in the d&apos;board EEPROM. In general, you shouldn&apos;t be using this routine without a very good reason. Using this method incorrectly will kill your USRP motherboard and/or daughterboard. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/me/gnuradio-3.4.0/usrp/host/include/usrp/usrp_basic.h" line="387" column="1" bodyfile="/home/me/gnuradio-3.4.0/usrp/host/lib/usrp_basic.cc" bodystart="639" bodyend="646"/>
        <references refid="classusrp__basic_1ac5bdb9be69f27eb3a0530cba9536d0f4" compoundref="usrp__basic_8cc" startline="380" endline="391">_write_fpga_reg</references>
        <referencedby refid="classusrp__basic__rx_1a83f39a101787d86a0850e72499286c00" compoundref="usrp__basic_8cc" startline="1064" endline="1067">usrp_basic_rx::_write_oe</referencedby>
        <referencedby refid="classusrp__basic__tx_1a0ecdfcb63c28d66b2f036156e33f20d8" compoundref="usrp__basic_8cc" startline="1471" endline="1474">usrp_basic_tx::_write_oe</referencedby>
        <referencedby refid="classxcvr2450_1ada5ef351be289341d53ff1d8b70c1d13" compoundref="db__xcvr2450_8cc" startline="397" endline="445">xcvr2450::set_gpio</referencedby>
        <referencedby refid="classxcvr2450_1a6fdaa4251e0b78a74aa3a35abca4f020" compoundref="db__xcvr2450_8cc" startline="167" endline="242">xcvr2450::xcvr2450</referencedby>
      </memberdef>
      <memberdef kind="function" id="classusrp__basic_1acf3120592af4df79d38d253c98c633ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool usrp_basic::common_write_io</definition>
        <argsstring>(txrx_t txrx, int which_side, int value, int mask)</argsstring>
        <name>common_write_io</name>
        <param>
          <type><ref refid="usrp__basic_8h_1a62f19b5a3751ce085242fa46f8761f71" kindref="member">txrx_t</ref></type>
          <declname>txrx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>which_side</declname>
        </param>
        <param>
          <type>int</type>
          <declname>value</declname>
        </param>
        <param>
          <type>int</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Write daughterboard i/o pin value. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>txrx</parametername>
</parameternamelist>
<parameterdescription>
<para>Tx or Rx? </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>which_side</parametername>
</parameternamelist>
<parameterdescription>
<para>[0,1] which d&apos;board </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>value to write into register </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mask</parametername>
</parameternamelist>
<parameterdescription>
<para>which bits of value to write into reg </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/me/gnuradio-3.4.0/usrp/host/include/usrp/usrp_basic.h" line="397" column="1" bodyfile="/home/me/gnuradio-3.4.0/usrp/host/lib/usrp_basic.cc" bodystart="649" bodyend="656"/>
        <references refid="classusrp__basic_1ac5bdb9be69f27eb3a0530cba9536d0f4" compoundref="usrp__basic_8cc" startline="380" endline="391">_write_fpga_reg</references>
        <referencedby refid="classxcvr2450_1ada5ef351be289341d53ff1d8b70c1d13" compoundref="db__xcvr2450_8cc" startline="397" endline="445">xcvr2450::set_gpio</referencedby>
        <referencedby refid="classflexrf__base__rx_1afc203def2c43ea338fa00ae95401591c" compoundref="db__flexrf_8cc" startline="406" endline="432">flexrf_base_rx::shutdown</referencedby>
        <referencedby refid="classusrp__basic__rx_1a5ab1edec410f1d5399c187cb243905a5" compoundref="usrp__basic_8cc" startline="1070" endline="1073">usrp_basic_rx::write_io</referencedby>
        <referencedby refid="classusrp__basic__tx_1a19a1a1db062ac7d3d4625c95770353ff" compoundref="usrp__basic_8cc" startline="1477" endline="1480">usrp_basic_tx::write_io</referencedby>
        <referencedby refid="classxcvr2450_1a6fdaa4251e0b78a74aa3a35abca4f020" compoundref="db__xcvr2450_8cc" startline="167" endline="242">xcvr2450::xcvr2450</referencedby>
      </memberdef>
      <memberdef kind="function" id="classusrp__basic_1af7e33b5762cd9c80a714806fa6fa2244" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool usrp_basic::common_read_io</definition>
        <argsstring>(txrx_t txrx, int which_side, int *value)</argsstring>
        <name>common_read_io</name>
        <param>
          <type><ref refid="usrp__basic_8h_1a62f19b5a3751ce085242fa46f8761f71" kindref="member">txrx_t</ref></type>
          <declname>txrx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>which_side</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Read daughterboard i/o pin value. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>txrx</parametername>
</parameternamelist>
<parameterdescription>
<para>Tx or Rx? </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>which_side</parametername>
</parameternamelist>
<parameterdescription>
<para>[0,1] which d&apos;board </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>output </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/me/gnuradio-3.4.0/usrp/host/include/usrp/usrp_basic.h" line="406" column="1" bodyfile="/home/me/gnuradio-3.4.0/usrp/host/lib/usrp_basic.cc" bodystart="659" bodyend="678"/>
        <references refid="classusrp__basic_1a4fa26bd8164bd5782adf7fbe00b3d411" compoundref="usrp__basic_8cc" startline="411" endline="414">_read_fpga_reg</references>
        <references refid="usrp__basic_8h_1a62f19b5a3751ce085242fa46f8761f71a9228bc40e4bcfb1b7363f686515e1846" compoundref="usrp__basic_8h" startline="39">C_TX</references>
        <referencedby refid="classusrp__basic_1a217f6865ef04d1111c2c1d3e7b4260f5" compoundref="usrp__basic_8cc" startline="681" endline="687">common_read_io</referencedby>
        <referencedby refid="classusrp__basic__rx_1a275d14df1506faa570fd5cc231a14ee9" compoundref="usrp__basic_8cc" startline="1076" endline="1079">usrp_basic_rx::read_io</referencedby>
        <referencedby refid="classusrp__basic__tx_1ad5b21bcc2798026f5a1555e9ca4c899f" compoundref="usrp__basic_8cc" startline="1483" endline="1486">usrp_basic_tx::read_io</referencedby>
      </memberdef>
      <memberdef kind="function" id="classusrp__basic_1a217f6865ef04d1111c2c1d3e7b4260f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int usrp_basic::common_read_io</definition>
        <argsstring>(txrx_t txrx, int which_side)</argsstring>
        <name>common_read_io</name>
        <param>
          <type><ref refid="usrp__basic_8h_1a62f19b5a3751ce085242fa46f8761f71" kindref="member">txrx_t</ref></type>
          <declname>txrx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>which_side</declname>
        </param>
        <briefdescription>
<para>Read daughterboard i/o pin value. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>txrx</parametername>
</parameternamelist>
<parameterdescription>
<para>Tx or Rx? </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>which_side</parametername>
</parameternamelist>
<parameterdescription>
<para>[0,1] which d&apos;board </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>register value if successful, else READ_FAILED </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/me/gnuradio-3.4.0/usrp/host/include/usrp/usrp_basic.h" line="415" column="1" bodyfile="/home/me/gnuradio-3.4.0/usrp/host/lib/usrp_basic.cc" bodystart="681" bodyend="687"/>
        <references refid="classusrp__basic_1af7e33b5762cd9c80a714806fa6fa2244" compoundref="usrp__basic_8cc" startline="659" endline="678">common_read_io</references>
        <references refid="classusrp__basic_1a364d3e56a0749a90cc5de2ac378e6863" compoundref="usrp__basic_8h" startline="202">READ_FAILED</references>
      </memberdef>
      <memberdef kind="function" id="classusrp__basic_1ad673bc49b311e29ab01727c5933ea028" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool usrp_basic::common_write_refclk</definition>
        <argsstring>(txrx_t txrx, int which_side, int value)</argsstring>
        <name>common_write_refclk</name>
        <param>
          <type><ref refid="usrp__basic_8h_1a62f19b5a3751ce085242fa46f8761f71" kindref="member">txrx_t</ref></type>
          <declname>txrx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>which_side</declname>
        </param>
        <param>
          <type>int</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Write daughterboard refclk config register. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>txrx</parametername>
</parameternamelist>
<parameterdescription>
<para>Tx or Rx? </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>which_side</parametername>
</parameternamelist>
<parameterdescription>
<para>[0,1] which d&apos;board </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>value to write into register, see below</para></parameterdescription>
</parameteritem>
</parameterlist>
<preformatted>
Control whether a reference clock is sent to the daughterboards,
and what frequency.  The refclk is sent on d&apos;board i/o pin 0.
<verbatim>3                   2                   1                       
</verbatim>
  1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0
 +--------------------------------------------<mdash/>+-+---------<mdash/>+
 |             Reserved (Must be zero)           |E|   DIVISOR  |
 +--------------------------------------------<mdash/>+-+---------<mdash/>+</preformatted></para><para><preformatted> Bit 7  <ndash/> 1 turns on refclk, 0 allows IO use
 Bits 6:0 Divider value
</preformatted> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/me/gnuradio-3.4.0/usrp/host/include/usrp/usrp_basic.h" line="438" column="1" bodyfile="/home/me/gnuradio-3.4.0/usrp/host/lib/usrp_basic.cc" bodystart="690" bodyend="697"/>
        <references refid="classusrp__basic_1ac5bdb9be69f27eb3a0530cba9536d0f4" compoundref="usrp__basic_8cc" startline="380" endline="391">_write_fpga_reg</references>
        <referencedby refid="classusrp__basic__rx_1ac6c7387f1bf488ee22c79be22e3f48dd" compoundref="usrp__basic_8cc" startline="1088" endline="1091">usrp_basic_rx::write_refclk</referencedby>
        <referencedby refid="classusrp__basic__tx_1a6076561547b3912ea535334e6e6d4c2f" compoundref="usrp__basic_8cc" startline="1495" endline="1498">usrp_basic_tx::write_refclk</referencedby>
      </memberdef>
      <memberdef kind="function" id="classusrp__basic_1a0997e93568c71e5432c2445b1ebcc991" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool usrp_basic::common_write_atr_mask</definition>
        <argsstring>(txrx_t txrx, int which_side, int value)</argsstring>
        <name>common_write_atr_mask</name>
        <param>
          <type><ref refid="usrp__basic_8h_1a62f19b5a3751ce085242fa46f8761f71" kindref="member">txrx_t</ref></type>
          <declname>txrx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>which_side</declname>
        </param>
        <param>
          <type>int</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Automatic Transmit/Receive switching. </para>        </briefdescription>
        <detaileddescription>
<para><preformatted></preformatted></para><para><preformatted>If automatic transmit/receive (ATR) switching is enabled in the
FR_ATR_CTL register, the presence or absence of data in the FPGA
transmit fifo selects between two sets of values for each of the 4
banks of daughterboard i/o pins.</preformatted></para><para><preformatted>Each daughterboard slot has 3 16-bit registers associated with it:
  FR_ATR_MASK_*, FR_ATR_TXVAL_* and FR_ATR_RXVAL_*</preformatted></para><para><preformatted>FR_ATR_MASK_{0,1,2,3}:</preformatted></para><para><preformatted>  These registers determine which of the daugherboard i/o pins are
  affected by ATR switching.  If a bit in the mask is set, the
  corresponding i/o bit is controlled by ATR, else it&apos;s output
  value comes from the normal i/o pin output register:
  FR_IO_{0,1,2,3}.</preformatted></para><para><preformatted>FR_ATR_TXVAL_{0,1,2,3}:
FR_ATR_RXVAL_{0,1,2,3}:</preformatted></para><para><preformatted>  If the Tx fifo contains data, then the bits from TXVAL that are
  selected by MASK are output.  Otherwise, the bits from RXVAL that
  are selected by MASK are output.
</preformatted> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/me/gnuradio-3.4.0/usrp/host/include/usrp/usrp_basic.h" line="468" column="1" bodyfile="/home/me/gnuradio-3.4.0/usrp/host/lib/usrp_basic.cc" bodystart="700" bodyend="707"/>
        <references refid="classusrp__basic_1ac5bdb9be69f27eb3a0530cba9536d0f4" compoundref="usrp__basic_8cc" startline="380" endline="391">_write_fpga_reg</references>
        <referencedby refid="classxcvr2450_1ada5ef351be289341d53ff1d8b70c1d13" compoundref="db__xcvr2450_8cc" startline="397" endline="445">xcvr2450::set_gpio</referencedby>
        <referencedby refid="classusrp__basic__rx_1a0974bedf9b0406709e83e839f40e2b36" compoundref="usrp__basic_8cc" startline="1094" endline="1097">usrp_basic_rx::write_atr_mask</referencedby>
        <referencedby refid="classusrp__basic__tx_1a8cfd094ce093e5d46fcad5531ee20570" compoundref="usrp__basic_8cc" startline="1501" endline="1504">usrp_basic_tx::write_atr_mask</referencedby>
        <referencedby refid="classxcvr2450_1a6fdaa4251e0b78a74aa3a35abca4f020" compoundref="db__xcvr2450_8cc" startline="167" endline="242">xcvr2450::xcvr2450</referencedby>
      </memberdef>
      <memberdef kind="function" id="classusrp__basic_1a26e38a0f9f98390b712709812e3387af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool usrp_basic::common_write_atr_txval</definition>
        <argsstring>(txrx_t txrx, int which_side, int value)</argsstring>
        <name>common_write_atr_txval</name>
        <param>
          <type><ref refid="usrp__basic_8h_1a62f19b5a3751ce085242fa46f8761f71" kindref="member">txrx_t</ref></type>
          <declname>txrx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>which_side</declname>
        </param>
        <param>
          <type>int</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/me/gnuradio-3.4.0/usrp/host/include/usrp/usrp_basic.h" line="469" column="1" bodyfile="/home/me/gnuradio-3.4.0/usrp/host/lib/usrp_basic.cc" bodystart="710" bodyend="717"/>
        <references refid="classusrp__basic_1ac5bdb9be69f27eb3a0530cba9536d0f4" compoundref="usrp__basic_8cc" startline="380" endline="391">_write_fpga_reg</references>
        <referencedby refid="classxcvr2450_1ada5ef351be289341d53ff1d8b70c1d13" compoundref="db__xcvr2450_8cc" startline="397" endline="445">xcvr2450::set_gpio</referencedby>
        <referencedby refid="classxcvr2450_1a8b1ed01aff5a323683b1fcb926c23ab9" compoundref="db__xcvr2450_8cc" startline="251" endline="260">xcvr2450::shutdown</referencedby>
        <referencedby refid="classusrp__basic__rx_1a914e9b61a4b1441dc955b1dc9cd17742" compoundref="usrp__basic_8cc" startline="1100" endline="1103">usrp_basic_rx::write_atr_txval</referencedby>
        <referencedby refid="classusrp__basic__tx_1af4c224f2e92a07ded29fc6dedba8c2d7" compoundref="usrp__basic_8cc" startline="1507" endline="1510">usrp_basic_tx::write_atr_txval</referencedby>
        <referencedby refid="classxcvr2450_1a6fdaa4251e0b78a74aa3a35abca4f020" compoundref="db__xcvr2450_8cc" startline="167" endline="242">xcvr2450::xcvr2450</referencedby>
      </memberdef>
      <memberdef kind="function" id="classusrp__basic_1a89eda6a96bc7f4d2d634da793eccbc20" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool usrp_basic::common_write_atr_rxval</definition>
        <argsstring>(txrx_t txrx, int which_side, int value)</argsstring>
        <name>common_write_atr_rxval</name>
        <param>
          <type><ref refid="usrp__basic_8h_1a62f19b5a3751ce085242fa46f8761f71" kindref="member">txrx_t</ref></type>
          <declname>txrx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>which_side</declname>
        </param>
        <param>
          <type>int</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/me/gnuradio-3.4.0/usrp/host/include/usrp/usrp_basic.h" line="470" column="1" bodyfile="/home/me/gnuradio-3.4.0/usrp/host/lib/usrp_basic.cc" bodystart="720" bodyend="727"/>
        <references refid="classusrp__basic_1ac5bdb9be69f27eb3a0530cba9536d0f4" compoundref="usrp__basic_8cc" startline="380" endline="391">_write_fpga_reg</references>
        <referencedby refid="classxcvr2450_1ada5ef351be289341d53ff1d8b70c1d13" compoundref="db__xcvr2450_8cc" startline="397" endline="445">xcvr2450::set_gpio</referencedby>
        <referencedby refid="classxcvr2450_1a8b1ed01aff5a323683b1fcb926c23ab9" compoundref="db__xcvr2450_8cc" startline="251" endline="260">xcvr2450::shutdown</referencedby>
        <referencedby refid="classusrp__basic__rx_1a7cb8b45ce6815d3ee3c97a064a63e9ee" compoundref="usrp__basic_8cc" startline="1106" endline="1109">usrp_basic_rx::write_atr_rxval</referencedby>
        <referencedby refid="classusrp__basic__tx_1a01b222b0ba0a365db87ab74731325d5b" compoundref="usrp__basic_8cc" startline="1513" endline="1516">usrp_basic_tx::write_atr_rxval</referencedby>
        <referencedby refid="classxcvr2450_1a6fdaa4251e0b78a74aa3a35abca4f020" compoundref="db__xcvr2450_8cc" startline="167" endline="242">xcvr2450::xcvr2450</referencedby>
      </memberdef>
      <memberdef kind="function" id="classusrp__basic_1ac7354a9c4f7e961cb1b541c970a8d009" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool usrp_basic::common_write_aux_dac</definition>
        <argsstring>(txrx_t txrx, int which_side, int which_dac, int value)</argsstring>
        <name>common_write_aux_dac</name>
        <param>
          <type><ref refid="usrp__basic_8h_1a62f19b5a3751ce085242fa46f8761f71" kindref="member">txrx_t</ref></type>
          <declname>txrx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>which_side</declname>
        </param>
        <param>
          <type>int</type>
          <declname>which_dac</declname>
        </param>
        <param>
          <type>int</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Write auxiliary digital to analog converter. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>txrx</parametername>
</parameternamelist>
<parameterdescription>
<para>Tx or Rx? </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>which_side</parametername>
</parameternamelist>
<parameterdescription>
<para>[0,1] which d&apos;board N.B., SLOT_TX_A and SLOT_RX_A share the same AUX DAC&apos;s. SLOT_TX_B and SLOT_RX_B share the same AUX DAC&apos;s. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>which_dac</parametername>
</parameternamelist>
<parameterdescription>
<para>[2,3] TX slots must use only 2 and 3. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>[0,4095] </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true iff successful </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/me/gnuradio-3.4.0/usrp/host/include/usrp/usrp_basic.h" line="483" column="1" bodyfile="/home/me/gnuradio-3.4.0/usrp/host/lib/usrp_basic.cc" bodystart="730" bodyend="733"/>
        <references refid="classusrp__basic_1ab8870a35e0bdc63ee6655b5264a6d142" compoundref="usrp__basic_8cc" startline="236" endline="239">_write_aux_dac</references>
        <referencedby refid="classusrp__basic__rx_1ae5cbeedfd6df52cdc4b13c87e2521b97" compoundref="usrp__basic_8cc" startline="1112" endline="1115">usrp_basic_rx::write_aux_dac</referencedby>
        <referencedby refid="classusrp__basic__tx_1a2d3f6eda1859921bb7c0f26d2dd1163d" compoundref="usrp__basic_8cc" startline="1519" endline="1522">usrp_basic_tx::write_aux_dac</referencedby>
      </memberdef>
      <memberdef kind="function" id="classusrp__basic_1a37bd03473a98cf3776f1988914c1a5ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool usrp_basic::common_read_aux_adc</definition>
        <argsstring>(txrx_t txrx, int which_side, int which_adc, int *value)</argsstring>
        <name>common_read_aux_adc</name>
        <param>
          <type><ref refid="usrp__basic_8h_1a62f19b5a3751ce085242fa46f8761f71" kindref="member">txrx_t</ref></type>
          <declname>txrx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>which_side</declname>
        </param>
        <param>
          <type>int</type>
          <declname>which_adc</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Read auxiliary analog to digital converter. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>txrx</parametername>
</parameternamelist>
<parameterdescription>
<para>Tx or Rx? </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>which_side</parametername>
</parameternamelist>
<parameterdescription>
<para>[0,1] which d&apos;board </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>which_adc</parametername>
</parameternamelist>
<parameterdescription>
<para>[0,1] </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>return 12-bit value [0,4095] </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true iff successful </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/me/gnuradio-3.4.0/usrp/host/include/usrp/usrp_basic.h" line="494" column="1" bodyfile="/home/me/gnuradio-3.4.0/usrp/host/lib/usrp_basic.cc" bodystart="736" bodyend="739"/>
        <references refid="classusrp__basic_1a8f92d2e9630ec614eedc61858756cce1" compoundref="usrp__basic_8cc" startline="242" endline="245">_read_aux_adc</references>
        <referencedby refid="classusrp__basic__rx_1acffe1b022ad3ba669ab2131896ebafbf" compoundref="usrp__basic_8cc" startline="1118" endline="1121">usrp_basic_rx::read_aux_adc</referencedby>
        <referencedby refid="classusrp__basic__tx_1a237f04837e77f428551b6b66217f8d9b" compoundref="usrp__basic_8cc" startline="1525" endline="1528">usrp_basic_tx::read_aux_adc</referencedby>
      </memberdef>
      <memberdef kind="function" id="classusrp__basic_1ab84d66e92dc16fdc104fae9341f1e64f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int usrp_basic::common_read_aux_adc</definition>
        <argsstring>(txrx_t txrx, int which_side, int which_adc)</argsstring>
        <name>common_read_aux_adc</name>
        <param>
          <type><ref refid="usrp__basic_8h_1a62f19b5a3751ce085242fa46f8761f71" kindref="member">txrx_t</ref></type>
          <declname>txrx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>which_side</declname>
        </param>
        <param>
          <type>int</type>
          <declname>which_adc</declname>
        </param>
        <briefdescription>
<para>Read auxiliary analog to digital converter. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>txrx</parametername>
</parameternamelist>
<parameterdescription>
<para>Tx or Rx? </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>which_side</parametername>
</parameternamelist>
<parameterdescription>
<para>[0,1] which d&apos;board </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>which_adc</parametername>
</parameternamelist>
<parameterdescription>
<para>[0,1] </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>value in the range [0,4095] if successful, else READ_FAILED. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/me/gnuradio-3.4.0/usrp/host/include/usrp/usrp_basic.h" line="504" column="1" bodyfile="/home/me/gnuradio-3.4.0/usrp/host/lib/usrp_basic.cc" bodystart="742" bodyend="745"/>
        <references refid="classusrp__basic_1a8f92d2e9630ec614eedc61858756cce1" compoundref="usrp__basic_8cc" startline="242" endline="245">_read_aux_adc</references>
        <references refid="ad9862_8h_1a352d9229a931bb505d950a48814277d2" compoundref="ad9862_8h" startline="47">REG_RX_A</references>
        <references refid="ad9862_8h_1a5c07b49353ec7cbd3e89c7c651bcf4b2" compoundref="ad9862_8h" startline="48">REG_RX_B</references>
        <references refid="ad9862_8h_1a8b35b0c812c818a644f8966f21027422" compoundref="ad9862_8h" startline="64">REG_RX_DIGITAL</references>
        <references refid="ad9862_8h_1aed50e1acd0eefbf22c5a79721978b5c4" compoundref="ad9862_8h" startline="56">REG_RX_IF</references>
        <references refid="ad9862_8h_1a7839c897aec7022649f0ef0b7b6df147" compoundref="ad9862_8h" startline="51">REG_RX_MISC</references>
        <references refid="ad9862_8h_1aa0fcba5d524230a122c57078342ad852" compoundref="ad9862_8h" startline="37">REG_RX_PWR_DN</references>
        <references refid="ad9862_8h_1adbaadc89051d16191457762da66b50ad" compoundref="ad9862_8h" startline="65">RX_DIGITAL_2_CHAN</references>
        <references refid="ad9862_8h_1aea120935b5150760d867ff07205f7d83" compoundref="ad9862_8h" startline="60">RX_IF_2S_COMP</references>
        <references refid="ad9862_8h_1a86ec19d2fa84b41e91783de4206133da" compoundref="ad9862_8h" startline="58">RX_IF_USE_CLKOUT1</references>
        <references refid="ad9862_8h_1a04badee77c413edc98c2791502645ad1" compoundref="ad9862_8h" startline="54">RX_MISC_CLK_DUTY</references>
        <references refid="ad9862_8h_1a348c82f7026c109f2bbd413fc8300b7e" compoundref="ad9862_8h" startline="52">RX_MISC_HS_DUTY_CYCLE</references>
      </memberdef>
      <memberdef kind="function" id="classusrp__basic_1afdcf0497f2554589b36a57806e239a07" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool usrp_basic::set_pga</definition>
        <argsstring>(int which_amp, double gain_in_db)=0</argsstring>
        <name>set_pga</name>
        <reimplementedby refid="classusrp__basic__rx_1a85804ff6612a34c800a7181ea90de6b4">set_pga</reimplementedby>
        <reimplementedby refid="classusrp__basic__tx_1a5d950d5f8a8969e17525cee918d9bd06">set_pga</reimplementedby>
        <param>
          <type>int</type>
          <declname>which_amp</declname>
        </param>
        <param>
          <type>double</type>
          <declname>gain_in_db</declname>
        </param>
        <briefdescription>
<para>Set Programmable Gain Amplifier (PGA) </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>which_amp</parametername>
</parameternamelist>
<parameterdescription>
<para>which amp [0,3] </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>gain_in_db</parametername>
</parameternamelist>
<parameterdescription>
<para>gain value (linear in dB)</para></parameterdescription>
</parameteritem>
</parameterlist>
gain is rounded to closest setting supported by hardware.</para><para><simplesect kind="return"><para>true iff sucessful.</para></simplesect>
<simplesect kind="see"><para><ref refid="classusrp__basic_1afcab635a411c57f16820e44a83bfe259" kindref="member">pga_min()</ref>, <ref refid="classusrp__basic_1ae6a0027c59862dcc2d4da73d50b6a598" kindref="member">pga_max()</ref>, <ref refid="classusrp__basic_1ae67abb570f10f1216c001f2409fe3331" kindref="member">pga_db_per_step()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/me/gnuradio-3.4.0/usrp/host/include/usrp/usrp_basic.h" line="522" column="1"/>
        <referencedby refid="classwbxng__base_1a98f8ea722f6146dca866306d68bb9fed" compoundref="db__wbxng_8cc" startline="129" endline="140">wbxng_base::_set_pga</referencedby>
        <referencedby refid="classflexrf__base_1a200870dd8643ad072067c7bdbdf5568d" compoundref="db__flexrf_8cc" startline="216" endline="227">flexrf_base::_set_pga</referencedby>
        <referencedby refid="classusrp__basic__rx_1a34128f4864ece7fafc011786c42b9994" compoundref="usrp__basic_8h" startline="850" endline="850">usrp_basic_rx::daughterboard_id</referencedby>
        <referencedby refid="classusrp__basic__tx_1a25ef6153080bcd83637c87df6ea1d478" compoundref="usrp__basic_8h" startline="965" endline="965">usrp_basic_tx::daughterboard_id</referencedby>
        <referencedby refid="classdb__dtt754_1aa6e9679476c6dd1d925df24506c42a7b" compoundref="db__dtt754_8cc" startline="274" endline="284">db_dtt754::set_bw</referencedby>
        <referencedby refid="classdb__dtt768_1aec00134aa18ddbe0f8b3fd8a3b950a9b" compoundref="db__dtt768_8cc" startline="247" endline="257">db_dtt768::set_bw</referencedby>
        <referencedby refid="classdb__dbs__rx_1a99fd704247a94997cc81b4c998feff64" compoundref="db__dbs__rx_8cc" startline="159" endline="199">db_dbs_rx::set_bw</referencedby>
        <referencedby refid="classdb__basic__tx_1a42ee65ad9d8092dc4134b9a1d46c6bf7" compoundref="db__basic_8cc" startline="92" endline="102">db_basic_tx::set_gain</referencedby>
        <referencedby refid="classdb__basic__rx_1a9f5e21b5284778d5d124a22da6e3cb1f" compoundref="db__basic_8cc" startline="186" endline="194">db_basic_rx::set_gain</referencedby>
        <referencedby refid="classdb__bitshark__rx_1a2d833936b1fd09b1278c46c02e64db5f" compoundref="db__bitshark__rx_8cc" startline="158" endline="161">db_bitshark_rx::~db_bitshark_rx</referencedby>
        <referencedby refid="classdb__tv__rx_1abe6bd97cdb36e7635933568b5453130a" compoundref="db__tv__rx_8cc" startline="106" endline="108">db_tv_rx::~db_tv_rx</referencedby>
      </memberdef>
      <memberdef kind="function" id="classusrp__basic_1a731389d216c7232020041f7cecd3d581" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>double</type>
        <definition>virtual double usrp_basic::pga</definition>
        <argsstring>(int which_amp) const =0</argsstring>
        <name>pga</name>
        <reimplementedby refid="classusrp__basic__rx_1a982d36d1f8d64a5bb2604cf04caa22d4">pga</reimplementedby>
        <reimplementedby refid="classusrp__basic__tx_1aa7764a14b980820287ebe3d50a303fbd">pga</reimplementedby>
        <param>
          <type>int</type>
          <declname>which_amp</declname>
        </param>
        <briefdescription>
<para>Return programmable gain amplifier gain setting in dB. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>which_amp</parametername>
</parameternamelist>
<parameterdescription>
<para>which amp [0,3] </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/me/gnuradio-3.4.0/usrp/host/include/usrp/usrp_basic.h" line="529" column="1"/>
        <referencedby refid="classusrp__basic__rx_1a34128f4864ece7fafc011786c42b9994" compoundref="usrp__basic_8h" startline="850" endline="850">usrp_basic_rx::daughterboard_id</referencedby>
        <referencedby refid="classusrp__basic__tx_1a25ef6153080bcd83637c87df6ea1d478" compoundref="usrp__basic_8h" startline="965" endline="965">usrp_basic_tx::daughterboard_id</referencedby>
      </memberdef>
      <memberdef kind="function" id="classusrp__basic_1afcab635a411c57f16820e44a83bfe259" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>double</type>
        <definition>virtual double usrp_basic::pga_min</definition>
        <argsstring>() const =0</argsstring>
        <name>pga_min</name>
        <reimplementedby refid="classusrp__basic__rx_1a984a57196c26958e2927667ab3abe4cf">pga_min</reimplementedby>
        <reimplementedby refid="classusrp__basic__tx_1a7cae37094ad8d1a0095fc058649829d0">pga_min</reimplementedby>
        <briefdescription>
<para>Return minimum legal PGA gain in dB. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/me/gnuradio-3.4.0/usrp/host/include/usrp/usrp_basic.h" line="534" column="1"/>
        <referencedby refid="classusrp__basic_1ac25d56e74572309a87397f0fce1a102b" compoundref="usrp__basic_8cc" startline="585" endline="609">common_pga</referencedby>
        <referencedby refid="classusrp__basic__rx_1a34128f4864ece7fafc011786c42b9994" compoundref="usrp__basic_8h" startline="850" endline="850">usrp_basic_rx::daughterboard_id</referencedby>
        <referencedby refid="classusrp__basic__tx_1a25ef6153080bcd83637c87df6ea1d478" compoundref="usrp__basic_8h" startline="965" endline="965">usrp_basic_tx::daughterboard_id</referencedby>
        <referencedby refid="classdb__basic__tx_1a7c0d95c9d9cc3df8b145dd26785f08f6" compoundref="db__basic_8cc" startline="74" endline="77">db_basic_tx::gain_min</referencedby>
        <referencedby refid="classdb__basic__rx_1ab5aa4b36e059b11f886b44f1f1f57610" compoundref="db__basic_8cc" startline="168" endline="171">db_basic_rx::gain_min</referencedby>
        <referencedby refid="classdb__wbxng__rx_1a2c116e2717bd6dc48506c8b6f14d84ac" compoundref="db__wbxng_8cc" startline="517" endline="520">db_wbxng_rx::gain_min</referencedby>
        <referencedby refid="classdb__flexrf__2200__rx_1aa82368c82cdce77b7decefb464432429" compoundref="db__flexrf_8cc" startline="881" endline="884">db_flexrf_2200_rx::gain_min</referencedby>
        <referencedby refid="classdb__flexrf__2400__rx_1a9cd2ffbf157af774e4194773a2e174fb" compoundref="db__flexrf_8cc" startline="947" endline="950">db_flexrf_2400_rx::gain_min</referencedby>
        <referencedby refid="classdb__flexrf__1200__rx_1a4bba16d730980863eaf8cb67a77b2d2a" compoundref="db__flexrf_8cc" startline="1015" endline="1018">db_flexrf_1200_rx::gain_min</referencedby>
        <referencedby refid="classdb__flexrf__1800__rx_1a6470ffeb8d829529ec44dc7d9292f52c" compoundref="db__flexrf_8cc" startline="1083" endline="1086">db_flexrf_1800_rx::gain_min</referencedby>
        <referencedby refid="classdb__flexrf__900__rx_1a30ad09367074b8d2c02fcd3a2cd12c65" compoundref="db__flexrf_8cc" startline="1149" endline="1152">db_flexrf_900_rx::gain_min</referencedby>
        <referencedby refid="classdb__flexrf__400__rx_1a5878620b1b7a9daaad40bf222c3c324c" compoundref="db__flexrf_8cc" startline="1215" endline="1218">db_flexrf_400_rx::gain_min</referencedby>
      </memberdef>
      <memberdef kind="function" id="classusrp__basic_1ae6a0027c59862dcc2d4da73d50b6a598" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>double</type>
        <definition>virtual double usrp_basic::pga_max</definition>
        <argsstring>() const =0</argsstring>
        <name>pga_max</name>
        <reimplementedby refid="classusrp__basic__rx_1a2089bd929d76f28a620fc66726b525f4">pga_max</reimplementedby>
        <reimplementedby refid="classusrp__basic__tx_1ac451445ef6cffdffb9e7817c3885f367">pga_max</reimplementedby>
        <briefdescription>
<para>Return maximum legal PGA gain in dB. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/me/gnuradio-3.4.0/usrp/host/include/usrp/usrp_basic.h" line="539" column="1"/>
        <referencedby refid="classusrp__basic__rx_1a34128f4864ece7fafc011786c42b9994" compoundref="usrp__basic_8h" startline="850" endline="850">usrp_basic_rx::daughterboard_id</referencedby>
        <referencedby refid="classusrp__basic__tx_1a25ef6153080bcd83637c87df6ea1d478" compoundref="usrp__basic_8h" startline="965" endline="965">usrp_basic_tx::daughterboard_id</referencedby>
        <referencedby refid="classdb__basic__tx_1ad3aa9e1b4736dd31461a1a68fb821fae" compoundref="db__basic_8cc" startline="80" endline="83">db_basic_tx::gain_max</referencedby>
        <referencedby refid="classdb__basic__rx_1aabf66f2516d95c5699efd2db993fe4d5" compoundref="db__basic_8cc" startline="174" endline="177">db_basic_rx::gain_max</referencedby>
        <referencedby refid="classflexrf__base__tx_1a8de317c574ceb426ba13d4f73a08c02d" compoundref="db__flexrf_8cc" startline="346" endline="349">flexrf_base_tx::gain_max</referencedby>
        <referencedby refid="classdb__wbxng__rx_1a3e14d62b70c3f8f88a7daa85d025e58b" compoundref="db__wbxng_8cc" startline="523" endline="526">db_wbxng_rx::gain_max</referencedby>
        <referencedby refid="classdb__flexrf__2200__rx_1aa17e8f9d37bdcbb33f9fc513b35966d1" compoundref="db__flexrf_8cc" startline="887" endline="890">db_flexrf_2200_rx::gain_max</referencedby>
        <referencedby refid="classdb__flexrf__2400__rx_1a25ea0c7495b1336a71e543e546b6cc43" compoundref="db__flexrf_8cc" startline="953" endline="956">db_flexrf_2400_rx::gain_max</referencedby>
        <referencedby refid="classdb__flexrf__1200__rx_1a692351f555baf66053f271e538c1010b" compoundref="db__flexrf_8cc" startline="1021" endline="1024">db_flexrf_1200_rx::gain_max</referencedby>
        <referencedby refid="classdb__flexrf__1800__rx_1a503d62ead7515cf182eca2553a081d12" compoundref="db__flexrf_8cc" startline="1089" endline="1092">db_flexrf_1800_rx::gain_max</referencedby>
        <referencedby refid="classdb__flexrf__900__rx_1a737fb111ef70ade8c4327cd4722caa98" compoundref="db__flexrf_8cc" startline="1155" endline="1158">db_flexrf_900_rx::gain_max</referencedby>
        <referencedby refid="classdb__flexrf__400__rx_1a6909930eca017abac077b14062a04c91" compoundref="db__flexrf_8cc" startline="1221" endline="1224">db_flexrf_400_rx::gain_max</referencedby>
        <referencedby refid="classflexrf__base__tx_1ac7ff81bcbc594530a22ad7862a263c56" compoundref="db__flexrf_8cc" startline="340" endline="343">flexrf_base_tx::gain_min</referencedby>
        <referencedby refid="classdb__wbxng__rx_1a595900e96c84910c1596197a3534cba4" compoundref="db__wbxng_8cc" startline="479" endline="505">db_wbxng_rx::set_gain</referencedby>
        <referencedby refid="classflexrf__base__rx_1adf868f5dabdd1014824c731a5a2cd8ec" compoundref="db__flexrf_8cc" startline="494" endline="530">flexrf_base_rx::set_gain</referencedby>
      </memberdef>
      <memberdef kind="function" id="classusrp__basic_1ae67abb570f10f1216c001f2409fe3331" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>double</type>
        <definition>virtual double usrp_basic::pga_db_per_step</definition>
        <argsstring>() const =0</argsstring>
        <name>pga_db_per_step</name>
        <reimplementedby refid="classusrp__basic__rx_1a7c570ad5c2cb879f1b9f2073117ecf51">pga_db_per_step</reimplementedby>
        <reimplementedby refid="classusrp__basic__tx_1ac8f1b5ab8940fba58fe01d64727deb40">pga_db_per_step</reimplementedby>
        <briefdescription>
<para>Return hardware step size of PGA (linear in dB). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/me/gnuradio-3.4.0/usrp/host/include/usrp/usrp_basic.h" line="544" column="1"/>
        <referencedby refid="classusrp__basic_1ac25d56e74572309a87397f0fce1a102b" compoundref="usrp__basic_8cc" startline="585" endline="609">common_pga</referencedby>
        <referencedby refid="classusrp__basic__rx_1a34128f4864ece7fafc011786c42b9994" compoundref="usrp__basic_8h" startline="850" endline="850">usrp_basic_rx::daughterboard_id</referencedby>
        <referencedby refid="classusrp__basic__tx_1a25ef6153080bcd83637c87df6ea1d478" compoundref="usrp__basic_8h" startline="965" endline="965">usrp_basic_tx::daughterboard_id</referencedby>
        <referencedby refid="classdb__basic__tx_1afbdf85ff00ab18986d630ce310dff016" compoundref="db__basic_8cc" startline="86" endline="89">db_basic_tx::gain_db_per_step</referencedby>
        <referencedby refid="classdb__basic__rx_1a8adce7c51695647ff2554ba9026514b1" compoundref="db__basic_8cc" startline="180" endline="183">db_basic_rx::gain_db_per_step</referencedby>
      </memberdef>
      <memberdef kind="function" id="classusrp__basic_1ac540c04b719f1ce30426ecb2214107ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool usrp_basic::_write_oe</definition>
        <argsstring>(int which_side, int value, int mask)=0</argsstring>
        <name>_write_oe</name>
        <reimplementedby refid="classusrp__basic__rx_1a83f39a101787d86a0850e72499286c00">_write_oe</reimplementedby>
        <reimplementedby refid="classusrp__basic__tx_1a0ecdfcb63c28d66b2f036156e33f20d8">_write_oe</reimplementedby>
        <param>
          <type>int</type>
          <declname>which_side</declname>
        </param>
        <param>
          <type>int</type>
          <declname>value</declname>
        </param>
        <param>
          <type>int</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Write direction register (output enables) for pins that go to daughterboard. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>which_side</parametername>
</parameternamelist>
<parameterdescription>
<para>[0,1] which size </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>value to write into register </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mask</parametername>
</parameternamelist>
<parameterdescription>
<para>which bits of value to write into reg</para></parameterdescription>
</parameteritem>
</parameterlist>
Each d&apos;board has 16-bits of general purpose i/o. Setting the bit makes it an output from the FPGA to the d&apos;board.</para><para>This register is initialized based on a value stored in the d&apos;board EEPROM. In general, you shouldn&apos;t be using this routine without a very good reason. Using this method incorrectly will kill your USRP motherboard and/or daughterboard. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/me/gnuradio-3.4.0/usrp/host/include/usrp/usrp_basic.h" line="561" column="1"/>
        <referencedby refid="classdb__base_1a7a076785965c3252a663b762b4a25d73" compoundref="db__base_8cc" startline="222" endline="235">db_base::_enable_refclk</referencedby>
        <referencedby refid="classusrp__basic__rx_1a34128f4864ece7fafc011786c42b9994" compoundref="usrp__basic_8h" startline="850" endline="850">usrp_basic_rx::daughterboard_id</referencedby>
        <referencedby refid="classusrp__basic__tx_1a25ef6153080bcd83637c87df6ea1d478" compoundref="usrp__basic_8h" startline="965" endline="965">usrp_basic_tx::daughterboard_id</referencedby>
        <referencedby refid="classdb__bitshark__rx_1a880c7e45bb15ba64d1dfa0d6b81c059d" compoundref="db__bitshark__rx_8cc" startline="121" endline="156">db_bitshark_rx::db_bitshark_rx</referencedby>
        <referencedby refid="classdb__dbs__rx_1a790afd3aebe133fb356734446bd1abf0" compoundref="db__dbs__rx_8cc" startline="34" endline="70">db_dbs_rx::db_dbs_rx</referencedby>
        <referencedby refid="classdb__wbxng__rx_1a9778dac1e79a6c22ab1b1933a7fc9068" compoundref="db__wbxng_8cc" startline="340" endline="383">db_wbxng_rx::db_wbxng_rx</referencedby>
        <referencedby refid="classdb__wbxng__tx_1aff7a3717c7d8f7ac53889714a189610a" compoundref="db__wbxng_8cc" startline="179" endline="214">db_wbxng_tx::db_wbxng_tx</referencedby>
        <referencedby refid="classflexrf__base_1a2aef72cd74675f352110ea881321e74b" compoundref="db__flexrf_8cc" startline="44" endline="60">flexrf_base::flexrf_base</referencedby>
        <referencedby refid="classflexrf__base__rx_1ab5d4d0369f5799e982b83eb6299ea9e5" compoundref="db__flexrf_8cc" startline="373" endline="398">flexrf_base_rx::flexrf_base_rx</referencedby>
        <referencedby refid="classflexrf__base__tx_1ac71b0a3845470a03bc7dd72667cf23ea" compoundref="db__flexrf_8cc" startline="254" endline="275">flexrf_base_tx::flexrf_base_tx</referencedby>
        <referencedby refid="classwbxng__base_1a5aff8f4f88f2aaaf00865f5776c16745" compoundref="db__wbxng_8cc" startline="52" endline="69">wbxng_base::wbxng_base</referencedby>
      </memberdef>
      <memberdef kind="function" id="classusrp__basic_1a75aca6cca672ac2deedf14fb2c04ab0e" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool usrp_basic::write_io</definition>
        <argsstring>(int which_side, int value, int mask)=0</argsstring>
        <name>write_io</name>
        <reimplementedby refid="classusrp__basic__rx_1a5ab1edec410f1d5399c187cb243905a5">write_io</reimplementedby>
        <reimplementedby refid="classusrp__basic__tx_1a19a1a1db062ac7d3d4625c95770353ff">write_io</reimplementedby>
        <param>
          <type>int</type>
          <declname>which_side</declname>
        </param>
        <param>
          <type>int</type>
          <declname>value</declname>
        </param>
        <param>
          <type>int</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Write daughterboard i/o pin value. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>which_side</parametername>
</parameternamelist>
<parameterdescription>
<para>[0,1] which d&apos;board </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>value to write into register </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mask</parametername>
</parameternamelist>
<parameterdescription>
<para>which bits of value to write into reg </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/me/gnuradio-3.4.0/usrp/host/include/usrp/usrp_basic.h" line="570" column="1"/>
        <referencedby refid="classdb__wbxng__rx_1a28ad8d2be4101e0c2616beda249a5acf" compoundref="db__wbxng_8cc" startline="508" endline="514">db_wbxng_rx::_set_attn</referencedby>
        <referencedby refid="classusrp__basic__rx_1a34128f4864ece7fafc011786c42b9994" compoundref="usrp__basic_8h" startline="850" endline="850">usrp_basic_rx::daughterboard_id</referencedby>
        <referencedby refid="classusrp__basic__tx_1a25ef6153080bcd83637c87df6ea1d478" compoundref="usrp__basic_8h" startline="965" endline="965">usrp_basic_tx::daughterboard_id</referencedby>
        <referencedby refid="classdb__wbxng__rx_1a9778dac1e79a6c22ab1b1933a7fc9068" compoundref="db__wbxng_8cc" startline="340" endline="383">db_wbxng_rx::db_wbxng_rx</referencedby>
        <referencedby refid="classdb__wbxng__tx_1aff7a3717c7d8f7ac53889714a189610a" compoundref="db__wbxng_8cc" startline="179" endline="214">db_wbxng_tx::db_wbxng_tx</referencedby>
        <referencedby refid="classflexrf__base__rx_1ab5d4d0369f5799e982b83eb6299ea9e5" compoundref="db__flexrf_8cc" startline="373" endline="398">flexrf_base_rx::flexrf_base_rx</referencedby>
        <referencedby refid="classflexrf__base__tx_1ac71b0a3845470a03bc7dd72667cf23ea" compoundref="db__flexrf_8cc" startline="254" endline="275">flexrf_base_tx::flexrf_base_tx</referencedby>
        <referencedby refid="classdb__wbxng__rx_1aee4e97531ff30353c15444aa72c77948" compoundref="db__wbxng_8cc" startline="437" endline="454">db_wbxng_rx::select_rx_antenna</referencedby>
        <referencedby refid="classflexrf__base__rx_1a3c3c6dd1ca47bee08a251e6c19d7ead9" compoundref="db__flexrf_8cc" startline="452" endline="470">flexrf_base_rx::select_rx_antenna</referencedby>
        <referencedby refid="classdb__wbxng__tx_1a93f7d0d939d9e5e6ee3f03fa1d907e66" compoundref="db__wbxng_8cc" startline="263" endline="282">db_wbxng_tx::set_enable</referencedby>
        <referencedby refid="classflexrf__base__tx_1ab49f99f5f41b7066a8a06a34f5efbdd5" compoundref="db__flexrf_8cc" startline="322" endline="337">flexrf_base_tx::set_enable</referencedby>
        <referencedby refid="classdb__wbxng__tx_1ab4d1a667a20dbdc3699013e932e7bf1e" compoundref="db__wbxng_8cc" startline="222" endline="243">db_wbxng_tx::shutdown</referencedby>
        <referencedby refid="classflexrf__base__tx_1ae751608de601b11c0c067f4e0ce654bc" compoundref="db__flexrf_8cc" startline="284" endline="302">flexrf_base_tx::shutdown</referencedby>
        <referencedby refid="classdb__wbxng__rx_1ab45fea965789fa0da8125ca2df198e46" compoundref="db__wbxng_8cc" startline="391" endline="417">db_wbxng_rx::shutdown</referencedby>
      </memberdef>
      <memberdef kind="function" id="classusrp__basic_1ad443caee9815e7c69a8b39a29cf8846a" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool usrp_basic::read_io</definition>
        <argsstring>(int which_side, int *value)=0</argsstring>
        <name>read_io</name>
        <reimplementedby refid="classusrp__basic__rx_1a275d14df1506faa570fd5cc231a14ee9">read_io</reimplementedby>
        <reimplementedby refid="classusrp__basic__tx_1ad5b21bcc2798026f5a1555e9ca4c899f">read_io</reimplementedby>
        <param>
          <type>int</type>
          <declname>which_side</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Read daughterboard i/o pin value. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>which_side</parametername>
</parameternamelist>
<parameterdescription>
<para>[0,1] which d&apos;board </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>output </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/me/gnuradio-3.4.0/usrp/host/include/usrp/usrp_basic.h" line="578" column="1"/>
        <referencedby refid="classwbxng__base_1a1bc680a65ad2272582c1764e1aff37dd" compoundref="db__wbxng_8cc" startline="166" endline="169">wbxng_base::_get_locked</referencedby>
        <referencedby refid="classusrp__basic__rx_1a34128f4864ece7fafc011786c42b9994" compoundref="usrp__basic_8h" startline="850" endline="850">usrp_basic_rx::daughterboard_id</referencedby>
        <referencedby refid="classusrp__basic__tx_1a25ef6153080bcd83637c87df6ea1d478" compoundref="usrp__basic_8h" startline="965" endline="965">usrp_basic_tx::daughterboard_id</referencedby>
      </memberdef>
      <memberdef kind="function" id="classusrp__basic_1a166feedb83f6425d3bbbbf65f29bf42c" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>int</type>
        <definition>virtual int usrp_basic::read_io</definition>
        <argsstring>(int which_side)=0</argsstring>
        <name>read_io</name>
        <reimplementedby refid="classusrp__basic__rx_1a67b0c263712cd5bd56f48e6bd8754bc6">read_io</reimplementedby>
        <reimplementedby refid="classusrp__basic__tx_1a98999c00a4d121c09a234b23c63d8b42">read_io</reimplementedby>
        <param>
          <type>int</type>
          <declname>which_side</declname>
        </param>
        <briefdescription>
<para>Read daughterboard i/o pin value. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>which_side</parametername>
</parameternamelist>
<parameterdescription>
<para>[0,1] which d&apos;board </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>register value if successful, else READ_FAILED </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/me/gnuradio-3.4.0/usrp/host/include/usrp/usrp_basic.h" line="586" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classusrp__basic_1a80a4f8800742b6b06ec6f1908a448fc8" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool usrp_basic::write_refclk</definition>
        <argsstring>(int which_side, int value)=0</argsstring>
        <name>write_refclk</name>
        <reimplementedby refid="classusrp__basic__rx_1ac6c7387f1bf488ee22c79be22e3f48dd">write_refclk</reimplementedby>
        <reimplementedby refid="classusrp__basic__tx_1a6076561547b3912ea535334e6e6d4c2f">write_refclk</reimplementedby>
        <param>
          <type>int</type>
          <declname>which_side</declname>
        </param>
        <param>
          <type>int</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Write daughterboard refclk config register. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>which_side</parametername>
</parameternamelist>
<parameterdescription>
<para>[0,1] which d&apos;board </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>value to write into register, see below</para></parameterdescription>
</parameteritem>
</parameterlist>
<preformatted>
Control whether a reference clock is sent to the daughterboards,
and what frequency.  The refclk is sent on d&apos;board i/o pin 0.
<verbatim>3                   2                   1                       
</verbatim>
  1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0
 +--------------------------------------------<mdash/>+-+---------<mdash/>+
 |             Reserved (Must be zero)           |E|   DIVISOR  |
 +--------------------------------------------<mdash/>+-+---------<mdash/>+</preformatted></para><para><preformatted> Bit 7  <ndash/> 1 turns on refclk, 0 allows IO use
 Bits 6:0 Divider value
</preformatted> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/me/gnuradio-3.4.0/usrp/host/include/usrp/usrp_basic.h" line="608" column="1"/>
        <referencedby refid="classdb__base_1a7a076785965c3252a663b762b4a25d73" compoundref="db__base_8cc" startline="222" endline="235">db_base::_enable_refclk</referencedby>
        <referencedby refid="classusrp__basic__rx_1a34128f4864ece7fafc011786c42b9994" compoundref="usrp__basic_8h" startline="850" endline="850">usrp_basic_rx::daughterboard_id</referencedby>
        <referencedby refid="classusrp__basic__tx_1a25ef6153080bcd83637c87df6ea1d478" compoundref="usrp__basic_8h" startline="965" endline="965">usrp_basic_tx::daughterboard_id</referencedby>
      </memberdef>
      <memberdef kind="function" id="classusrp__basic_1a49074783b3757b6af17ddf8e8f56be6c" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool usrp_basic::write_atr_mask</definition>
        <argsstring>(int which_side, int value)=0</argsstring>
        <name>write_atr_mask</name>
        <reimplementedby refid="classusrp__basic__rx_1a0974bedf9b0406709e83e839f40e2b36">write_atr_mask</reimplementedby>
        <reimplementedby refid="classusrp__basic__tx_1a8cfd094ce093e5d46fcad5531ee20570">write_atr_mask</reimplementedby>
        <param>
          <type>int</type>
          <declname>which_side</declname>
        </param>
        <param>
          <type>int</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/me/gnuradio-3.4.0/usrp/host/include/usrp/usrp_basic.h" line="610" column="1"/>
        <referencedby refid="classusrp__basic__rx_1a34128f4864ece7fafc011786c42b9994" compoundref="usrp__basic_8h" startline="850" endline="850">usrp_basic_rx::daughterboard_id</referencedby>
        <referencedby refid="classusrp__basic__tx_1a25ef6153080bcd83637c87df6ea1d478" compoundref="usrp__basic_8h" startline="965" endline="965">usrp_basic_tx::daughterboard_id</referencedby>
        <referencedby refid="classdb__base_1a13d2573892b4acea9fc0f6125aaee4f2" compoundref="db__base_8cc" startline="107" endline="111">db_base::set_atr_mask</referencedby>
      </memberdef>
      <memberdef kind="function" id="classusrp__basic_1a504bf45d241c56ddf00ee07fc946207e" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool usrp_basic::write_atr_txval</definition>
        <argsstring>(int which_side, int value)=0</argsstring>
        <name>write_atr_txval</name>
        <reimplementedby refid="classusrp__basic__rx_1a914e9b61a4b1441dc955b1dc9cd17742">write_atr_txval</reimplementedby>
        <reimplementedby refid="classusrp__basic__tx_1af4c224f2e92a07ded29fc6dedba8c2d7">write_atr_txval</reimplementedby>
        <param>
          <type>int</type>
          <declname>which_side</declname>
        </param>
        <param>
          <type>int</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/me/gnuradio-3.4.0/usrp/host/include/usrp/usrp_basic.h" line="611" column="1"/>
        <referencedby refid="classusrp__basic__rx_1a34128f4864ece7fafc011786c42b9994" compoundref="usrp__basic_8h" startline="850" endline="850">usrp_basic_rx::daughterboard_id</referencedby>
        <referencedby refid="classusrp__basic__tx_1a25ef6153080bcd83637c87df6ea1d478" compoundref="usrp__basic_8h" startline="965" endline="965">usrp_basic_tx::daughterboard_id</referencedby>
        <referencedby refid="classdb__base_1a9722d03f078d1206539ad097c28a9562" compoundref="db__base_8cc" startline="114" endline="118">db_base::set_atr_txval</referencedby>
      </memberdef>
      <memberdef kind="function" id="classusrp__basic_1ae5466590dd7ec5646fefbb82d92ad899" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool usrp_basic::write_atr_rxval</definition>
        <argsstring>(int which_side, int value)=0</argsstring>
        <name>write_atr_rxval</name>
        <reimplementedby refid="classusrp__basic__rx_1a7cb8b45ce6815d3ee3c97a064a63e9ee">write_atr_rxval</reimplementedby>
        <reimplementedby refid="classusrp__basic__tx_1a01b222b0ba0a365db87ab74731325d5b">write_atr_rxval</reimplementedby>
        <param>
          <type>int</type>
          <declname>which_side</declname>
        </param>
        <param>
          <type>int</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/me/gnuradio-3.4.0/usrp/host/include/usrp/usrp_basic.h" line="612" column="1"/>
        <referencedby refid="classusrp__basic__rx_1a34128f4864ece7fafc011786c42b9994" compoundref="usrp__basic_8h" startline="850" endline="850">usrp_basic_rx::daughterboard_id</referencedby>
        <referencedby refid="classusrp__basic__tx_1a25ef6153080bcd83637c87df6ea1d478" compoundref="usrp__basic_8h" startline="965" endline="965">usrp_basic_tx::daughterboard_id</referencedby>
        <referencedby refid="classdb__base_1aa74f9ee4316672004876d1f2c81728ce" compoundref="db__base_8cc" startline="121" endline="125">db_base::set_atr_rxval</referencedby>
      </memberdef>
      <memberdef kind="function" id="classusrp__basic_1a332790fa84b6b64f82de8983b45b611a" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool usrp_basic::write_aux_dac</definition>
        <argsstring>(int which_side, int which_dac, int value)=0</argsstring>
        <name>write_aux_dac</name>
        <reimplementedby refid="classusrp__basic__rx_1ae5cbeedfd6df52cdc4b13c87e2521b97">write_aux_dac</reimplementedby>
        <reimplementedby refid="classusrp__basic__tx_1a2d3f6eda1859921bb7c0f26d2dd1163d">write_aux_dac</reimplementedby>
        <param>
          <type>int</type>
          <declname>which_side</declname>
        </param>
        <param>
          <type>int</type>
          <declname>which_dac</declname>
        </param>
        <param>
          <type>int</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Write auxiliary digital to analog converter. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>which_side</parametername>
</parameternamelist>
<parameterdescription>
<para>[0,1] which d&apos;board N.B., SLOT_TX_A and SLOT_RX_A share the same AUX DAC&apos;s. SLOT_TX_B and SLOT_RX_B share the same AUX DAC&apos;s. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>which_dac</parametername>
</parameternamelist>
<parameterdescription>
<para>[2,3] TX slots must use only 2 and 3. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>[0,4095] </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true iff successful </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/me/gnuradio-3.4.0/usrp/host/include/usrp/usrp_basic.h" line="624" column="1"/>
        <referencedby refid="classusrp__basic__rx_1a34128f4864ece7fafc011786c42b9994" compoundref="usrp__basic_8h" startline="850" endline="850">usrp_basic_rx::daughterboard_id</referencedby>
        <referencedby refid="classusrp__basic__tx_1a25ef6153080bcd83637c87df6ea1d478" compoundref="usrp__basic_8h" startline="965" endline="965">usrp_basic_tx::daughterboard_id</referencedby>
        <referencedby refid="classdb__dtt754_1aa6e9679476c6dd1d925df24506c42a7b" compoundref="db__dtt754_8cc" startline="274" endline="284">db_dtt754::set_bw</referencedby>
        <referencedby refid="classdb__dtt768_1aec00134aa18ddbe0f8b3fd8a3b950a9b" compoundref="db__dtt768_8cc" startline="247" endline="257">db_dtt768::set_bw</referencedby>
        <referencedby refid="classdb__dbs__rx_1a99fd704247a94997cc81b4c998feff64" compoundref="db__dbs__rx_8cc" startline="159" endline="199">db_dbs_rx::set_bw</referencedby>
        <referencedby refid="classdb__tv__rx_1abe6bd97cdb36e7635933568b5453130a" compoundref="db__tv__rx_8cc" startline="106" endline="108">db_tv_rx::~db_tv_rx</referencedby>
      </memberdef>
      <memberdef kind="function" id="classusrp__basic_1a7e90fb51366e9d6a8f2c844dbca2798a" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool usrp_basic::read_aux_adc</definition>
        <argsstring>(int which_side, int which_adc, int *value)=0</argsstring>
        <name>read_aux_adc</name>
        <reimplementedby refid="classusrp__basic__rx_1acffe1b022ad3ba669ab2131896ebafbf">read_aux_adc</reimplementedby>
        <reimplementedby refid="classusrp__basic__tx_1a237f04837e77f428551b6b66217f8d9b">read_aux_adc</reimplementedby>
        <param>
          <type>int</type>
          <declname>which_side</declname>
        </param>
        <param>
          <type>int</type>
          <declname>which_adc</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Read auxiliary analog to digital converter. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>which_side</parametername>
</parameternamelist>
<parameterdescription>
<para>[0,1] which d&apos;board </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>which_adc</parametername>
</parameternamelist>
<parameterdescription>
<para>[0,1] </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>return 12-bit value [0,4095] </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true iff successful </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/me/gnuradio-3.4.0/usrp/host/include/usrp/usrp_basic.h" line="634" column="1"/>
        <referencedby refid="classusrp__basic__rx_1a34128f4864ece7fafc011786c42b9994" compoundref="usrp__basic_8h" startline="850" endline="850">usrp_basic_rx::daughterboard_id</referencedby>
        <referencedby refid="classusrp__basic__tx_1a25ef6153080bcd83637c87df6ea1d478" compoundref="usrp__basic_8h" startline="965" endline="965">usrp_basic_tx::daughterboard_id</referencedby>
      </memberdef>
      <memberdef kind="function" id="classusrp__basic_1ab8b3158fe7448c951ad78bb54a06f5c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>int</type>
        <definition>virtual int usrp_basic::read_aux_adc</definition>
        <argsstring>(int which_side, int which_adc)=0</argsstring>
        <name>read_aux_adc</name>
        <reimplementedby refid="classusrp__basic__rx_1aedc2bc043ad6fed139274328a39a11be">read_aux_adc</reimplementedby>
        <reimplementedby refid="classusrp__basic__tx_1a1037a256b87c10e54e5650f80052cdc0">read_aux_adc</reimplementedby>
        <param>
          <type>int</type>
          <declname>which_side</declname>
        </param>
        <param>
          <type>int</type>
          <declname>which_adc</declname>
        </param>
        <briefdescription>
<para>Read auxiliary analog to digital converter. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>which_side</parametername>
</parameternamelist>
<parameterdescription>
<para>[0,1] which d&apos;board </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>which_adc</parametername>
</parameternamelist>
<parameterdescription>
<para>[0,1] </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>value in the range [0,4095] if successful, else READ_FAILED. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/me/gnuradio-3.4.0/usrp/host/include/usrp/usrp_basic.h" line="643" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classusrp__basic_1a1f769dc9ea28d701fa2f7da2be82325d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>int</type>
        <definition>virtual int usrp_basic::block_size</definition>
        <argsstring>() const =0</argsstring>
        <name>block_size</name>
        <reimplementedby refid="classusrp__basic__rx_1ab42bca6a45be1e18e074b494905db7db">block_size</reimplementedby>
        <reimplementedby refid="classusrp__basic__tx_1a3d88f6bddfb24f2ad375b65b935ac6e9">block_size</reimplementedby>
        <briefdescription>
<para>returns current fusb block size </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/me/gnuradio-3.4.0/usrp/host/include/usrp/usrp_basic.h" line="648" column="1"/>
        <referencedby refid="classusrp__basic__rx_1a34128f4864ece7fafc011786c42b9994" compoundref="usrp__basic_8h" startline="850" endline="850">usrp_basic_rx::daughterboard_id</referencedby>
        <referencedby refid="classusrp__basic__tx_1a25ef6153080bcd83637c87df6ea1d478" compoundref="usrp__basic_8h" startline="965" endline="965">usrp_basic_tx::daughterboard_id</referencedby>
      </memberdef>
      <memberdef kind="function" id="classusrp__basic_1a551a0912d265427e595ba826858cf3d0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>long</type>
        <definition>virtual long usrp_basic::converter_rate</definition>
        <argsstring>() const =0</argsstring>
        <name>converter_rate</name>
        <reimplementedby refid="classusrp__basic__rx_1afd14b376f2449cfb71865c9980ea2358">converter_rate</reimplementedby>
        <reimplementedby refid="classusrp__basic__tx_1a4eefc136417ea3a75a296c1b6dbbd470">converter_rate</reimplementedby>
        <briefdescription>
<para>returns A/D or D/A converter rate in Hz </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/me/gnuradio-3.4.0/usrp/host/include/usrp/usrp_basic.h" line="653" column="1"/>
        <referencedby refid="classusrp__basic__rx_1ace4aa6537246ecf948ec0ae35e1d6e48" compoundref="usrp__basic_8h" startline="849" endline="849">usrp_basic_rx::adc_rate</referencedby>
        <referencedby refid="classusrp__basic__tx_1a618be27f79f9ab769f33ead42c9283a7" compoundref="usrp__basic_8h" startline="964" endline="964">usrp_basic_tx::dac_rate</referencedby>
      </memberdef>
      <memberdef kind="function" id="classusrp__basic_1a4585f9c7df7084a6acb29bd6d7950892" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool usrp_basic::_set_led</definition>
        <argsstring>(int which_led, bool on)</argsstring>
        <name>_set_led</name>
        <param>
          <type>int</type>
          <declname>which_led</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>on</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/me/gnuradio-3.4.0/usrp/host/include/usrp/usrp_basic.h" line="662" column="1" bodyfile="/home/me/gnuradio-3.4.0/usrp/host/lib/usrp_basic.cc" bodystart="476" bodyend="479"/>
        <references refid="classusrp__basic_1aad5f6f17a9fde484c67e7dbdd0491f74" compoundref="usrp__basic_8h" startline="69">d_udh</references>
        <references refid="usrp__prims_8h_1ac856910e04aa0da0a7e1d946a268b7f2" compoundref="usrp__prims__common_8cc" startline="406" endline="411">usrp_set_led</references>
      </memberdef>
      <memberdef kind="function" id="classusrp__basic_1ac5bdb9be69f27eb3a0530cba9536d0f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool usrp_basic::_write_fpga_reg</definition>
        <argsstring>(int regno, int value)</argsstring>
        <name>_write_fpga_reg</name>
        <param>
          <type>int</type>
          <declname>regno</declname>
        </param>
        <param>
          <type>int</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Write FPGA register. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>regno</parametername>
</parameternamelist>
<parameterdescription>
<para>7-bit register number </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>32-bit value </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true iff successful </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/me/gnuradio-3.4.0/usrp/host/include/usrp/usrp_basic.h" line="670" column="1" bodyfile="/home/me/gnuradio-3.4.0/usrp/host/lib/usrp_basic.cc" bodystart="380" bodyend="391"/>
        <references refid="classusrp__basic_1af3d08c8bcdd0ed116e76ffa5449004f2" compoundref="usrp__basic_8h" startline="77">d_fpga_shadows</references>
        <references refid="classusrp__basic_1aad5f6f17a9fde484c67e7dbdd0491f74" compoundref="usrp__basic_8h" startline="69">d_udh</references>
        <references refid="classusrp__basic_1a6d0fecbe64f35fef20293c27dc33a0b0" compoundref="usrp__basic_8h" startline="73">d_verbose</references>
        <references refid="classusrp__basic_1ae9277f41b745b1c96c422804fafd058a" compoundref="usrp__basic_8h" startline="76">MAX_REGS</references>
        <references refid="usrp__prims_8h_1aaef8715cc33a0cd06fb53e76de13d1eb" compoundref="usrp__prims__common_8cc" startline="491" endline="500">usrp_write_fpga_reg</references>
        <referencedby refid="classusrp__basic_1a09ce78134eea035e42464123356096e4" compoundref="usrp__basic_8cc" startline="639" endline="646">_common_write_oe</referencedby>
        <referencedby refid="classusrp__basic_1a0997e93568c71e5432c2445b1ebcc991" compoundref="usrp__basic_8cc" startline="700" endline="707">common_write_atr_mask</referencedby>
        <referencedby refid="classusrp__basic_1a89eda6a96bc7f4d2d634da793eccbc20" compoundref="usrp__basic_8cc" startline="720" endline="727">common_write_atr_rxval</referencedby>
        <referencedby refid="classusrp__basic_1a26e38a0f9f98390b712709812e3387af" compoundref="usrp__basic_8cc" startline="710" endline="717">common_write_atr_txval</referencedby>
        <referencedby refid="classusrp__basic_1acf3120592af4df79d38d253c98c633ae" compoundref="usrp__basic_8cc" startline="649" endline="656">common_write_io</referencedby>
        <referencedby refid="classusrp__basic_1ad673bc49b311e29ab01727c5933ea028" compoundref="usrp__basic_8cc" startline="690" endline="697">common_write_refclk</referencedby>
        <referencedby refid="classusrp__standard__tx_1a24a7b471679b8e2485bfff5cce7adb96" compoundref="usrp__standard_8cc" startline="982" endline="994">usrp_standard_tx::determine_tx_mux_value</referencedby>
        <referencedby refid="classusrp__basic__rx_1a9edf0c0a2aeab58f7f12483a02dd14ee" compoundref="usrp__basic_8cc" startline="986" endline="1031">usrp_basic_rx::probe_rx_slots</referencedby>
        <referencedby refid="classusrp__basic__tx_1ac9e8934cb2136fd9c1f0bb2677991df0" compoundref="usrp__basic_8cc" startline="1393" endline="1438">usrp_basic_tx::probe_tx_slots</referencedby>
        <referencedby refid="classusrp__basic_1ad0e07c8d85aa220aaf150e27dd8b545f" compoundref="usrp__basic_8cc" startline="306" endline="312">set_adc_offset</referencedby>
        <referencedby refid="classusrp__basic_1af20cc324fca8d089226d5a6dfc3d3668" compoundref="usrp__basic_8cc" startline="371" endline="375">set_dc_offset_cl_enable</referencedby>
        <referencedby refid="classusrp__standard__rx_1a71a1352e5b799f798ea528a09f240b7d" compoundref="usrp__standard_8cc" startline="688" endline="694">usrp_standard_rx::set_ddc_phase</referencedby>
        <referencedby refid="classusrp__standard__rx_1af75a82a32f50117b4acfe518b0c31e89" compoundref="usrp__standard_8cc" startline="404" endline="428">usrp_standard_rx::set_decim_rate</referencedby>
        <referencedby refid="classusrp__standard__rx_1ad196898bb518333f3ce753905d3cfd0a" compoundref="usrp__standard_8cc" startline="715" endline="721">usrp_standard_rx::set_format</referencedby>
        <referencedby refid="classusrp__standard__rx_1aafcd5898e3cddfaacd0535a6a678aafd" compoundref="usrp__standard_8cc" startline="682" endline="685">usrp_standard_rx::set_fpga_mode</referencedby>
        <referencedby refid="classusrp__basic__rx_1aba133cd0d5c853a51beb96776e7030fc" compoundref="usrp__basic_8cc" startline="908" endline="911">usrp_basic_rx::set_fpga_rx_sample_rate_divisor</referencedby>
        <referencedby refid="classusrp__basic__tx_1a51d29f5416c2db61e74e1938aa22af72" compoundref="usrp__basic_8cc" startline="1308" endline="1311">usrp_basic_tx::set_fpga_tx_sample_rate_divisor</referencedby>
        <referencedby refid="classusrp__standard__tx_1a7b092ae2811927291ffc3491e4461282" compoundref="usrp__standard_8cc" startline="897" endline="918">usrp_standard_tx::set_interp_rate</referencedby>
        <referencedby refid="classusrp__standard__rx_1a4f3584afcc01962580cf420015d93cda" compoundref="usrp__standard_8cc" startline="650" endline="661">usrp_standard_rx::set_rx_freq</referencedby>
        <referencedby refid="classusrp__basic_1ac72f072eb9220e798019b60b3fe48af6" compoundref="usrp__basic_8cc" startline="102" endline="155">usrp_basic</referencedby>
        <referencedby refid="classusrp__basic_1ad9b95b1ca0e2616c1b3808892fdda1b0" compoundref="usrp__basic_8cc" startline="488" endline="491">write_atr_rx_delay</referencedby>
        <referencedby refid="classusrp__basic_1a70f4070830b0db3fd0c3addb97ce966e" compoundref="usrp__basic_8cc" startline="482" endline="485">write_atr_tx_delay</referencedby>
        <referencedby refid="classusrp__standard__rx_1a182048083827bf3e2efddb918677e51e" compoundref="usrp__standard_8cc" startline="530" endline="536">usrp_standard_rx::write_hw_mux_reg</referencedby>
        <referencedby refid="classusrp__standard__tx_1abd05aee7bbd18ef62bcc8dc18a11a960" compoundref="usrp__standard_8cc" startline="942" endline="948">usrp_standard_tx::write_hw_mux_reg</referencedby>
      </memberdef>
      <memberdef kind="function" id="classusrp__basic_1a4fa26bd8164bd5782adf7fbe00b3d411" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool usrp_basic::_read_fpga_reg</definition>
        <argsstring>(int regno, int *value)</argsstring>
        <name>_read_fpga_reg</name>
        <param>
          <type>int</type>
          <declname>regno</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Read FPGA register. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>regno</parametername>
</parameternamelist>
<parameterdescription>
<para>7-bit register number </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>32-bit value </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true iff successful </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/me/gnuradio-3.4.0/usrp/host/include/usrp/usrp_basic.h" line="678" column="1" bodyfile="/home/me/gnuradio-3.4.0/usrp/host/lib/usrp_basic.cc" bodystart="411" bodyend="414"/>
        <references refid="classusrp__basic_1aad5f6f17a9fde484c67e7dbdd0491f74" compoundref="usrp__basic_8h" startline="69">d_udh</references>
        <references refid="usrp__prims_8h_1a7e80adc49e58e5acb7a69b0458ac7095" compoundref="usrp__prims__common_8cc" startline="503" endline="512">usrp_read_fpga_reg</references>
        <referencedby refid="classusrp__basic_1abf1f167a1c96dd0ed4589afc6c9fad6c" compoundref="usrp__basic_8cc" startline="417" endline="423">_read_fpga_reg</referencedby>
        <referencedby refid="classusrp__basic_1af7e33b5762cd9c80a714806fa6fa2244" compoundref="usrp__basic_8cc" startline="659" endline="678">common_read_io</referencedby>
        <referencedby refid="classusrp__standard__common_1a084f39cd160734d41e6c1cb8f6513dd6" compoundref="usrp__standard_8cc" startline="260" endline="278">usrp_standard_common::usrp_standard_common</referencedby>
      </memberdef>
      <memberdef kind="function" id="classusrp__basic_1abf1f167a1c96dd0ed4589afc6c9fad6c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int usrp_basic::_read_fpga_reg</definition>
        <argsstring>(int regno)</argsstring>
        <name>_read_fpga_reg</name>
        <param>
          <type>int</type>
          <declname>regno</declname>
        </param>
        <briefdescription>
<para>Read FPGA register. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>regno</parametername>
</parameternamelist>
<parameterdescription>
<para>7-bit register number </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>register value if successful, else READ_FAILED </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/me/gnuradio-3.4.0/usrp/host/include/usrp/usrp_basic.h" line="685" column="1" bodyfile="/home/me/gnuradio-3.4.0/usrp/host/lib/usrp_basic.cc" bodystart="417" bodyend="423"/>
        <references refid="classusrp__basic_1a4fa26bd8164bd5782adf7fbe00b3d411" compoundref="usrp__basic_8cc" startline="411" endline="414">_read_fpga_reg</references>
        <references refid="classusrp__basic_1a364d3e56a0749a90cc5de2ac378e6863" compoundref="usrp__basic_8h" startline="202">READ_FAILED</references>
      </memberdef>
      <memberdef kind="function" id="classusrp__basic_1a0c200dc2d39d68d7a77e92859c5228a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool usrp_basic::_write_fpga_reg_masked</definition>
        <argsstring>(int regno, int value, int mask)</argsstring>
        <name>_write_fpga_reg_masked</name>
        <param>
          <type>int</type>
          <declname>regno</declname>
        </param>
        <param>
          <type>int</type>
          <declname>value</declname>
        </param>
        <param>
          <type>int</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Write FPGA register with mask. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>regno</parametername>
</parameternamelist>
<parameterdescription>
<para>7-bit register number </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>16-bit value </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mask</parametername>
</parameternamelist>
<parameterdescription>
<para>16-bit value </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if successful Only use this for registers who actually implement a mask in the verilog firmware, like FR_RX_MASTER_SLAVE </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/me/gnuradio-3.4.0/usrp/host/include/usrp/usrp_basic.h" line="695" column="1" bodyfile="/home/me/gnuradio-3.4.0/usrp/host/lib/usrp_basic.cc" bodystart="394" bodyend="407"/>
        <references refid="classusrp__basic_1af3d08c8bcdd0ed116e76ffa5449004f2" compoundref="usrp__basic_8h" startline="77">d_fpga_shadows</references>
        <references refid="classusrp__basic_1aad5f6f17a9fde484c67e7dbdd0491f74" compoundref="usrp__basic_8h" startline="69">d_udh</references>
        <references refid="classusrp__basic_1a6d0fecbe64f35fef20293c27dc33a0b0" compoundref="usrp__basic_8h" startline="73">d_verbose</references>
        <references refid="classusrp__basic_1ae9277f41b745b1c96c422804fafd058a" compoundref="usrp__basic_8h" startline="76">MAX_REGS</references>
        <references refid="usrp__prims_8h_1aaef8715cc33a0cd06fb53e76de13d1eb" compoundref="usrp__prims__common_8cc" startline="491" endline="500">usrp_write_fpga_reg</references>
      </memberdef>
      <memberdef kind="function" id="classusrp__basic_1a8a25444c83f59f7517d0ff687d2ff053" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool usrp_basic::_write_9862</definition>
        <argsstring>(int which_codec, int regno, unsigned char value)</argsstring>
        <name>_write_9862</name>
        <param>
          <type>int</type>
          <declname>which_codec</declname>
        </param>
        <param>
          <type>int</type>
          <declname>regno</declname>
        </param>
        <param>
          <type>unsigned char</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Write AD9862 register. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>which_codec</parametername>
</parameternamelist>
<parameterdescription>
<para>0 or 1 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>regno</parametername>
</parameternamelist>
<parameterdescription>
<para>6-bit register number </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>8-bit value </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true iff successful </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/me/gnuradio-3.4.0/usrp/host/include/usrp/usrp_basic.h" line="704" column="1" bodyfile="/home/me/gnuradio-3.4.0/usrp/host/lib/usrp_basic.cc" bodystart="426" bodyend="435"/>
        <references refid="classusrp__basic_1aad5f6f17a9fde484c67e7dbdd0491f74" compoundref="usrp__basic_8h" startline="69">d_udh</references>
        <references refid="classusrp__basic_1a6d0fecbe64f35fef20293c27dc33a0b0" compoundref="usrp__basic_8h" startline="73">d_verbose</references>
        <references refid="usrp__prims_8h_1a5038d35fe755b8a3863082371b64782e" compoundref="usrp__prims__common_8cc" startline="877" endline="892">usrp_9862_write</references>
        <referencedby refid="classusrp__basic_1a52f96a90c91ed6e74bfc6a91691a7fa2" compoundref="usrp__basic_8cc" startline="557" endline="582">common_set_pga</referencedby>
        <referencedby refid="classusrp__basic_1a97fc801cbafa85040a3d39be03d27a62" compoundref="usrp__basic_8cc" startline="338" endline="368">set_adc_buffer_bypass</referencedby>
        <referencedby refid="classusrp__basic_1ab18f4a02c0efcac10f8e9406ca7a57a7" compoundref="usrp__basic_8cc" startline="315" endline="335">set_dac_offset</referencedby>
        <referencedby refid="classusrp__standard__tx_1ae75deb35fef49d5e647b2141443d7106" compoundref="usrp__standard_8cc" startline="1018" endline="1099">usrp_standard_tx::set_tx_freq</referencedby>
      </memberdef>
      <memberdef kind="function" id="classusrp__basic_1a3814dc28edce07e3b5cb48bb3ebdf244" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool usrp_basic::_read_9862</definition>
        <argsstring>(int which_codec, int regno, unsigned char *value) const </argsstring>
        <name>_read_9862</name>
        <param>
          <type>int</type>
          <declname>which_codec</declname>
        </param>
        <param>
          <type>int</type>
          <declname>regno</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Read AD9862 register. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>which_codec</parametername>
</parameternamelist>
<parameterdescription>
<para>0 or 1 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>regno</parametername>
</parameternamelist>
<parameterdescription>
<para>6-bit register number </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>8-bit value </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true iff successful </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/me/gnuradio-3.4.0/usrp/host/include/usrp/usrp_basic.h" line="713" column="1" bodyfile="/home/me/gnuradio-3.4.0/usrp/host/lib/usrp_basic.cc" bodystart="439" bodyend="442"/>
        <references refid="classusrp__basic_1aad5f6f17a9fde484c67e7dbdd0491f74" compoundref="usrp__basic_8h" startline="69">d_udh</references>
        <references refid="usrp__prims_8h_1ab68e752026fa29aab0b24b31d440cbe3" compoundref="usrp__prims__common_8cc" startline="895" endline="902">usrp_9862_read</references>
        <referencedby refid="classusrp__basic_1ad28278c9ff7a33b3a151c561ab037b9f" compoundref="usrp__basic_8cc" startline="445" endline="451">_read_9862</referencedby>
        <referencedby refid="classusrp__basic_1ac25d56e74572309a87397f0fce1a102b" compoundref="usrp__basic_8cc" startline="585" endline="609">common_pga</referencedby>
        <referencedby refid="classusrp__basic_1a52f96a90c91ed6e74bfc6a91691a7fa2" compoundref="usrp__basic_8cc" startline="557" endline="582">common_set_pga</referencedby>
        <referencedby refid="classusrp__basic_1a97fc801cbafa85040a3d39be03d27a62" compoundref="usrp__basic_8cc" startline="338" endline="368">set_adc_buffer_bypass</referencedby>
      </memberdef>
      <memberdef kind="function" id="classusrp__basic_1ad28278c9ff7a33b3a151c561ab037b9f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int usrp_basic::_read_9862</definition>
        <argsstring>(int which_codec, int regno) const </argsstring>
        <name>_read_9862</name>
        <param>
          <type>int</type>
          <declname>which_codec</declname>
        </param>
        <param>
          <type>int</type>
          <declname>regno</declname>
        </param>
        <briefdescription>
<para>Read AD9862 register. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>which_codec</parametername>
</parameternamelist>
<parameterdescription>
<para>0 or 1 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>regno</parametername>
</parameternamelist>
<parameterdescription>
<para>6-bit register number </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>register value if successful, else READ_FAILED </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/me/gnuradio-3.4.0/usrp/host/include/usrp/usrp_basic.h" line="721" column="1" bodyfile="/home/me/gnuradio-3.4.0/usrp/host/lib/usrp_basic.cc" bodystart="445" bodyend="451"/>
        <references refid="classusrp__basic_1a3814dc28edce07e3b5cb48bb3ebdf244" compoundref="usrp__basic_8cc" startline="439" endline="442">_read_9862</references>
        <references refid="classusrp__basic_1a364d3e56a0749a90cc5de2ac378e6863" compoundref="usrp__basic_8h" startline="202">READ_FAILED</references>
      </memberdef>
      <memberdef kind="function" id="classusrp__basic_1aaf100fafc406ef75faafcf3e38df7849" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool usrp_basic::_write_spi</definition>
        <argsstring>(int optional_header, int enables, int format, std::string buf)</argsstring>
        <name>_write_spi</name>
        <param>
          <type>int</type>
          <declname>optional_header</declname>
        </param>
        <param>
          <type>int</type>
          <declname>enables</declname>
        </param>
        <param>
          <type>int</type>
          <declname>format</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>buf</declname>
        </param>
        <briefdescription>
<para>Write data to SPI bus peripheral. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>optional_header</parametername>
</parameternamelist>
<parameterdescription>
<para>0,1 or 2 bytes to write before buf. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>enables</parametername>
</parameternamelist>
<parameterdescription>
<para>bitmask of peripherals to write. See usrp_spi_defs.h </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>transaction format. See usrp_spi_defs.h SPI_FMT_* </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>the data to write </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true iff successful Writes are limited to a maximum of 64 bytes.</para></simplesect>
If <computeroutput>format</computeroutput> specifies that optional_header bytes are present, they are written to the peripheral immediately prior to writing <computeroutput>buf</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/me/gnuradio-3.4.0/usrp/host/include/usrp/usrp_basic.h" line="736" column="1" bodyfile="/home/me/gnuradio-3.4.0/usrp/host/lib/usrp_basic.cc" bodystart="454" bodyend="458"/>
        <references refid="classusrp__basic_1aad5f6f17a9fde484c67e7dbdd0491f74" compoundref="usrp__basic_8h" startline="69">d_udh</references>
        <references refid="usrp__prims_8h_1a19684ae63c0ce40110e347152742e898" compoundref="usrp__prims__common_8cc" startline="848" endline="859">usrp_spi_write</references>
        <referencedby refid="classflexrf__base_1a4da803ee0702b047ecf6f10f3d87b62b" compoundref="db__flexrf_8cc" startline="116" endline="124">flexrf_base::_write_it</referencedby>
        <referencedby refid="classwbxng__base_1a8a8d421e91573350da1369977534301f" compoundref="db__wbxng_8cc" startline="172" endline="175">wbxng_base::_write_spi</referencedby>
        <referencedby refid="classxcvr2450_1a0e66795ccbc6e66306f36f6a6b215f81" compoundref="db__xcvr2450_8cc" startline="381" endline="392">xcvr2450::send_reg</referencedby>
      </memberdef>
      <memberdef kind="function" id="classusrp__basic_1a9b54622fec87c2ed9c7808078931371f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string usrp_basic::_read_spi</definition>
        <argsstring>(int optional_header, int enables, int format, int len)</argsstring>
        <name>_read_spi</name>
        <param>
          <type>int</type>
          <declname>optional_header</declname>
        </param>
        <param>
          <type>int</type>
          <declname>enables</declname>
        </param>
        <param>
          <type>int</type>
          <declname>format</declname>
        </param>
        <param>
          <type>int</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/me/gnuradio-3.4.0/usrp/host/include/usrp/usrp_basic.h" line="753" column="1" bodyfile="/home/me/gnuradio-3.4.0/usrp/host/lib/usrp_basic.cc" bodystart="461" bodyend="472"/>
        <references refid="classusrp__basic_1aad5f6f17a9fde484c67e7dbdd0491f74" compoundref="usrp__basic_8h" startline="69">d_udh</references>
        <references refid="usrp__prims_8h_1a53e607aa5d7526e5da357ac2ee8d499b" compoundref="usrp__prims__common_8cc" startline="863" endline="874">usrp_spi_read</references>
      </memberdef>
      <memberdef kind="function" id="classusrp__basic_1a4291ecf3cc0870baaa12644143182db4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool usrp_basic::start</definition>
        <argsstring>()</argsstring>
        <name>start</name>
        <briefdescription>
<para>Start data transfers. Called in base class to derived class order. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/me/gnuradio-3.4.0/usrp/host/include/usrp/usrp_basic.h" line="759" column="1" bodyfile="/home/me/gnuradio-3.4.0/usrp/host/lib/usrp_basic.cc" bodystart="217" bodyend="220"/>
        <referencedby refid="classusrp__basic__rx_1a34128f4864ece7fafc011786c42b9994" compoundref="usrp__basic_8h" startline="850" endline="850">usrp_basic_rx::daughterboard_id</referencedby>
        <referencedby refid="classusrp__basic__tx_1a25ef6153080bcd83637c87df6ea1d478" compoundref="usrp__basic_8h" startline="965" endline="965">usrp_basic_tx::daughterboard_id</referencedby>
        <referencedby refid="classusrp__basic__rx_1a6097b0d8b2cac9a67237368d1a81b7f4" compoundref="usrp__basic_8cc" startline="849" endline="867">usrp_basic_rx::start</referencedby>
        <referencedby refid="classusrp__basic__tx_1a3d16b0d8e96d5124b6392bc44014124d" compoundref="usrp__basic_8cc" startline="1251" endline="1267">usrp_basic_tx::start</referencedby>
      </memberdef>
      <memberdef kind="function" id="classusrp__basic_1a69292bbc3b47b5ca85d4c0404dc4a58a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool usrp_basic::stop</definition>
        <argsstring>()</argsstring>
        <name>stop</name>
        <briefdescription>
<para>Stop data transfers. Called in base class to derived class order. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/me/gnuradio-3.4.0/usrp/host/include/usrp/usrp_basic.h" line="765" column="1" bodyfile="/home/me/gnuradio-3.4.0/usrp/host/lib/usrp_basic.cc" bodystart="223" bodyend="226"/>
        <referencedby refid="classusrp__basic__rx_1a34128f4864ece7fafc011786c42b9994" compoundref="usrp__basic_8h" startline="850" endline="850">usrp_basic_rx::daughterboard_id</referencedby>
        <referencedby refid="classusrp__basic__tx_1a25ef6153080bcd83637c87df6ea1d478" compoundref="usrp__basic_8h" startline="965" endline="965">usrp_basic_tx::daughterboard_id</referencedby>
        <referencedby refid="classusrp__basic__rx_1a094cb05d34da15711c6ca5c4b24defe9" compoundref="usrp__basic_8cc" startline="870" endline="885">usrp_basic_rx::stop</referencedby>
        <referencedby refid="classusrp__basic__tx_1ab1c5851e72e29e86af914da5c7f62cf8" compoundref="usrp__basic_8cc" startline="1270" endline="1285">usrp_basic_tx::stop</referencedby>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>abstract base class for usrp operations </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="879">
        <label>boost::noncopyable</label>
      </node>
      <node id="882">
        <label>usrp_basic_tx</label>
        <link refid="classusrp__basic__tx"/>
        <childnode refid="878" relation="public-inheritance">
        </childnode>
      </node>
      <node id="880">
        <label>usrp_basic_rx</label>
        <link refid="classusrp__basic__rx"/>
        <childnode refid="878" relation="public-inheritance">
        </childnode>
      </node>
      <node id="881">
        <label>usrp_standard_rx</label>
        <link refid="classusrp__standard__rx"/>
        <childnode refid="880" relation="public-inheritance">
        </childnode>
      </node>
      <node id="883">
        <label>usrp_standard_tx</label>
        <link refid="classusrp__standard__tx"/>
        <childnode refid="882" relation="public-inheritance">
        </childnode>
      </node>
      <node id="878">
        <label>usrp_basic</label>
        <link refid="classusrp__basic"/>
        <childnode refid="879" relation="private-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="885">
        <label>boost::noncopyable</label>
      </node>
      <node id="886">
        <label>usb_dev_handle</label>
        <link refid="structusb__dev__handle"/>
      </node>
      <node id="884">
        <label>usrp_basic</label>
        <link refid="classusrp__basic"/>
        <childnode refid="885" relation="private-inheritance">
        </childnode>
        <childnode refid="886" relation="usage">
          <edgelabel>d_udh</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/me/gnuradio-3.4.0/usrp/host/include/usrp/usrp_basic.h" line="64" column="1" bodyfile="/home/me/gnuradio-3.4.0/usrp/host/include/usrp/usrp_basic.h" bodystart="63" bodyend="766"/>
    <listofallmembers>
      <member refid="classusrp__basic_1a09ce78134eea035e42464123356096e4" prot="public" virt="non-virtual"><scope>usrp_basic</scope><name>_common_write_oe</name></member>
      <member refid="classusrp__basic_1a3814dc28edce07e3b5cb48bb3ebdf244" prot="public" virt="non-virtual"><scope>usrp_basic</scope><name>_read_9862</name></member>
      <member refid="classusrp__basic_1ad28278c9ff7a33b3a151c561ab037b9f" prot="public" virt="non-virtual"><scope>usrp_basic</scope><name>_read_9862</name></member>
      <member refid="classusrp__basic_1a8f92d2e9630ec614eedc61858756cce1" prot="protected" virt="non-virtual"><scope>usrp_basic</scope><name>_read_aux_adc</name></member>
      <member refid="classusrp__basic_1a2aadef5c105459794b22a135730e7480" prot="protected" virt="non-virtual"><scope>usrp_basic</scope><name>_read_aux_adc</name></member>
      <member refid="classusrp__basic_1a4fa26bd8164bd5782adf7fbe00b3d411" prot="public" virt="non-virtual"><scope>usrp_basic</scope><name>_read_fpga_reg</name></member>
      <member refid="classusrp__basic_1abf1f167a1c96dd0ed4589afc6c9fad6c" prot="public" virt="non-virtual"><scope>usrp_basic</scope><name>_read_fpga_reg</name></member>
      <member refid="classusrp__basic_1a9b54622fec87c2ed9c7808078931371f" prot="public" virt="non-virtual"><scope>usrp_basic</scope><name>_read_spi</name></member>
      <member refid="classusrp__basic_1a4585f9c7df7084a6acb29bd6d7950892" prot="public" virt="non-virtual"><scope>usrp_basic</scope><name>_set_led</name></member>
      <member refid="classusrp__basic_1a8a25444c83f59f7517d0ff687d2ff053" prot="public" virt="non-virtual"><scope>usrp_basic</scope><name>_write_9862</name></member>
      <member refid="classusrp__basic_1ab8870a35e0bdc63ee6655b5264a6d142" prot="protected" virt="non-virtual"><scope>usrp_basic</scope><name>_write_aux_dac</name></member>
      <member refid="classusrp__basic_1ac5bdb9be69f27eb3a0530cba9536d0f4" prot="public" virt="non-virtual"><scope>usrp_basic</scope><name>_write_fpga_reg</name></member>
      <member refid="classusrp__basic_1a0c200dc2d39d68d7a77e92859c5228a0" prot="public" virt="non-virtual"><scope>usrp_basic</scope><name>_write_fpga_reg_masked</name></member>
      <member refid="classusrp__basic_1ac540c04b719f1ce30426ecb2214107ef" prot="public" virt="pure-virtual"><scope>usrp_basic</scope><name>_write_oe</name></member>
      <member refid="classusrp__basic_1aaf100fafc406ef75faafcf3e38df7849" prot="public" virt="non-virtual"><scope>usrp_basic</scope><name>_write_spi</name></member>
      <member refid="classusrp__basic_1a1f769dc9ea28d701fa2f7da2be82325d" prot="public" virt="pure-virtual"><scope>usrp_basic</scope><name>block_size</name></member>
      <member refid="classusrp__basic_1ac25d56e74572309a87397f0fce1a102b" prot="public" virt="non-virtual"><scope>usrp_basic</scope><name>common_pga</name></member>
      <member refid="classusrp__basic_1a06cfd0e5675618f773c5466bd235a369" prot="public" virt="non-virtual"><scope>usrp_basic</scope><name>common_pga_db_per_step</name></member>
      <member refid="classusrp__basic_1a7dd5c384b9d2cd4e412939c3b7b7ac79" prot="public" virt="non-virtual"><scope>usrp_basic</scope><name>common_pga_max</name></member>
      <member refid="classusrp__basic_1a95453e5bb4d0ed4c05b1ea64c880170a" prot="public" virt="non-virtual"><scope>usrp_basic</scope><name>common_pga_min</name></member>
      <member refid="classusrp__basic_1a37bd03473a98cf3776f1988914c1a5ce" prot="public" virt="non-virtual"><scope>usrp_basic</scope><name>common_read_aux_adc</name></member>
      <member refid="classusrp__basic_1ab84d66e92dc16fdc104fae9341f1e64f" prot="public" virt="non-virtual"><scope>usrp_basic</scope><name>common_read_aux_adc</name></member>
      <member refid="classusrp__basic_1af7e33b5762cd9c80a714806fa6fa2244" prot="public" virt="non-virtual"><scope>usrp_basic</scope><name>common_read_io</name></member>
      <member refid="classusrp__basic_1a217f6865ef04d1111c2c1d3e7b4260f5" prot="public" virt="non-virtual"><scope>usrp_basic</scope><name>common_read_io</name></member>
      <member refid="classusrp__basic_1a52f96a90c91ed6e74bfc6a91691a7fa2" prot="public" virt="non-virtual"><scope>usrp_basic</scope><name>common_set_pga</name></member>
      <member refid="classusrp__basic_1a0997e93568c71e5432c2445b1ebcc991" prot="public" virt="non-virtual"><scope>usrp_basic</scope><name>common_write_atr_mask</name></member>
      <member refid="classusrp__basic_1a89eda6a96bc7f4d2d634da793eccbc20" prot="public" virt="non-virtual"><scope>usrp_basic</scope><name>common_write_atr_rxval</name></member>
      <member refid="classusrp__basic_1a26e38a0f9f98390b712709812e3387af" prot="public" virt="non-virtual"><scope>usrp_basic</scope><name>common_write_atr_txval</name></member>
      <member refid="classusrp__basic_1ac7354a9c4f7e961cb1b541c970a8d009" prot="public" virt="non-virtual"><scope>usrp_basic</scope><name>common_write_aux_dac</name></member>
      <member refid="classusrp__basic_1acf3120592af4df79d38d253c98c633ae" prot="public" virt="non-virtual"><scope>usrp_basic</scope><name>common_write_io</name></member>
      <member refid="classusrp__basic_1ad673bc49b311e29ab01727c5933ea028" prot="public" virt="non-virtual"><scope>usrp_basic</scope><name>common_write_refclk</name></member>
      <member refid="classusrp__basic_1a551a0912d265427e595ba826858cf3d0" prot="public" virt="pure-virtual"><scope>usrp_basic</scope><name>converter_rate</name></member>
      <member refid="classusrp__basic_1a1d6b6839b9ba385d93684c3497c3fb16" prot="protected" virt="non-virtual"><scope>usrp_basic</scope><name>d_bytes_per_poll</name></member>
      <member refid="classusrp__basic_1a747a3cfca6d00b8d2960b4692ae36bc2" prot="protected" virt="non-virtual"><scope>usrp_basic</scope><name>d_ctx</name></member>
      <member refid="classusrp__basic_1aa45df525ed16ee0c885a4972ac7908b4" prot="protected" virt="non-virtual"><scope>usrp_basic</scope><name>d_db</name></member>
      <member refid="classusrp__basic_1a686ea66e3f43c9ab6df60bd80f41ac3b" prot="protected" virt="non-virtual"><scope>usrp_basic</scope><name>d_dbid</name></member>
      <member refid="classusrp__basic_1afa81d2ee842dd6eef04c422276f52d1d" prot="protected" virt="non-virtual"><scope>usrp_basic</scope><name>d_fpga_master_clock_freq</name></member>
      <member refid="classusrp__basic_1af3d08c8bcdd0ed116e76ffa5449004f2" prot="protected" virt="non-virtual"><scope>usrp_basic</scope><name>d_fpga_shadows</name></member>
      <member refid="classusrp__basic_1aad5f6f17a9fde484c67e7dbdd0491f74" prot="protected" virt="non-virtual"><scope>usrp_basic</scope><name>d_udh</name></member>
      <member refid="classusrp__basic_1a4e5297f0010c8f39cfe4fff838b113a4" prot="protected" virt="non-virtual"><scope>usrp_basic</scope><name>d_usb_data_rate</name></member>
      <member refid="classusrp__basic_1a6d0fecbe64f35fef20293c27dc33a0b0" prot="protected" virt="non-virtual"><scope>usrp_basic</scope><name>d_verbose</name></member>
      <member refid="classusrp__basic_1a6d639e50633c165b23e0c4770b26bec2" prot="public" virt="pure-virtual"><scope>usrp_basic</scope><name>daughterboard_id</name></member>
      <member refid="classusrp__basic_1a8eb1f58ca819437d7f43ad87574bd6da" prot="public" virt="non-virtual"><scope>usrp_basic</scope><name>db</name></member>
      <member refid="classusrp__basic_1a9e3dfe1821b5aa2438a014fd7ca579f4" prot="public" virt="non-virtual"><scope>usrp_basic</scope><name>db</name></member>
      <member refid="classusrp__basic_1a244d4aa01bb6a054cd5bd0998ce2a09a" prot="public" virt="non-virtual"><scope>usrp_basic</scope><name>fpga_master_clock_freq</name></member>
      <member refid="classusrp__basic_1a9d4d1ef184ad622c7f84a6f940614b9b" prot="protected" virt="non-virtual"><scope>usrp_basic</scope><name>init_db</name></member>
      <member refid="classusrp__basic_1a61af504df443a9d846ecf909871f1481" prot="public" virt="non-virtual"><scope>usrp_basic</scope><name>is_valid</name></member>
      <member refid="classusrp__basic_1ae9277f41b745b1c96c422804fafd058a" prot="protected" virt="non-virtual"><scope>usrp_basic</scope><name>MAX_REGS</name></member>
      <member refid="classusrp__basic_1a731389d216c7232020041f7cecd3d581" prot="public" virt="pure-virtual"><scope>usrp_basic</scope><name>pga</name></member>
      <member refid="classusrp__basic_1ae67abb570f10f1216c001f2409fe3331" prot="public" virt="pure-virtual"><scope>usrp_basic</scope><name>pga_db_per_step</name></member>
      <member refid="classusrp__basic_1ae6a0027c59862dcc2d4da73d50b6a598" prot="public" virt="pure-virtual"><scope>usrp_basic</scope><name>pga_max</name></member>
      <member refid="classusrp__basic_1afcab635a411c57f16820e44a83bfe259" prot="public" virt="pure-virtual"><scope>usrp_basic</scope><name>pga_min</name></member>
      <member refid="classusrp__basic_1a7e90fb51366e9d6a8f2c844dbca2798a" prot="public" virt="pure-virtual"><scope>usrp_basic</scope><name>read_aux_adc</name></member>
      <member refid="classusrp__basic_1ab8b3158fe7448c951ad78bb54a06f5c5" prot="public" virt="pure-virtual"><scope>usrp_basic</scope><name>read_aux_adc</name></member>
      <member refid="classusrp__basic_1aefe7a2f10626831304091babff21dc0d" prot="public" virt="non-virtual"><scope>usrp_basic</scope><name>read_eeprom</name></member>
      <member refid="classusrp__basic_1a364d3e56a0749a90cc5de2ac378e6863" prot="public" virt="non-virtual"><scope>usrp_basic</scope><name>READ_FAILED</name></member>
      <member refid="classusrp__basic_1ab284caa2e15464f62aa80ad1f540ecc5" prot="public" virt="non-virtual"><scope>usrp_basic</scope><name>read_i2c</name></member>
      <member refid="classusrp__basic_1ad443caee9815e7c69a8b39a29cf8846a" prot="public" virt="pure-virtual"><scope>usrp_basic</scope><name>read_io</name></member>
      <member refid="classusrp__basic_1a166feedb83f6425d3bbbbf65f29bf42c" prot="public" virt="pure-virtual"><scope>usrp_basic</scope><name>read_io</name></member>
      <member refid="classusrp__basic_1a648de1479d7632b59bf2732f231ddbe0" prot="public" virt="non-virtual"><scope>usrp_basic</scope><name>selected_subdev</name></member>
      <member refid="classusrp__basic_1a70a71308412a67eaf825c13399faa078" prot="public" virt="non-virtual"><scope>usrp_basic</scope><name>serial_number</name></member>
      <member refid="classusrp__basic_1a97fc801cbafa85040a3d39be03d27a62" prot="public" virt="non-virtual"><scope>usrp_basic</scope><name>set_adc_buffer_bypass</name></member>
      <member refid="classusrp__basic_1ad0e07c8d85aa220aaf150e27dd8b545f" prot="public" virt="non-virtual"><scope>usrp_basic</scope><name>set_adc_offset</name></member>
      <member refid="classusrp__basic_1ab18f4a02c0efcac10f8e9406ca7a57a7" prot="public" virt="non-virtual"><scope>usrp_basic</scope><name>set_dac_offset</name></member>
      <member refid="classusrp__basic_1af20cc324fca8d089226d5a6dfc3d3668" prot="public" virt="non-virtual"><scope>usrp_basic</scope><name>set_dc_offset_cl_enable</name></member>
      <member refid="classusrp__basic_1a825640d1de15253b5bae18762a0e403e" prot="public" virt="non-virtual"><scope>usrp_basic</scope><name>set_fpga_master_clock_freq</name></member>
      <member refid="classusrp__basic_1afdcf0497f2554589b36a57806e239a07" prot="public" virt="pure-virtual"><scope>usrp_basic</scope><name>set_pga</name></member>
      <member refid="classusrp__basic_1a77535750946e7d8443a76941a9611cae" prot="protected" virt="non-virtual"><scope>usrp_basic</scope><name>set_usb_data_rate</name></member>
      <member refid="classusrp__basic_1ae200e6eb7dbbaf81a3c1353a401f97d3" prot="public" virt="non-virtual"><scope>usrp_basic</scope><name>set_verbose</name></member>
      <member refid="classusrp__basic_1afaae41796f1468062d4ad237322baf9e" prot="protected" virt="non-virtual"><scope>usrp_basic</scope><name>shutdown_daughterboards</name></member>
      <member refid="classusrp__basic_1a4291ecf3cc0870baaa12644143182db4" prot="public" virt="non-virtual"><scope>usrp_basic</scope><name>start</name></member>
      <member refid="classusrp__basic_1a69292bbc3b47b5ca85d4c0404dc4a58a" prot="public" virt="non-virtual"><scope>usrp_basic</scope><name>stop</name></member>
      <member refid="classusrp__basic_1a530c23ff633c630530ec491c368a755d" prot="public" virt="non-virtual"><scope>usrp_basic</scope><name>usb_data_rate</name></member>
      <member refid="classusrp__basic_1ac72f072eb9220e798019b60b3fe48af6" prot="protected" virt="non-virtual"><scope>usrp_basic</scope><name>usrp_basic</name></member>
      <member refid="classusrp__basic_1a49074783b3757b6af17ddf8e8f56be6c" prot="public" virt="pure-virtual"><scope>usrp_basic</scope><name>write_atr_mask</name></member>
      <member refid="classusrp__basic_1ad9b95b1ca0e2616c1b3808892fdda1b0" prot="public" virt="non-virtual"><scope>usrp_basic</scope><name>write_atr_rx_delay</name></member>
      <member refid="classusrp__basic_1ae5466590dd7ec5646fefbb82d92ad899" prot="public" virt="pure-virtual"><scope>usrp_basic</scope><name>write_atr_rxval</name></member>
      <member refid="classusrp__basic_1a70f4070830b0db3fd0c3addb97ce966e" prot="public" virt="non-virtual"><scope>usrp_basic</scope><name>write_atr_tx_delay</name></member>
      <member refid="classusrp__basic_1a504bf45d241c56ddf00ee07fc946207e" prot="public" virt="pure-virtual"><scope>usrp_basic</scope><name>write_atr_txval</name></member>
      <member refid="classusrp__basic_1a332790fa84b6b64f82de8983b45b611a" prot="public" virt="pure-virtual"><scope>usrp_basic</scope><name>write_aux_dac</name></member>
      <member refid="classusrp__basic_1a3900d37e951b83c938669f5fa0255866" prot="public" virt="non-virtual"><scope>usrp_basic</scope><name>write_eeprom</name></member>
      <member refid="classusrp__basic_1a664e5aa3a3fb8a4c50b752906fcb79a0" prot="public" virt="non-virtual"><scope>usrp_basic</scope><name>write_i2c</name></member>
      <member refid="classusrp__basic_1a75aca6cca672ac2deedf14fb2c04ab0e" prot="public" virt="pure-virtual"><scope>usrp_basic</scope><name>write_io</name></member>
      <member refid="classusrp__basic_1a80a4f8800742b6b06ec6f1908a448fc8" prot="public" virt="pure-virtual"><scope>usrp_basic</scope><name>write_refclk</name></member>
      <member refid="classusrp__basic_1a01313a5f1c8e0eea1a1ff26388e25f78" prot="public" virt="virtual"><scope>usrp_basic</scope><name>~usrp_basic</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
