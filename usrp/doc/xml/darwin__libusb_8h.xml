<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="darwin__libusb_8h" kind="file" language="C++">
    <compoundname>darwin_libusb.h</compoundname>
    <includes local="no">IOKit/IOCFBundle.h</includes>
    <includes local="no">IOKit/IOCFPlugIn.h</includes>
    <includes local="no">IOKit/usb/IOUSBLib.h</includes>
    <includes local="no">IOKit/IOKitLib.h</includes>
    <includedby refid="fusb__darwin_8cc" local="yes">fusb_darwin.cc</includedby>
    <incdepgraph>
      <node id="30">
        <label>IOKit/usb/IOUSBLib.h</label>
      </node>
      <node id="31">
        <label>IOKit/IOKitLib.h</label>
      </node>
      <node id="27">
        <label>darwin_libusb.h</label>
        <link refid="darwin_libusb.h"/>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>IOKit/IOCFPlugIn.h</label>
      </node>
      <node id="28">
        <label>IOKit/IOCFBundle.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="33">
        <label>fusb_darwin.cc</label>
        <link refid="fusb__darwin_8cc"/>
      </node>
      <node id="32">
        <label>darwin_libusb.h</label>
        <link refid="darwin_libusb.h"/>
        <childnode refid="33" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="darwin__libusb_8h_1ad9ce9c713032316c91d3ca8a95e07518" prot="public" static="no">
        <name>LUSBDARWINSTALL</name>
        <initializer>(ELAST+1)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/me/gnuradio-3.4.0/usrp/host/lib/darwin_libusb.h" line="84" column="9" bodyfile="/home/me/gnuradio-3.4.0/usrp/host/lib/darwin_libusb.h" bodystart="84" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="darwin__libusb_8h_1aee2e1933991308b6c53a58f359fc0337" prot="public" static="no">
        <name>USB_ERROR</name>
        <param><defname>r</defname></param>
        <param><defname>x</defname></param>
        <initializer>do {						 \
    <ref refid="darwin__libusb_8h_1aa4ff1dfa6329acc36ccbd7e17cc3da97" kindref="member">usb_error_type</ref> = <ref refid="darwin__libusb_8h_1a7ab53b8f90543f083c2dd1ca792c296fa3d28c6eb7560fdc1c02430168588b0c0" kindref="member">USB_ERROR_TYPE_ERRNO</ref>;	 \
    <ref refid="darwin__libusb_8h_1a27960afa38d36b296d487a5aa0e0496c" kindref="member">usb_error_errno</ref> = x;			 \
    return (r);					 \
  } while (0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/me/gnuradio-3.4.0/usrp/host/lib/darwin_libusb.h" line="119" column="9" bodyfile="/home/me/gnuradio-3.4.0/usrp/host/lib/darwin_libusb.h" bodystart="119" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="darwin__libusb_8h_1a91458181f6a0e61a1a81b135ced5aaa7" prot="public" static="no">
        <name>USB_ERROR_STR</name>
        <param><defname>r</defname></param>
        <param><defname>x</defname></param>
        <param><defname>format</defname></param>
        <param><defname>args...</defname></param>
        <initializer>do {									\
    <ref refid="darwin__libusb_8h_1aa4ff1dfa6329acc36ccbd7e17cc3da97" kindref="member">usb_error_type</ref> = <ref refid="darwin__libusb_8h_1a7ab53b8f90543f083c2dd1ca792c296fa6edb710e424b2ca4743f88b31e28f111" kindref="member">USB_ERROR_TYPE_STRING</ref>;				\
    snprintf (<ref refid="darwin__libusb_8h_1a5e5ca0e895551ecfc8a311e538e56e38" kindref="member">usb_error_str</ref>, sizeof (<ref refid="darwin__libusb_8h_1a5e5ca0e895551ecfc8a311e538e56e38" kindref="member">usb_error_str</ref>) - 1,		\
	      format, ## args);						\
    if (<ref refid="fusb__darwin_8h_1ae3f6d70c719c77e228ccc905331d7784" kindref="member">usb_debug</ref>) {							\
      std::cerr &lt;&lt; &quot;USB error: &quot; &lt;&lt; usb_error_str &lt;&lt; std::cerr;		\
    }									\
    return (r);								\
  } while (0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/me/gnuradio-3.4.0/usrp/host/lib/darwin_libusb.h" line="126" column="9" bodyfile="/home/me/gnuradio-3.4.0/usrp/host/lib/darwin_libusb.h" bodystart="126" bodyend="-1"/>
        <referencedby refid="classfusb__ephandle__darwin_1aca1441ae1cd0cff2008c23db7cff9482" compoundref="fusb__darwin_8cc" startline="129" endline="221">fusb_ephandle_darwin::start</referencedby>
        <referencedby refid="classfusb__ephandle__darwin_1ad703974c4df48763a1ec4d0d489237e3" compoundref="fusb__darwin_8cc" startline="441" endline="493">fusb_ephandle_darwin::write</referencedby>
      </memberdef>
      <memberdef kind="define" id="darwin__libusb_8h_1afc11ef28456558a98899476aeab1e42b" prot="public" static="no">
        <name>USB_ERROR_STR_ORIG</name>
        <param><defname>x</defname></param>
        <param><defname>format</defname></param>
        <param><defname>args...</defname></param>
        <initializer>do {									\
    <ref refid="darwin__libusb_8h_1aa4ff1dfa6329acc36ccbd7e17cc3da97" kindref="member">usb_error_type</ref> = <ref refid="darwin__libusb_8h_1a7ab53b8f90543f083c2dd1ca792c296fa6edb710e424b2ca4743f88b31e28f111" kindref="member">USB_ERROR_TYPE_STRING</ref>;				\
    snprintf (<ref refid="darwin__libusb_8h_1a5e5ca0e895551ecfc8a311e538e56e38" kindref="member">usb_error_str</ref>, sizeof (<ref refid="darwin__libusb_8h_1a5e5ca0e895551ecfc8a311e538e56e38" kindref="member">usb_error_str</ref>) - 1,		\
	      format, ## args);						\
    if (<ref refid="fusb__darwin_8h_1ae3f6d70c719c77e228ccc905331d7784" kindref="member">usb_debug</ref>) {							\
      std::cerr &lt;&lt; &quot;USB error: &quot; &lt;&lt; usb_error_str &lt;&lt; std::endl;		\
    }									\
    return (x);								\
  } while (0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/me/gnuradio-3.4.0/usrp/host/lib/darwin_libusb.h" line="137" column="9" bodyfile="/home/me/gnuradio-3.4.0/usrp/host/lib/darwin_libusb.h" bodystart="137" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="darwin__libusb_8h_1a6c7a312a78f69953e39305ab222522ca" prot="public" static="no">
        <name>USB_ERROR_STR_NO_RET</name>
        <param><defname>x</defname></param>
        <param><defname>format</defname></param>
        <param><defname>args...</defname></param>
        <initializer>do {									\
    <ref refid="darwin__libusb_8h_1aa4ff1dfa6329acc36ccbd7e17cc3da97" kindref="member">usb_error_type</ref> = <ref refid="darwin__libusb_8h_1a7ab53b8f90543f083c2dd1ca792c296fa6edb710e424b2ca4743f88b31e28f111" kindref="member">USB_ERROR_TYPE_STRING</ref>;				\
    snprintf (<ref refid="darwin__libusb_8h_1a5e5ca0e895551ecfc8a311e538e56e38" kindref="member">usb_error_str</ref>, sizeof (<ref refid="darwin__libusb_8h_1a5e5ca0e895551ecfc8a311e538e56e38" kindref="member">usb_error_str</ref>) - 1,		\
	      format, ## args);						\
    if (<ref refid="fusb__darwin_8h_1ae3f6d70c719c77e228ccc905331d7784" kindref="member">usb_debug</ref>) {							\
      std::cerr &lt;&lt; &quot;USB error: &quot; &lt;&lt; usb_error_str &lt;&lt; std::endl;		\
    }									\
  } while (0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/me/gnuradio-3.4.0/usrp/host/lib/darwin_libusb.h" line="148" column="9" bodyfile="/home/me/gnuradio-3.4.0/usrp/host/lib/darwin_libusb.h" bodystart="148" bodyend="-1"/>
        <referencedby refid="classfusb__ephandle__darwin_1aa5067d1f65048940bffdfdb7996ea8d3" compoundref="fusb__darwin_8cc" startline="523" endline="538">fusb_ephandle_darwin::abort</referencedby>
        <referencedby refid="classfusb__ephandle__darwin_1aca1441ae1cd0cff2008c23db7cff9482" compoundref="fusb__darwin_8cc" startline="129" endline="221">fusb_ephandle_darwin::start</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="darwin__libusb_8h_1a7ab53b8f90543f083c2dd1ca792c296f" prot="public" static="no">
        <name>usb_error_type_t</name>
        <enumvalue id="darwin__libusb_8h_1a7ab53b8f90543f083c2dd1ca792c296fafcf45746515fd9b279a99b3bd3987da8" prot="public">
          <name>USB_ERROR_TYPE_NONE</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="darwin__libusb_8h_1a7ab53b8f90543f083c2dd1ca792c296fa6edb710e424b2ca4743f88b31e28f111" prot="public">
          <name>USB_ERROR_TYPE_STRING</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="darwin__libusb_8h_1a7ab53b8f90543f083c2dd1ca792c296fa3d28c6eb7560fdc1c02430168588b0c0" prot="public">
          <name>USB_ERROR_TYPE_ERRNO</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/me/gnuradio-3.4.0/usrp/host/lib/darwin_libusb.h" line="109" column="1" bodyfile="/home/me/gnuradio-3.4.0/usrp/host/lib/darwin_libusb.h" bodystart="109" bodyend="113"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="darwin__libusb_8h_1ace5b3c1d7038e9510c8cc529c14a0147" prot="public" static="yes" mutable="no">
        <type>const char *</type>
        <definition>const char* darwin_error_strings[]</definition>
        <argsstring>[]</argsstring>
        <name>darwin_error_strings</name>
        <initializer>= {
  &quot;no error&quot;,
  &quot;device not opened for exclusive access&quot;,
  &quot;no connection to an IOService&quot;,
  &quot;no asyc port has been opened for interface&quot;,
  &quot;another process has device opened for exclusive access&quot;,
  &quot;pipe is stalled&quot;,
  &quot;could not establish a connection to Darin kernel&quot;,
  &quot;invalid argument&quot;,
  &quot;unknown error&quot;
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/me/gnuradio-3.4.0/usrp/host/lib/darwin_libusb.h" line="46" column="1" bodyfile="/home/me/gnuradio-3.4.0/usrp/host/lib/darwin_libusb.h" bodystart="46" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="darwin__libusb_8h_1a5e5ca0e895551ecfc8a311e538e56e38" prot="public" static="no" mutable="no">
        <type>char</type>
        <definition>char usb_error_str[1024]</definition>
        <argsstring>[1024]</argsstring>
        <name>usb_error_str</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/me/gnuradio-3.4.0/usrp/host/lib/darwin_libusb.h" line="115" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="darwin__libusb_8h_1a27960afa38d36b296d487a5aa0e0496c" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int usb_error_errno</definition>
        <argsstring></argsstring>
        <name>usb_error_errno</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/me/gnuradio-3.4.0/usrp/host/lib/darwin_libusb.h" line="116" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="darwin__libusb_8h_1aa4ff1dfa6329acc36ccbd7e17cc3da97" prot="public" static="no" mutable="no">
        <type><ref refid="darwin__libusb_8h_1a7ab53b8f90543f083c2dd1ca792c296f" kindref="member">usb_error_type_t</ref></type>
        <definition>usb_error_type_t usb_error_type</definition>
        <argsstring></argsstring>
        <name>usb_error_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/me/gnuradio-3.4.0/usrp/host/lib/darwin_libusb.h" line="117" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="darwin__libusb_8h_1a0e50d1905375baa6c4cf2c33b9255a29" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>static const char* darwin_error_str</definition>
        <argsstring>(int result)</argsstring>
        <name>darwin_error_str</name>
        <param>
          <type>int</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/me/gnuradio-3.4.0/usrp/host/lib/darwin_libusb.h" line="59" column="1" bodyfile="/home/me/gnuradio-3.4.0/usrp/host/lib/darwin_libusb.h" bodystart="59" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="darwin__libusb_8h_1a5f142ddfbebbea7e1cbe3db4fc7fe418" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int darwin_to_errno</definition>
        <argsstring>(int result)</argsstring>
        <name>darwin_to_errno</name>
        <param>
          <type>int</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/me/gnuradio-3.4.0/usrp/host/lib/darwin_libusb.h" line="87" column="1" bodyfile="/home/me/gnuradio-3.4.0/usrp/host/lib/darwin_libusb.h" bodystart="87" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="darwin__libusb_8h_1a805f2ed6930d982da5ff72217848e26d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int ep_to_pipeRef</definition>
        <argsstring>(darwin_dev_handle *device, int ep)</argsstring>
        <name>ep_to_pipeRef</name>
        <param>
          <type><ref refid="structdarwin__dev__handle" kindref="compound">darwin_dev_handle</ref> *</type>
          <declname>device</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ep</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/me/gnuradio-3.4.0/usrp/host/lib/darwin_libusb.h" line="162" column="1" bodyfile="/home/me/gnuradio-3.4.0/usrp/host/lib/darwin_libusb.h" bodystart="162" bodyend="224"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*<sp/>-*-<sp/>c++<sp/>-*-<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>2006,2009<sp/>Free<sp/>Software<sp/>Foundation,<sp/>Inc.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>This<sp/>file<sp/>is<sp/>part<sp/>of<sp/>GNU<sp/>Radio.</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>GNU<sp/>Radio<sp/>is<sp/>free<sp/>software;<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or<sp/>modify</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>it<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>as<sp/>published<sp/>by</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>the<sp/>Free<sp/>Software<sp/>Foundation;<sp/>either<sp/>version<sp/>3,<sp/>or<sp/>(at<sp/>your<sp/>option)</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>any<sp/>later<sp/>version.</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>GNU<sp/>Radio<sp/>is<sp/>distributed<sp/>in<sp/>the<sp/>hope<sp/>that<sp/>it<sp/>will<sp/>be<sp/>useful,</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>but<sp/>WITHOUT<sp/>ANY<sp/>WARRANTY;<sp/>without<sp/>even<sp/>the<sp/>implied<sp/>warranty<sp/>of</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/>MERCHANTABILITY<sp/>or<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE.<sp/><sp/>See<sp/>the</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>for<sp/>more<sp/>details.</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/>along<sp/>with<sp/>GNU<sp/>Radio;<sp/>see<sp/>the<sp/>file<sp/>COPYING.<sp/><sp/>If<sp/>not,<sp/>write<sp/>to</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/>the<sp/>Free<sp/>Software<sp/>Foundation,<sp/>Inc.,<sp/>51<sp/>Franklin<sp/>Street,</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>Boston,<sp/>MA<sp/>02110-1301,<sp/>USA.</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>The<sp/>following<sp/>code<sp/>was<sp/>taken<sp/>from<sp/>LIBUSB<sp/>verion<sp/>0.1.10a,</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>and<sp/>makes<sp/>the<sp/>fusb_darwin<sp/>codes<sp/>do-able<sp/>in<sp/>the<sp/>current<sp/>GR</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/>programming<sp/>framework.<sp/><sp/>Parts<sp/>and<sp/>pieces<sp/>were<sp/>taken<sp/>from</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/>usbi.h,<sp/>darwin.c,<sp/>and<sp/>error.h<sp/>.</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*<sp/>LIBUSB<sp/>version<sp/>0.1.10a<sp/>is<sp/>covered<sp/>by<sp/>the<sp/>LGPL,<sp/>version<sp/>2;</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/>These<sp/>codes<sp/>are<sp/>used<sp/>with<sp/>permission<sp/>from:</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*<sp/><sp/><sp/>(c)<sp/>2000-2003<sp/>Johannes<sp/>Erdfelt<sp/>&lt;johannes@erdfelt.com&gt;</highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/>*<sp/><sp/><sp/>(c)<sp/>2002-2005<sp/>Nathan<sp/>Hjelm<sp/>&lt;hjelmn@users.sourceforge.net&gt;</highlight></codeline>
<codeline lineno="33"><highlight class="comment"><sp/>*<sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="34"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>__DARWIN_LIBUSB_H__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__DARWIN_LIBUSB_H__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;IOKit/IOCFBundle.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;IOKit/IOCFPlugIn.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;IOKit/usb/IOUSBLib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;IOKit/IOKitLib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>darwin_error_strings[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;no<sp/>error&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;device<sp/>not<sp/>opened<sp/>for<sp/>exclusive<sp/>access&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;no<sp/>connection<sp/>to<sp/>an<sp/>IOService&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;no<sp/>asyc<sp/>port<sp/>has<sp/>been<sp/>opened<sp/>for<sp/>interface&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;another<sp/>process<sp/>has<sp/>device<sp/>opened<sp/>for<sp/>exclusive<sp/>access&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;pipe<sp/>is<sp/>stalled&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;could<sp/>not<sp/>establish<sp/>a<sp/>connection<sp/>to<sp/>Darin<sp/>kernel&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;invalid<sp/>argument&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;unknown<sp/>error&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal">};</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight></codeline>
<codeline lineno="59"><highlight class="normal">darwin_error_str<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>result)</highlight></codeline>
<codeline lineno="60"><highlight class="normal">{</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(result)<sp/>{</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kIOReturnSuccess:</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(darwin_error_strings[0]);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kIOReturnNotOpen:</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(darwin_error_strings[1]);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kIOReturnNoDevice:</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(darwin_error_strings[2]);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kIOUSBNoAsyncPortErr:</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(darwin_error_strings[3]);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kIOReturnExclusiveAccess:</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(darwin_error_strings[4]);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kIOUSBPipeStalled:</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(darwin_error_strings[5]);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kIOReturnError:</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(darwin_error_strings[6]);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kIOReturnBadArgument:</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(darwin_error_strings[7]);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(darwin_error_strings[8]);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="81"><highlight class="normal">}</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>not<sp/>a<sp/>valid<sp/>errorno<sp/>outside<sp/>darwin.c<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84" refid="darwin__libusb_8h_1ad9ce9c713032316c91d3ca8a95e07518" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LUSBDARWINSTALL<sp/>(ELAST+1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal">darwin_to_errno<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>result)</highlight></codeline>
<codeline lineno="88"><highlight class="normal">{</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(result)<sp/>{</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kIOReturnSuccess:</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kIOReturnNotOpen:</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EBADF;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kIOReturnNoDevice:</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kIOUSBNoAsyncPortErr:</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ENXIO;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kIOReturnExclusiveAccess:</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EBUSY;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kIOUSBPipeStalled:</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="darwin__libusb_8h_1ad9ce9c713032316c91d3ca8a95e07518" kindref="member">LUSBDARWINSTALL</ref>;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kIOReturnBadArgument:</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EINVAL;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kIOReturnError:</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="107"><highlight class="normal">}</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109" refid="darwin__libusb_8h_1a7ab53b8f90543f083c2dd1ca792c296f" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="110" refid="darwin__libusb_8h_1a7ab53b8f90543f083c2dd1ca792c296fafcf45746515fd9b279a99b3bd3987da8" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="darwin__libusb_8h_1a7ab53b8f90543f083c2dd1ca792c296fafcf45746515fd9b279a99b3bd3987da8" kindref="member">USB_ERROR_TYPE_NONE</ref><sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="111" refid="darwin__libusb_8h_1a7ab53b8f90543f083c2dd1ca792c296fa6edb710e424b2ca4743f88b31e28f111" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="darwin__libusb_8h_1a7ab53b8f90543f083c2dd1ca792c296fa6edb710e424b2ca4743f88b31e28f111" kindref="member">USB_ERROR_TYPE_STRING</ref>,</highlight></codeline>
<codeline lineno="112" refid="darwin__libusb_8h_1a7ab53b8f90543f083c2dd1ca792c296fa3d28c6eb7560fdc1c02430168588b0c0" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="darwin__libusb_8h_1a7ab53b8f90543f083c2dd1ca792c296fa3d28c6eb7560fdc1c02430168588b0c0" kindref="member">USB_ERROR_TYPE_ERRNO</ref>,</highlight></codeline>
<codeline lineno="113"><highlight class="normal">}<sp/><ref refid="darwin__libusb_8h_1a7ab53b8f90543f083c2dd1ca792c296f" kindref="member">usb_error_type_t</ref>;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="darwin__libusb_8h_1a5e5ca0e895551ecfc8a311e538e56e38" kindref="member">usb_error_str</ref>[1024];</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="darwin__libusb_8h_1a27960afa38d36b296d487a5aa0e0496c" kindref="member">usb_error_errno</ref>;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>usb_error_type_t<sp/><ref refid="darwin__libusb_8h_1aa4ff1dfa6329acc36ccbd7e17cc3da97" kindref="member">usb_error_type</ref>;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119" refid="darwin__libusb_8h_1aee2e1933991308b6c53a58f359fc0337" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>USB_ERROR(r,<sp/>x)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="120"><highlight class="preprocessor"><sp/><sp/>do<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="121"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>usb_error_type<sp/>=<sp/>USB_ERROR_TYPE_ERRNO;<sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="122"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>usb_error_errno<sp/>=<sp/>x;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="123"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>(r);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="124"><highlight class="preprocessor"><sp/><sp/>}<sp/>while<sp/>(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126" refid="darwin__libusb_8h_1a91458181f6a0e61a1a81b135ced5aaa7" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>USB_ERROR_STR(r,<sp/>x,<sp/>format,<sp/>args...)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="127"><highlight class="preprocessor"><sp/><sp/>do<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="128"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>usb_error_type<sp/>=<sp/>USB_ERROR_TYPE_STRING;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="129"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>snprintf<sp/>(usb_error_str,<sp/>sizeof<sp/>(usb_error_str)<sp/>-<sp/>1,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="130"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>format,<sp/>##<sp/>args);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="131"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(usb_debug)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="132"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/>&quot;USB<sp/>error:<sp/>&quot;<sp/>&lt;&lt;<sp/>usb_error_str<sp/>&lt;&lt;<sp/>std::cerr;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="133"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="134"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>(r);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="135"><highlight class="preprocessor"><sp/><sp/>}<sp/>while<sp/>(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137" refid="darwin__libusb_8h_1afc11ef28456558a98899476aeab1e42b" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>USB_ERROR_STR_ORIG(x,<sp/>format,<sp/>args...)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="138"><highlight class="preprocessor"><sp/><sp/>do<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="139"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>usb_error_type<sp/>=<sp/>USB_ERROR_TYPE_STRING;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="140"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>snprintf<sp/>(usb_error_str,<sp/>sizeof<sp/>(usb_error_str)<sp/>-<sp/>1,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="141"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>format,<sp/>##<sp/>args);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="142"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(usb_debug)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="143"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/>&quot;USB<sp/>error:<sp/>&quot;<sp/>&lt;&lt;<sp/>usb_error_str<sp/>&lt;&lt;<sp/>std::endl;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="144"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="145"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>(x);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="146"><highlight class="preprocessor"><sp/><sp/>}<sp/>while<sp/>(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="148" refid="darwin__libusb_8h_1a6c7a312a78f69953e39305ab222522ca" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>USB_ERROR_STR_NO_RET(x,<sp/>format,<sp/>args...)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="149"><highlight class="preprocessor"><sp/><sp/>do<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="150"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>usb_error_type<sp/>=<sp/>USB_ERROR_TYPE_STRING;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="151"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>snprintf<sp/>(usb_error_str,<sp/>sizeof<sp/>(usb_error_str)<sp/>-<sp/>1,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="152"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>format,<sp/>##<sp/>args);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="153"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(usb_debug)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="154"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/>&quot;USB<sp/>error:<sp/>&quot;<sp/>&lt;&lt;<sp/>usb_error_str<sp/>&lt;&lt;<sp/>std::endl;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="155"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="156"><highlight class="preprocessor"><sp/><sp/>}<sp/>while<sp/>(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="159"><highlight class="comment"><sp/>*<sp/>simple<sp/>function<sp/>that<sp/>figures<sp/>out<sp/>what<sp/>pipeRef</highlight></codeline>
<codeline lineno="160"><highlight class="comment"><sp/>*<sp/>is<sp/>associated<sp/>with<sp/>an<sp/>endpoint</highlight></codeline>
<codeline lineno="161"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ep_to_pipeRef<sp/>(<ref refid="structdarwin__dev__handle" kindref="compound">darwin_dev_handle</ref><sp/>*device,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ep)</highlight></codeline>
<codeline lineno="163"><highlight class="normal">{</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><ref refid="fusb__darwin_8h_1a33b766964215f52ef3eeae1397a3d244" kindref="member">io_return_t</ref><sp/>ret;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/>UInt8<sp/>numep,<sp/>direction,<sp/>number;</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/>UInt8<sp/>dont_care1,<sp/>dont_care3;</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/>UInt16<sp/>dont_care2;</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="fusb__darwin_8h_1ae3f6d70c719c77e228ccc905331d7784" kindref="member">usb_debug</ref><sp/>&gt;<sp/>3)<sp/>{</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Converting<sp/>ep<sp/>address<sp/>to<sp/>pipeRef.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>retrieve<sp/>the<sp/>total<sp/>number<sp/>of<sp/>endpoints<sp/>on<sp/>this<sp/>interface<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/>ret<sp/>=<sp/>(*(device-&gt;<ref refid="structdarwin__dev__handle_1a24033b6bf2283cebd863675951365439" kindref="member">interface</ref>))-&gt;GetNumEndpoints(device-&gt;<ref refid="structdarwin__dev__handle_1a24033b6bf2283cebd863675951365439" kindref="member">interface</ref>,<sp/>&amp;numep);</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>ret<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/><ref refid="fusb__darwin_8h_1ae3f6d70c719c77e228ccc905331d7784" kindref="member">usb_debug</ref><sp/>&gt;<sp/>3<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;ep_to_pipeRef:<sp/>interface<sp/>is<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>device-&gt;<ref refid="structdarwin__dev__handle_1a24033b6bf2283cebd863675951365439" kindref="member">interface</ref><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="darwin__libusb_8h_1afc11ef28456558a98899476aeab1e42b" kindref="member">USB_ERROR_STR_ORIG</ref><sp/>(<sp/>-ret,<sp/></highlight><highlight class="stringliteral">&quot;ep_to_pipeRef:<sp/>can&apos;t<sp/>get<sp/>number<sp/>of<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;endpoints<sp/>for<sp/>interface&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>iterate<sp/>through<sp/>the<sp/>pipeRefs<sp/>until<sp/>we<sp/>find<sp/>the<sp/>correct<sp/>one<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>1<sp/>;<sp/>i<sp/>&lt;=<sp/>numep<sp/>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>(*(device-&gt;<ref refid="structdarwin__dev__handle_1a24033b6bf2283cebd863675951365439" kindref="member">interface</ref>))-&gt;GetPipeProperties</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(device-&gt;<ref refid="structdarwin__dev__handle_1a24033b6bf2283cebd863675951365439" kindref="member">interface</ref>,<sp/>i,<sp/>&amp;direction,<sp/>&amp;number,</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;dont_care1,<sp/>&amp;dont_care2,<sp/>&amp;dont_care3);</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ret<sp/>!=<sp/>kIOReturnSuccess)<sp/>{</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;ep_to_pipeRef:<sp/>an<sp/>error<sp/>occurred<sp/>getting<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;pipe<sp/>information<sp/>on<sp/>pipe<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="darwin__libusb_8h_1afc11ef28456558a98899476aeab1e42b" kindref="member">USB_ERROR_STR_ORIG</ref><sp/>(-darwin_to_errno(ret),</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;ep_to_pipeRef(GetPipeProperties):<sp/>%s&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>darwin_error_str(ret));</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="fusb__darwin_8h_1ae3f6d70c719c77e228ccc905331d7784" kindref="member">usb_debug</ref><sp/>&gt;<sp/>3)<sp/>{</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;ep_to_pipeRef:<sp/>Pipe<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;:<sp/>DIR:<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>direction<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>number:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>number<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>calculate<sp/>the<sp/>endpoint<sp/>of<sp/>the<sp/>pipe<sp/>and<sp/>check<sp/>it<sp/>versus</highlight></codeline>
<codeline lineno="206"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>requested<sp/>endpoint<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>((direction<sp/>&lt;&lt;<sp/>7<sp/>&amp;<sp/>USB_ENDPOINT_DIR_MASK)<sp/>|</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(number<sp/>&amp;<sp/>USB_ENDPOINT_ADDRESS_MASK))<sp/>==<sp/>ep<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="fusb__darwin_8h_1ae3f6d70c719c77e228ccc905331d7784" kindref="member">usb_debug</ref><sp/>&gt;<sp/>3)<sp/>{</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;ep_to_pipeRef:<sp/>pipeRef<sp/>for<sp/>ep<sp/>address<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>ep<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>found:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(i);</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="fusb__darwin_8h_1ae3f6d70c719c77e228ccc905331d7784" kindref="member">usb_debug</ref><sp/>&gt;<sp/>3)<sp/>{</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;ep_to_pipeRef:<sp/>No<sp/>pipeRef<sp/>found<sp/>with<sp/>endpoint<sp/>address<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>ep<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>none<sp/>of<sp/>the<sp/>found<sp/>pipes<sp/>match<sp/>the<sp/>requested<sp/>endpoint<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(-1);</highlight></codeline>
<codeline lineno="224"><highlight class="normal">}</highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal">}</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>__DARWIN_LIBUSB_H__<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="/home/me/gnuradio-3.4.0/usrp/host/lib/darwin_libusb.h"/>
  </compounddef>
</doxygen>
